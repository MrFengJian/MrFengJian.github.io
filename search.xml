<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>centos7部署1.26版本k8s with docker</title>
      <link href="/2c09b8c3.html"/>
      <url>/2c09b8c3.html</url>
      
        <content type="html"><![CDATA[<h1 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h1><p>k8s自1.24版本以后，就不再默认支持docker作为容器运行时，而是用containerd作为默认运行时。主要原因处于性能和稳定性考虑，如下图所示：</p><p><img src="/2c09b8c3/%E5%88%87%E6%8D%A2%E5%88%B0containrd.png" alt="切换到containrd"></p><p>缩短了调用链，对用户来说无感知，没有太大影响，但是对开发者来说，熟悉的docker体系工具都不可用了，开发体验下降，因此Mirantis和docker公司开源了cri-docker项目，继续提供docker与k8s的集成，保持体验一致性。在此，记录下1.24版本以后，k8s与docker的集成过程，以备后续使用。</p><h1 id="主机准备"><a href="#主机准备" class="headerlink" title="主机准备"></a>主机准备</h1><h2 id="配置阿里云源"><a href="#配置阿里云源" class="headerlink" title="配置阿里云源"></a>配置阿里云源</h2><p>集群的所有主机都需要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -o /etc/yum.repos.d/CentOS-Base.repo https://mirrors.aliyun.com/repo/Centos-7.repo</span><br></pre></td></tr></table></figure><h2 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title="关闭防火墙"></a>关闭防火墙</h2><p>集群的所有主机都需要</p><p><code>systemctl disable firewalld&amp;&amp; systemctl stop firewalld</code></p><h2 id="时钟同步"><a href="#时钟同步" class="headerlink" title="时钟同步"></a>时钟同步</h2><p>集群的所有主机都需要</p><p><code>yum install chrony -y&amp;&amp;systemctl enable --now chronyd&amp;&amp;chronyc sources</code></p><h2 id="SSH和主机名设置"><a href="#SSH和主机名设置" class="headerlink" title="SSH和主机名设置"></a>SSH和主机名设置</h2><p>设置主机名</p><p><code>hostnamectl set-hostname k8s</code></p><p>生成密钥</p><p><code>ssh-key-gen</code></p><p>从主节点分发密钥到所有工作节点</p><p><code>ssh-copy-id &lt;用户名&gt;@&lt;节点IP&gt;</code></p><p>在集群主机所有的<code>/etc/hosts</code>上配置主机名映射</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/hosts</span><br><span class="line">k8s 192.168.137.200</span><br></pre></td></tr></table></figure><h2 id="关闭selinux"><a href="#关闭selinux" class="headerlink" title="关闭selinux"></a>关闭selinux</h2><p>集群的所有主机都需要</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">setenforce 0</span><br><span class="line">sed -i '/^SELINUX=/cSELINUX=disabled' /etc/selinux/config</span><br><span class="line">getenforce</span><br></pre></td></tr></table></figure><h2 id="关闭swap"><a href="#关闭swap" class="headerlink" title="关闭swap"></a>关闭swap</h2><p>集群的所有主机都需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">swapoff -a</span><br><span class="line">sed -i <span class="string">'/ swap / s/^/# /g'</span> /etc/fstab</span><br></pre></td></tr></table></figure><h2 id="系统日志持久化"><a href="#系统日志持久化" class="headerlink" title="系统日志持久化"></a>系统日志持久化</h2><p>集群的所有主机都需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">mkdir /var/<span class="built_in">log</span>/journal</span><br><span class="line">mkdir /etc/systemd/journald.conf.d</span><br><span class="line">cat &gt; /etc/systemd/journald.conf.d/99-prophet.conf &lt;&lt;EOF</span><br><span class="line">[Journal]</span><br><span class="line"><span class="comment"># 持久化保存到磁盘</span></span><br><span class="line">Storage=persistent</span><br><span class="line"><span class="comment"># 压缩历史日志</span></span><br><span class="line">Compress=yes</span><br><span class="line">SyncIntervalSec=5m</span><br><span class="line">RateLimitInterval=30s</span><br><span class="line">RateLimitBurst=1000</span><br><span class="line"><span class="comment"># 最大占用空间 10G</span></span><br><span class="line">SystemMaxUse=10G</span><br><span class="line"><span class="comment"># 单日志文件最大 200M</span></span><br><span class="line">SystemMaxFileSize=200M</span><br><span class="line"><span class="comment"># 日志保存时间 2 周</span></span><br><span class="line">MaxRetentionSec=2week</span><br><span class="line"><span class="comment"># 不将日志转发到 syslog</span></span><br><span class="line">ForwardToSyslog=no</span><br><span class="line">EOF</span><br><span class="line">systemctl restart systemd-journald</span><br></pre></td></tr></table></figure><h2 id="网络组件准备"><a href="#网络组件准备" class="headerlink" title="网络组件准备"></a>网络组件准备</h2><p>集群的所有主机都需要</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装ipvs</span></span><br><span class="line">yum install ipset ipvsadm -y</span><br><span class="line"><span class="comment"># 加载</span></span><br><span class="line">cat &gt; /etc/sysconfig/modules/ipvs.modules &lt;&lt;EOF</span><br><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">modprobe -- ip_vs</span><br><span class="line">modprobe -- ip_vs_rr</span><br><span class="line">modprobe -- ip_vs_wrr</span><br><span class="line">modprobe -- ip_vs_sh</span><br><span class="line">modprobe -- nf_conntrack_ipv4</span><br><span class="line">EOF</span><br><span class="line">chmod 755 /etc/sysconfig/modules/ipvs.modules </span><br><span class="line">bash /etc/sysconfig/modules/ipvs.modules </span><br><span class="line"><span class="comment"># 检查加载</span></span><br><span class="line">lsmod | grep -e ip_vs -e nf_conntrack_ipv4</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 允许检查桥接流量</span></span><br><span class="line">cat &lt;&lt;EOF | tee /etc/modules-load.d/k8s.conf</span><br><span class="line">br_netfilter</span><br><span class="line">EOF</span><br><span class="line">sysctl --system</span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF | tee /etc/sysctl.d/k8s.conf</span><br><span class="line">vm.swappiness = 0</span><br><span class="line">net.bridge.bridge-nf-call-ip6tables = 1</span><br><span class="line">net.bridge.bridge-nf-call-iptables = 1</span><br><span class="line">net.ipv4.ip_forward = 1</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">modprobe br_netfilter</span><br><span class="line">lsmod | grep netfilter</span><br><span class="line">sysctl -p /etc/sysctl.d/k8s.conf</span><br></pre></td></tr></table></figure><blockquote><p>将桥接的IPV4流量传递到iptables的链同一节点的不同pod，利用linux bridge进行二层通讯，由于没有原路返回造成pod请求services时的session无法收到返回值而连接超时，所以需要设置让第二层的bridge在转发时也通过第三层的iptables进行通信，并禁止使用swap，只有当系统 OOM 时才允许使用它</p></blockquote><h1 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h1><h2 id="安装docker-1"><a href="#安装docker-1" class="headerlink" title="安装docker"></a>安装docker</h2><p>集群的所有主机都需要，准备docker安装源</p><p><code>curl -o /etc/yum.repos.d/docker-ce.repo https://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo</code></p><p>安装docker</p><p><code>yum install device-mapper-persistent-data lvm2 -y &amp;&amp; yum install docker-ce -y&amp;&amp;systemctl enable docker --now&amp;&amp;systemctl restart docker</code></p><h2 id="安装cri-docker"><a href="#安装cri-docker" class="headerlink" title="安装cri-docker"></a>安装cri-docker</h2><p><code>yum localinstall -y https://ghproxy.com/https://github.com/Mirantis/cri-dockerd/releases/download/v0.3.1/cri-dockerd-0.3.1-3.el7.x86_64.rpm</code></p><p>修改默认配置，镜像使用阿里云源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span>  <span class="string">'[Unit]</span></span><br><span class="line"><span class="string">Description=CRI Interface for Docker Application Container Engine</span></span><br><span class="line"><span class="string">Documentation=https://docs.mirantis.com</span></span><br><span class="line"><span class="string">After=network-online.target docker.service</span></span><br><span class="line"><span class="string">Wants=network-online.target</span></span><br><span class="line"><span class="string">Requires=cri-docker.socket</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Service]</span></span><br><span class="line"><span class="string">Type=notify</span></span><br><span class="line"><span class="string">ExecStart=/usr/bin/cri-dockerd --network-plugin=cni --pod-infra-container-image=registry.aliyuncs.com/google_containers/pause:3.9</span></span><br><span class="line"><span class="string">ExecReload=/bin/kill -s HUP $MAINPID</span></span><br><span class="line"><span class="string">TimeoutSec=0</span></span><br><span class="line"><span class="string">RestartSec=2</span></span><br><span class="line"><span class="string">Restart=always</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">StartLimitBurst=3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">StartLimitInterval=60s</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">LimitNOFILE=infinity</span></span><br><span class="line"><span class="string">LimitNPROC=infinity</span></span><br><span class="line"><span class="string">LimitCORE=infinity</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">TasksMax=infinity</span></span><br><span class="line"><span class="string">Delegate=yes</span></span><br><span class="line"><span class="string">KillMode=process</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">[Install]</span></span><br><span class="line"><span class="string">WantedBy=multi-user.target'</span> &gt;/usr/lib/systemd/system/cri-docker.service</span><br></pre></td></tr></table></figure><p>启用<code>cri-docker</code></p><p><code>systemctl daemon-reload &amp;&amp; systemctl enable cri-docker&amp;&amp;systemctl restart cri-docker</code></p><h1 id="安装k8s"><a href="#安装k8s" class="headerlink" title="安装k8s"></a>安装k8s</h1><p>准备k8s安装源</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat &lt;&lt;EOF &gt; /etc/yum.repos.d/kubernetes.repo</span><br><span class="line">[kubernetes]</span><br><span class="line">name=Kubernetes</span><br><span class="line">baseurl=https://mirrors.aliyun.com/kubernetes/yum/repos/kubernetes-el7-x86_64/</span><br><span class="line">enabled=1</span><br><span class="line">gpgcheck=1</span><br><span class="line">repo_gpgcheck=1</span><br><span class="line">gpgkey=https://mirrors.aliyun.com/kubernetes/yum/doc/yum-key.gpg https://mirrors.aliyun.com/kubernetes/yum/doc/rpm-package-key.gpg</span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><h2 id="安装主节点"><a href="#安装主节点" class="headerlink" title="安装主节点"></a>安装主节点</h2><p>选择k8s版本，当前最新版本为<code>1.26.3</code></p><p><code>yum list kubeadm --showduplicates</code></p><p>安装指定版本</p><p><code>yum install -y kubelet-1.26.3 kubeadm-1.26.3 kubectl-1.26.3 --disableexcludes=kubernetes</code></p><p><code>systemctl enable kubelet</code></p><p>配置使用cri-containerd</p><p><code>kubeadm reset --cri-socket=unix:///var/run/cri-dockerd.sock</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 查看默认配置文件</span><br><span class="line">kubeadm config print init-defaults</span><br><span class="line"># 查看所需镜像</span><br><span class="line">kubeadm config images list --image-repository registry.aliyuncs.com</span><br><span class="line"># 安装集群</span><br><span class="line">kubeadm init --kubernetes-version&#x3D;v1.26.3 --pod-network-cidr&#x3D;10.224.0.0&#x2F;16 --apiserver-advertise-address&#x3D;192.168.137.200 --cri-socket unix:&#x2F;&#x2F;&#x2F;var&#x2F;run&#x2F;cri-dockerd.sock --image-repository&#x3D;registry.aliyuncs.com&#x2F;google_containers</span><br></pre></td></tr></table></figure><h3 id="安装第一个master"><a href="#安装第一个master" class="headerlink" title="安装第一个master"></a>安装第一个master</h3><p>有两种方式</p><ul><li><p>使用命令行，简单创建</p></li><li><p>使用kubeadm config文件，内容类似下面的，可以有更多的定制属性。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta3</span></span><br><span class="line"><span class="attr">bootstrapTokens:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">groups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">system:bootstrappers:kubeadm:default-node-token</span></span><br><span class="line">  <span class="attr">token:</span> <span class="string">qjbajd.zp1ta327pwur2k8g</span></span><br><span class="line">  <span class="attr">ttl:</span> <span class="string">86400h0m0s</span></span><br><span class="line">  <span class="attr">usages:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">signing</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">authentication</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">InitConfiguration</span></span><br><span class="line"><span class="attr">localAPIEndpoint:</span></span><br><span class="line">  <span class="attr">advertiseAddress:</span> <span class="number">192.168</span><span class="number">.137</span><span class="number">.200</span> <span class="comment"># 高可用场景下，第一个master的IP</span></span><br><span class="line">  <span class="attr">bindPort:</span> <span class="number">6443</span></span><br><span class="line"><span class="attr">nodeRegistration:</span></span><br><span class="line">  <span class="attr">criSocket:</span> <span class="string">unix:///var/run/cri-dockerd.sock</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">k8s-master1</span></span><br><span class="line">  <span class="attr">taints:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">effect:</span> <span class="string">NoSchedule</span></span><br><span class="line">    <span class="attr">key:</span> <span class="string">node-role.kubernetes.io/master</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiServer:</span></span><br><span class="line">  <span class="attr">extraArgs:</span></span><br><span class="line">    <span class="attr">authorization-mode:</span> <span class="string">"Node,RBAC"</span></span><br><span class="line">  <span class="attr">certSANs:</span>   </span><br><span class="line">  <span class="bullet">-</span> <span class="number">192.168</span><span class="number">.137</span><span class="number">.200</span> <span class="comment"># master节点IP列表</span></span><br><span class="line">  <span class="attr">timeoutForControlPlane:</span> <span class="string">4m0s</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeadm.k8s.io/v1beta3</span></span><br><span class="line"><span class="attr">certificatesDir:</span> <span class="string">/etc/kubernetes/pki</span></span><br><span class="line"><span class="attr">clusterName:</span> <span class="string">kubernetes</span></span><br><span class="line"><span class="attr">controllerManager:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">dns:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="attr">etcd:</span></span><br><span class="line">  <span class="attr">local:</span></span><br><span class="line">    <span class="attr">dataDir:</span> <span class="string">/var/lib/etcd</span></span><br><span class="line"><span class="attr">imageRepository:</span> <span class="string">registry.aliyuncs.com/google_containers</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterConfiguration</span></span><br><span class="line"><span class="attr">kubernetesVersion:</span> <span class="string">v1.22.7</span></span><br><span class="line"><span class="attr">controlPlaneEndpoint:</span> <span class="string">"192.168.1.223:6443"</span>    <span class="comment"># 虚拟IP和nginx端口</span></span><br><span class="line"><span class="attr">networking:</span></span><br><span class="line">  <span class="attr">dnsDomain:</span> <span class="string">cluster.local</span></span><br><span class="line">  <span class="attr">podSubnet:</span> <span class="number">10.244</span><span class="number">.0</span><span class="number">.0</span><span class="string">/16</span></span><br><span class="line">  <span class="attr">serviceSubnet:</span> <span class="number">10.96</span><span class="number">.0</span><span class="number">.0</span><span class="string">/12</span></span><br><span class="line"><span class="attr">scheduler:</span> <span class="string">&#123;&#125;</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubeproxy.config.k8s.io/v1alpha1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeProxyConfiguration</span></span><br><span class="line"><span class="attr">mode:</span> <span class="string">ipvs</span> <span class="comment">#使用ipvs负载均衡</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">kubelet.config.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">KubeletConfiguration</span></span><br><span class="line"><span class="attr">cgroupDriver:</span> <span class="string">systemd</span> <span class="comment"># 使用systemd</span></span><br></pre></td></tr></table></figure><p>完成配置后，使用下列命令启动集群</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubeadm config images pull --config kubeadm-config.yaml</span><br><span class="line">kubeadm init --config=kubeadm-config.yaml --upload-certs</span><br></pre></td></tr></table></figure></li></ul><p>安装完成后，会产生<code>kubeadm join</code>加入集群需要的命令，类似如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Your Kubernetes control-plane has initialized successfully!</span><br><span class="line"></span><br><span class="line">To start using your cluster, you need to run the following as a regular user:</span><br><span class="line"></span><br><span class="line">  mkdir -p $HOME&#x2F;.kube</span><br><span class="line">  sudo cp -i &#x2F;etc&#x2F;kubernetes&#x2F;admin.conf $HOME&#x2F;.kube&#x2F;config</span><br><span class="line">  sudo chown $(id -u):$(id -g) $HOME&#x2F;.kube&#x2F;config</span><br><span class="line"></span><br><span class="line">Alternatively, if you are the root user, you can run:</span><br><span class="line"></span><br><span class="line">  export KUBECONFIG&#x3D;&#x2F;etc&#x2F;kubernetes&#x2F;admin.conf</span><br><span class="line"></span><br><span class="line">You should now deploy a pod network to the cluster.</span><br><span class="line">Run &quot;kubectl apply -f [podnetwork].yaml&quot; with one of the options listed at:</span><br><span class="line">  https:&#x2F;&#x2F;kubernetes.io&#x2F;docs&#x2F;concepts&#x2F;cluster-administration&#x2F;addons&#x2F;</span><br><span class="line"></span><br><span class="line">Then you can join any number of worker nodes by running the following on each as root:</span><br><span class="line"></span><br><span class="line">kubeadm join 192.168.137.200:6443 --token vgxuaf.hvfrmegqpa4wqz7a \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:d6a5589224c0d3398578e103fb4f6db74e956e5787fe67170f6d0708d5d0926b</span><br></pre></td></tr></table></figure><h3 id="k8s网络准备"><a href="#k8s网络准备" class="headerlink" title="k8s网络准备"></a>k8s网络准备</h3><p>使用calico或者flannel。</p><p>使用calico，</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">curl</span> <span class="string">-O</span> <span class="string">https://docs.projectcalico.org/archive/v3.25/manifests/calico.yaml</span></span><br></pre></td></tr></table></figure><blockquote><p>calico默认使用</p></blockquote><p>使用flannel</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">curl</span> <span class="string">-O</span> <span class="string">https://ghproxy.com/https://github.com/flannel-io/flannel/releases/download/v0.21.4/kube-flannel.yml</span></span><br></pre></td></tr></table></figure><blockquote><p>flannel默认使用vxlan，可以按需开启DirectRouting提高性能，若集群所有主机都在同一网段，可以通过host-gw进一步提高性能</p></blockquote><h2 id="安装其他master"><a href="#安装其他master" class="headerlink" title="安装其他master"></a>安装其他master</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> kubeadm join 192.168.137.200:6443 --token qjbajd.zp1ta327pwur2k8g \</span><br><span class="line">--discovery-token-ca-cert-hash sha256:d21d770c1bfc059280c005096e5fd0e4133ef0e69ac724980005c9e821b45fe9 \</span><br><span class="line">--control-plane --certificate-key ba37092cbcaa1784e46cb2827bc3603d200c6149db28577e9fe433403126734b</span><br></pre></td></tr></table></figure><h2 id="安装worker节点"><a href="#安装worker节点" class="headerlink" title="安装worker节点"></a>安装worker节点</h2><p>在所有worker节点安装kubelet和kubectl</p><p><code>yum install -y kubelet-1.26.3 kubectl-1.26.3 --disableexcludes=kubernetes&amp;&amp;systemctl enable kubectl</code></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> k8s </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0开始搭建超级链5.1-启用CA</title>
      <link href="/bff162b0.html"/>
      <url>/bff162b0.html</url>
      
        <content type="html"><![CDATA[<h1 id="编译组件"><a href="#编译组件" class="headerlink" title="编译组件"></a>编译组件</h1><h2 id="编译xuperchain"><a href="#编译xuperchain" class="headerlink" title="编译xuperchain"></a>编译xuperchain</h2><ol><li><p>安装编译依赖<code>gcc</code>、<code>make</code>以及<code>git</code>。安装<strong>1.13版本</strong>以上的<code>golang</code>，并配置好环境变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go version</span></span><br><span class="line">go version go1.15.7 linux/amd64</span><br></pre></td></tr></table></figure></li><li><p>下载<code>xuperchain</code>源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xuperchain/xuperchain.git</span><br><span class="line">cd xuperchain</span><br><span class="line">git checkout release-v5.1</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>编译完成后，可以在<code>output</code>目录找到输出的文件。</p><blockquote><p>如果github访问比较慢，可以使用<code>https://hub.fastgit.org/xuperchain/xuperchain.git</code>缓存地址下载源码。</p><p>编译过程中，如果下载依赖比较慢，可以使用export GOPROXY=<a href="https://goproxy.cn,direct的方式，使用代理下载相关依赖库。" target="_blank" rel="noopener">https://goproxy.cn,direct的方式，使用代理下载相关依赖库。</a></p></blockquote></li><li><p>生成的output目录有bin, conf, data三个目录,以及一个control.sh 脚本。</p></li></ol><h2 id="编译xuper-ca"><a href="#编译xuper-ca" class="headerlink" title="编译xuper-ca"></a>编译xuper-ca</h2><p>​    <code>xuper-ca</code>组件是超级链的ca组件，为联盟链网络组件分发证书和吊销证书。</p><ol><li><p>下载xuper-ca源码，并进行编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xuperchain/xuper-ca.git</span><br><span class="line"><span class="built_in">cd</span> xuper-ca</span><br><span class="line">git checkout release-1.1.0</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>在<code>output</code>目录下的<code>caserver</code>即为CA服务组件的二进制和配置。</p><blockquote><p>如果github访问比较慢，可以使用<code>https://hub.fastgit.org/xuperchain/xuper-ca.git</code>缓存地址下载源码。</p></blockquote></li></ol><h2 id="编译xuper-front"><a href="#编译xuper-front" class="headerlink" title="编译xuper-front"></a>编译xuper-front</h2><p>基于xuperchain底层技术，提供CA服务，平行链群组等联盟网络的组件。</p><p>XuperChain和XFront，构成了一个联盟场景区块链的全节点；全节点和全节点之间的通信是由xchain作为client和作为server的front建立grpcs的连接，这里的grpcs即是带有tls证书校验的grpc通信, grpcs中使用的证书采用x509协议体系，每个全节点有自己的证书，该证书由caserver颁发，caserver的根证书为根ca证书，产生对应网络的一级CA证书作为中间证书，然后基于该中间证书给每一个全节点颁发证书;全节点内部的front和xchain进程通信是 front作为client连接xchain。</p><ol><li><p>下载<code>xuper-front</code>源码，进行编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/xuperchain/xuper-front.git</span><br><span class="line"><span class="built_in">cd</span> xuper-front</span><br><span class="line">git checkout release-1.1.0</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>在<code>output</code>目录下的<code>front</code>即为CA服务组件的二进制和配置。</p><blockquote><p>如果github访问比较慢，可以使用<code>https://hub.fastgit.org/xuperchain/xuper-front.git</code>缓存地址下载源码。</p></blockquote></li></ol><h1 id="部署联盟链"><a href="#部署联盟链" class="headerlink" title="部署联盟链"></a>部署联盟链</h1><h2 id="准备节点地址"><a href="#准备节点地址" class="headerlink" title="准备节点地址"></a>准备节点地址</h2><p>   准备一个目录<code>testnet</code>作为测试联盟链的部署目录，并使用三个节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p testnet/&#123;node1,node2,node3&#125;</span><br><span class="line">cp -r output/* testnet/node1</span><br><span class="line">cp -r output/* testnet/node2</span><br><span class="line">cp -r output/* testnet/node3</span><br></pre></td></tr></table></figure><ol><li><p>在<code>node1</code>下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/xchain-cli account newkeys</span><br><span class="line">create account using crypto <span class="built_in">type</span> default</span><br><span class="line">create account <span class="keyword">in</span> ./data/keys</span><br><span class="line">$ ls data/keys</span><br><span class="line">address  private.key  public.key</span><br><span class="line">$ cat data/keys/address</span><br><span class="line">YVRe8jikVuqzCKyKUetLksP9sJz8SdXEB</span><br><span class="line">$ ./bin/xchain-cli netURL gen</span><br><span class="line">$ ls data/netkeys</span><br><span class="line">net_private.key</span><br></pre></td></tr></table></figure><p><code>address</code>文件内容为节点地址。</p></li><li><p>在<code>node2</code>下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/xchain-cli account newkeys</span><br><span class="line">create account using crypto <span class="built_in">type</span> default</span><br><span class="line">create account <span class="keyword">in</span> ./data/keys</span><br><span class="line">$ ls data/keys</span><br><span class="line">address  private.key  public.key</span><br><span class="line">$ cat data/keys/address</span><br><span class="line">UgGMQuRoTWjUKdg2vCnfdU6LJGjnDNbAw</span><br><span class="line">$ ./bin/xchain-cli netURL gen</span><br><span class="line">$ ls data/netkeys</span><br><span class="line">net_private.key</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>在<code>node3</code>下执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/xchain-cli account newkeys</span><br><span class="line">create account using crypto <span class="built_in">type</span> default</span><br><span class="line">create account <span class="keyword">in</span> ./data/keys</span><br><span class="line">$ ls data/keys</span><br><span class="line">address  private.key  public.key</span><br><span class="line">$ cat data/keys/address</span><br><span class="line">UgGMQuRoTWjUKdg2vCnfdU6LJGjnDNbAw</span><br><span class="line">$ ./bin/xchain-cli netURL gen</span><br><span class="line">$ ls data/netkeys</span><br><span class="line">net_private.key</span><br></pre></td></tr></table></figure></li></ol><h2 id="部署CA"><a href="#部署CA" class="headerlink" title="部署CA"></a>部署CA</h2><p>以<code>node1</code>作为CA的管理身份。</p><ol><li><p>准备ca</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cp -r caserver testnet/caserver</span><br><span class="line"><span class="built_in">cd</span> testnet/caserver</span><br><span class="line">cat conf/caserver.yaml</span><br></pre></td></tr></table></figure><p>CA服务的配置如下所示，以<code>YVRe8jikVuqzCKyKUetLksP9sJz8SdXEB</code>即为<code>node1</code>的地址:</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 数据库配置, 目前仅支持sqlite3</span></span><br><span class="line"><span class="attr">dbConfig:</span></span><br><span class="line">  <span class="attr">dbType:</span> <span class="string">sqlite3</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">./ca.db</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ca对外grpc服务端口号</span></span><br><span class="line"><span class="attr">port:</span> <span class="string">:8098</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ca对外httpPort服务端口号</span></span><br><span class="line"><span class="attr">httpPort:</span> <span class="string">:8909</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ca根证书的地址</span></span><br><span class="line"><span class="attr">certPath:</span> <span class="string">./conf/root</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># ca的根管理员账户, 该账户可执行ca内的所有操作</span></span><br><span class="line"><span class="attr">caAdmin:</span> <span class="string">YVRe8jikVuqzCKyKUetLksP9sJz8SdXEB</span></span><br><span class="line"></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">./logs</span></span><br></pre></td></tr></table></figure></li><li><p>设置管理员并注册各个节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 初始化</span></span><br><span class="line">./bin/ca-server init</span><br><span class="line"><span class="comment">#添加网络，设置node1的地址作为网络的管理员</span></span><br><span class="line">./bin/ca-server addNet --Net testnet --Addr YVRe8jikVuqzCKyKUetLksP9sJz8SdXEB</span><br><span class="line"><span class="comment"># Net 为网络名称，Addr 为网络管理员的地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 网络中添加节点node1</span></span><br><span class="line">./bin/ca-server addNode --Net testnet --Addr YVRe8jikVuqzCKyKUetLksP9sJz8SdXEB --Admin YVRe8jikVuqzCKyKUetLksP9sJz8SdXEB</span><br><span class="line"><span class="comment"># 这里Addr 一定是网络中所有节点下的 data/keys/address 的地址，否则拉不到证书。</span></span><br><span class="line"><span class="comment"># 网络中添加节点node2</span></span><br><span class="line">./bin/ca-server addNode --Net testnet --Addr UgGMQuRoTWjUKdg2vCnfdU6LJGjnDNbAw --Admin YVRe8jikVuqzCKyKUetLksP9sJz8SdXEB</span><br><span class="line"><span class="comment"># 网络中添加节点node3</span></span><br><span class="line">./bin/ca-server addNode --Net testnet --Addr mFJAEPtCNPbKL1LRg64swoMNGDedwDLX6 --Admin YVRe8jikVuqzCKyKUetLksP9sJz8SdXEB</span><br></pre></td></tr></table></figure></li></ol><ol start="3"><li><p>启动CA</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#启动ca</span></span><br><span class="line">nohup ./bin/ca-server &amp;</span><br></pre></td></tr></table></figure></li></ol><h2 id="配置节点"><a href="#配置节点" class="headerlink" title="配置节点"></a>配置节点</h2><p>向三个节点复制front二进制和配置文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cp front/bin/front testnet/node1/bin</span><br><span class="line">cp front/conf/front.yaml testnet/node1/conf</span><br><span class="line">cp front/bin/front testnet/node2/bin</span><br><span class="line">cp front/conf/front.yaml testnet/node2/conf</span><br><span class="line">cp front/bin/front testnet/node3/bin</span><br><span class="line">cp front/conf/front.yaml testnet/node3/conf</span><br></pre></td></tr></table></figure><h3 id="配置node1"><a href="#配置node1" class="headerlink" title="配置node1"></a>配置node1</h3><p>修改<code>node1/conf/front.yaml</code>配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xchain地址配置</span></span><br><span class="line"><span class="attr">xchainServer:</span></span><br><span class="line">  <span class="comment"># 对应 xchain 的节点 rpc 端口，每个 xchain 节点配置不同，在 xchain 的 server.yaml 文件中。</span></span><br><span class="line">  <span class="attr">rpc:</span> <span class="string">:37101</span></span><br><span class="line">  <span class="comment"># xchain tls的地址,如果不用的话可以不配置</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">:47101</span></span><br><span class="line">  <span class="comment"># front 作为xchain代理对其他xchain服务的端口号</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">:57101</span></span><br><span class="line">  <span class="comment"># front证书地址,front启动后会从节点拉取证书</span></span><br><span class="line">  <span class="attr">tlsPath:</span> <span class="string">./data/cert</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置 ./data/db/ca.db</span></span><br><span class="line"><span class="attr">dbConfig:</span></span><br><span class="line">  <span class="attr">dbType:</span> <span class="string">sqlite3</span></span><br><span class="line">  <span class="comment">#dbType: mysql</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">./ca.db</span></span><br><span class="line">  <span class="attr">mysqlDbUser:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">mysqlDbPwd:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">mysqlDbHost:</span> <span class="number">10.99</span><span class="number">.196</span><span class="number">.224</span></span><br><span class="line">  <span class="attr">mysqlDbPort:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">mysqlDbDatabase:</span> <span class="string">front_db</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CA地址</span></span><br><span class="line"><span class="attr">caConfig:</span></span><br><span class="line">  <span class="comment"># 远程ca开关, 联盟网络true/公开网络false,  默认true</span></span><br><span class="line">  <span class="attr">caSwitch:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 远程ca地址</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8098</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前节点的网络名称</span></span><br><span class="line"><span class="attr">netName:</span> <span class="string">testnet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">./logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点管理员账户地址</span></span><br><span class="line"><span class="attr">keys:</span> <span class="string">./data/keys</span></span><br></pre></td></tr></table></figure><p>修改<code>node1/conf/network.yaml</code>，配置P2P网络。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># p2p network config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Module is the name of p2p module plugin.(p2pv1 | p2pv2)</span></span><br><span class="line"><span class="attr">module:</span> <span class="string">p2pv1</span></span><br><span class="line"><span class="comment"># Port the p2p network listened</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">47101</span></span><br><span class="line"><span class="comment"># Address multiaddr string</span></span><br><span class="line"><span class="attr">address:</span> <span class="string">/ip4/127.0.0.1/tcp/47101</span></span><br><span class="line"><span class="comment"># IsTls config the node use tls secure transparent</span></span><br><span class="line"><span class="attr">isTls:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># KeyPath is the netdisk private key path</span></span><br><span class="line"><span class="attr">keyPath:</span> <span class="string">netkeys</span></span><br><span class="line"><span class="attr">staticNodes:</span></span><br><span class="line">  <span class="attr">xuper:</span> <span class="comment"># 这里就是 xfront 端口配置。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"127.0.0.1:57101"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"127.0.0.1:57102"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"127.0.0.1:57103"</span></span><br><span class="line">  <span class="attr">hello:</span> <span class="comment"># 此处配置用于平行链。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"127.0.0.1:57101"</span></span><br><span class="line"><span class="comment"># BootNodes config the bootNodes the node to connect</span></span><br><span class="line"><span class="comment">#bootNodes:</span></span><br><span class="line"><span class="comment">#    - "/ip4/127.0.0.1/tcp/38201/p2p/Qmf2HeHe4sspGkfRCTq6257Vm3UHzvh2TeQJHHvHzzuFw6"</span></span><br><span class="line"><span class="comment">#    - "/ip4/127.0.0.1/tcp/38202/p2p/QmQKp8pLWSgV4JiGjuULKV1JsdpxUtnDEUMP8sGaaUbwVL"</span></span><br><span class="line"><span class="comment"># service name</span></span><br><span class="line"><span class="attr">serviceName:</span> <span class="string">testnet</span></span><br></pre></td></tr></table></figure><p>修改<code>node1/conf/server.yaml</code>，配置node1的启动设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Rpc service listen port</span></span><br><span class="line"><span class="attr">rpcPort:</span> <span class="number">37101</span></span><br><span class="line"><span class="comment"># GWPort</span></span><br><span class="line"><span class="attr">GWPort:</span> <span class="number">37301</span></span><br><span class="line"><span class="comment"># MetricPort</span></span><br><span class="line"><span class="attr">metricPort:</span> <span class="number">37201</span></span><br><span class="line"><span class="comment"># EnableEndorser</span></span><br><span class="line"><span class="attr">enableEndorser:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">## EndorserHosts</span></span><br><span class="line"><span class="attr">endorserHosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"127.0.0.1:8848"</span></span><br><span class="line"><span class="attr">endorserModule:</span> <span class="string">"default"</span></span><br><span class="line"><span class="comment"># Set the max message size in bytes the server can receive.</span></span><br><span class="line"><span class="comment"># If this is not set, gRPC uses the default 4MB.</span></span><br><span class="line"><span class="attr">maxRecvMsgSize:</span> <span class="number">134217728</span></span><br><span class="line"><span class="comment"># readBufSize lets you set the size of read buffer, this determines how much data can be read at most for one read syscall. The default value for this buffer is 32KB. Zero will disable read buffer for a connection so data framer can access the underlying conn directly.</span></span><br><span class="line"><span class="attr">readBufSize:</span> <span class="number">32768</span></span><br><span class="line"><span class="comment"># writeBufSize determines how much data can be batched before doing a write on the wire. The corresponding memory allocation for this buffer will be twice the size to keep syscalls low. The default value for this buffer is 32KB. Zero will disable the write buffer such that each write will be on underlying connection. <span class="doctag">Note:</span> A Send call may not directly translate to a write.</span></span><br><span class="line"><span class="attr">writeBufSize:</span> <span class="number">32768</span></span><br><span class="line"><span class="comment"># Window size for stream</span></span><br><span class="line"><span class="comment"># The lower bound for window size is 64K and any value smaller than that will be ignored</span></span><br><span class="line"><span class="attr">initWindowSize:</span> <span class="number">131072</span></span><br><span class="line"><span class="comment"># Window size for a connection</span></span><br><span class="line"><span class="comment"># The lower bound for window size is 64K and any value smaller than that will be ignored</span></span><br><span class="line"><span class="attr">initConnWindowSize:</span> <span class="number">65536</span></span><br></pre></td></tr></table></figure><p>启动node1的front服务，会自动拉取证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nohup ./bin/front &amp;</span><br><span class="line"><span class="comment"># xfront 启动后，会生成 cert 目录，将内容拷贝到 netkeys 目录下。</span></span><br><span class="line">cp data/cert/* data/netkeys/</span><br></pre></td></tr></table></figure><h3 id="配置node2"><a href="#配置node2" class="headerlink" title="配置node2"></a>配置node2</h3><p> 修改<code>node2/conf/front.yaml</code>配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xchain地址配置</span></span><br><span class="line"><span class="attr">xchainServer:</span></span><br><span class="line">  <span class="comment"># 对应 xchain 的节点 rpc 端口，每个 xchain 节点配置不同，在 xchain 的 server.yaml 文件中。</span></span><br><span class="line">  <span class="attr">rpc:</span> <span class="string">:37102</span></span><br><span class="line">  <span class="comment"># xchain tls的地址,如果不用的话可以不配置</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">:47102</span></span><br><span class="line">  <span class="comment"># front 作为xchain代理对其他xchain服务的端口号</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">:57102</span></span><br><span class="line">  <span class="comment"># front证书地址,front启动后会从节点拉取证书</span></span><br><span class="line">  <span class="attr">tlsPath:</span> <span class="string">./data/cert</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置 ./data/db/ca.db</span></span><br><span class="line"><span class="attr">dbConfig:</span></span><br><span class="line">  <span class="attr">dbType:</span> <span class="string">sqlite3</span></span><br><span class="line">  <span class="comment">#dbType: mysql</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">./ca.db</span></span><br><span class="line">  <span class="attr">mysqlDbUser:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">mysqlDbPwd:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">mysqlDbHost:</span> <span class="number">10.99</span><span class="number">.196</span><span class="number">.224</span></span><br><span class="line">  <span class="attr">mysqlDbPort:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">mysqlDbDatabase:</span> <span class="string">front_db</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CA地址</span></span><br><span class="line"><span class="attr">caConfig:</span></span><br><span class="line">  <span class="comment"># 远程ca开关, 联盟网络true/公开网络false,  默认true</span></span><br><span class="line">  <span class="attr">caSwitch:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 远程ca地址</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8098</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前节点的网络名称</span></span><br><span class="line"><span class="attr">netName:</span> <span class="string">testnet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">./logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点管理员账户地址</span></span><br><span class="line"><span class="attr">keys:</span> <span class="string">./data/keys</span></span><br></pre></td></tr></table></figure><p>修改<code>node2/conf/network.yaml</code>，配置P2P网络。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># p2p network config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Module is the name of p2p module plugin.(p2pv1 | p2pv2)</span></span><br><span class="line"><span class="attr">module:</span> <span class="string">p2pv1</span></span><br><span class="line"><span class="comment"># Port the p2p network listened</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">47102</span></span><br><span class="line"><span class="comment"># Address multiaddr string</span></span><br><span class="line"><span class="attr">address:</span> <span class="string">/ip4/127.0.0.1/tcp/47102</span></span><br><span class="line"><span class="comment"># IsTls config the node use tls secure transparent</span></span><br><span class="line"><span class="attr">isTls:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># KeyPath is the netdisk private key path</span></span><br><span class="line"><span class="attr">keyPath:</span> <span class="string">netkeys</span></span><br><span class="line"><span class="attr">staticNodes:</span></span><br><span class="line">  <span class="attr">xuper:</span> <span class="comment"># 这里就是 xfront 端口配置。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"127.0.0.1:57101"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"127.0.0.1:57102"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"127.0.0.1:57103"</span></span><br><span class="line">  <span class="attr">hello:</span> <span class="comment"># 此处配置用于平行链。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"127.0.0.1:57101"</span></span><br><span class="line"><span class="comment"># BootNodes config the bootNodes the node to connect</span></span><br><span class="line"><span class="comment">#bootNodes:</span></span><br><span class="line"><span class="comment">#    - "/ip4/127.0.0.1/tcp/38201/p2p/Qmf2HeHe4sspGkfRCTq6257Vm3UHzvh2TeQJHHvHzzuFw6"</span></span><br><span class="line"><span class="comment">#    - "/ip4/127.0.0.1/tcp/38202/p2p/QmQKp8pLWSgV4JiGjuULKV1JsdpxUtnDEUMP8sGaaUbwVL"</span></span><br><span class="line"><span class="comment"># service name</span></span><br><span class="line"><span class="attr">serviceName:</span> <span class="string">testnet</span></span><br></pre></td></tr></table></figure><p>修改<code>node2/conf/server.yaml</code>，配置node1的启动设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Rpc service listen port</span></span><br><span class="line"><span class="attr">rpcPort:</span> <span class="number">37102</span></span><br><span class="line"><span class="comment"># GWPort</span></span><br><span class="line"><span class="attr">GWPort:</span> <span class="number">37302</span></span><br><span class="line"><span class="comment"># MetricPort</span></span><br><span class="line"><span class="attr">metricPort:</span> <span class="number">37202</span></span><br><span class="line"><span class="comment"># EnableEndorser</span></span><br><span class="line"><span class="attr">enableEndorser:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">## EndorserHosts</span></span><br><span class="line"><span class="attr">endorserHosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"127.0.0.1:8848"</span></span><br><span class="line"><span class="attr">endorserModule:</span> <span class="string">"default"</span></span><br><span class="line"><span class="comment"># Set the max message size in bytes the server can receive.</span></span><br><span class="line"><span class="comment"># If this is not set, gRPC uses the default 4MB.</span></span><br><span class="line"><span class="attr">maxRecvMsgSize:</span> <span class="number">134217728</span></span><br><span class="line"><span class="comment"># readBufSize lets you set the size of read buffer, this determines how much data can be read at most for one read syscall. The default value for this buffer is 32KB. Zero will disable read buffer for a connection so data framer can access the underlying conn directly.</span></span><br><span class="line"><span class="attr">readBufSize:</span> <span class="number">32768</span></span><br><span class="line"><span class="comment"># writeBufSize determines how much data can be batched before doing a write on the wire. The corresponding memory allocation for this buffer will be twice the size to keep syscalls low. The default value for this buffer is 32KB. Zero will disable the write buffer such that each write will be on underlying connection. <span class="doctag">Note:</span> A Send call may not directly translate to a write.</span></span><br><span class="line"><span class="attr">writeBufSize:</span> <span class="number">32768</span></span><br><span class="line"><span class="comment"># Window size for stream</span></span><br><span class="line"><span class="comment"># The lower bound for window size is 64K and any value smaller than that will be ignored</span></span><br><span class="line"><span class="attr">initWindowSize:</span> <span class="number">131072</span></span><br><span class="line"><span class="comment"># Window size for a connection</span></span><br><span class="line"><span class="comment"># The lower bound for window size is 64K and any value smaller than that will be ignored</span></span><br><span class="line"><span class="attr">initConnWindowSize:</span> <span class="number">65536</span></span><br></pre></td></tr></table></figure><p>启动<code>node2</code>的front服务，会自动拉取证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nohup ./bin/front &amp;</span><br><span class="line"><span class="comment"># xfront 启动后，会生成 cert 目录，将内容拷贝到 netkeys 目录下。</span></span><br><span class="line">cp data/cert/* data/netkeys/</span><br></pre></td></tr></table></figure><h3 id="配置node3"><a href="#配置node3" class="headerlink" title="配置node3"></a>配置node3</h3><p>修改<code>node3/conf/front.yaml</code>配置。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># xchain地址配置</span></span><br><span class="line"><span class="attr">xchainServer:</span></span><br><span class="line">  <span class="comment"># 对应 xchain 的节点 rpc 端口，每个 xchain 节点配置不同，在 xchain 的 server.yaml 文件中。</span></span><br><span class="line">  <span class="attr">rpc:</span> <span class="string">:37102</span></span><br><span class="line">  <span class="comment"># xchain tls的地址,如果不用的话可以不配置</span></span><br><span class="line">  <span class="attr">host:</span> <span class="string">:47102</span></span><br><span class="line">  <span class="comment"># front 作为xchain代理对其他xchain服务的端口号</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">:57102</span></span><br><span class="line">  <span class="comment"># front证书地址,front启动后会从节点拉取证书</span></span><br><span class="line">  <span class="attr">tlsPath:</span> <span class="string">./data/cert</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据库配置 ./data/db/ca.db</span></span><br><span class="line"><span class="attr">dbConfig:</span></span><br><span class="line">  <span class="attr">dbType:</span> <span class="string">sqlite3</span></span><br><span class="line">  <span class="comment">#dbType: mysql</span></span><br><span class="line">  <span class="attr">dbPath:</span> <span class="string">./ca.db</span></span><br><span class="line">  <span class="attr">mysqlDbUser:</span> <span class="string">root</span></span><br><span class="line">  <span class="attr">mysqlDbPwd:</span> <span class="number">123456</span></span><br><span class="line">  <span class="attr">mysqlDbHost:</span> <span class="number">10.99</span><span class="number">.196</span><span class="number">.224</span></span><br><span class="line">  <span class="attr">mysqlDbPort:</span> <span class="number">3306</span></span><br><span class="line">  <span class="attr">mysqlDbDatabase:</span> <span class="string">front_db</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CA地址</span></span><br><span class="line"><span class="attr">caConfig:</span></span><br><span class="line">  <span class="comment"># 远程ca开关, 联盟网络true/公开网络false,  默认true</span></span><br><span class="line">  <span class="attr">caSwitch:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 远程ca地址</span></span><br><span class="line">  <span class="attr">host:</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:8098</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 当前节点的网络名称</span></span><br><span class="line"><span class="attr">netName:</span> <span class="string">testnet</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 日志</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">./logs</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 节点管理员账户地址</span></span><br><span class="line"><span class="attr">keys:</span> <span class="string">./data/keys</span></span><br></pre></td></tr></table></figure><p>修改<code>node3/conf/network.yaml</code>，配置P2P网络。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># p2p network config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Module is the name of p2p module plugin.(p2pv1 | p2pv2)</span></span><br><span class="line"><span class="attr">module:</span> <span class="string">p2pv1</span></span><br><span class="line"><span class="comment"># Port the p2p network listened</span></span><br><span class="line"><span class="attr">port:</span> <span class="number">47103</span></span><br><span class="line"><span class="comment"># Address multiaddr string</span></span><br><span class="line"><span class="attr">address:</span> <span class="string">/ip4/127.0.0.1/tcp/47103</span></span><br><span class="line"><span class="comment"># IsTls config the node use tls secure transparent</span></span><br><span class="line"><span class="attr">isTls:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># KeyPath is the netdisk private key path</span></span><br><span class="line"><span class="attr">keyPath:</span> <span class="string">netkeys</span></span><br><span class="line"><span class="attr">staticNodes:</span></span><br><span class="line">  <span class="attr">xuper:</span> <span class="comment"># 这里就是 xfront 端口配置。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"127.0.0.1:57101"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"127.0.0.1:57102"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"127.0.0.1:57103"</span></span><br><span class="line">  <span class="attr">hello:</span> <span class="comment"># 此处配置用于平行链。</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"127.0.0.1:57101"</span></span><br><span class="line"><span class="comment"># BootNodes config the bootNodes the node to connect</span></span><br><span class="line"><span class="comment">#bootNodes:</span></span><br><span class="line"><span class="comment">#    - "/ip4/127.0.0.1/tcp/38201/p2p/Qmf2HeHe4sspGkfRCTq6257Vm3UHzvh2TeQJHHvHzzuFw6"</span></span><br><span class="line"><span class="comment">#    - "/ip4/127.0.0.1/tcp/38202/p2p/QmQKp8pLWSgV4JiGjuULKV1JsdpxUtnDEUMP8sGaaUbwVL"</span></span><br><span class="line"><span class="comment"># service name</span></span><br><span class="line"><span class="attr">serviceName:</span> <span class="string">testnet</span></span><br></pre></td></tr></table></figure><p>修改<code>node3/conf/server.yaml</code>，配置node1的启动设置：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Rpc service listen port</span></span><br><span class="line"><span class="attr">rpcPort:</span> <span class="number">37103</span></span><br><span class="line"><span class="comment"># GWPort</span></span><br><span class="line"><span class="attr">GWPort:</span> <span class="number">37303</span></span><br><span class="line"><span class="comment"># MetricPort</span></span><br><span class="line"><span class="attr">metricPort:</span> <span class="number">37203</span></span><br><span class="line"><span class="comment"># EnableEndorser</span></span><br><span class="line"><span class="attr">enableEndorser:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment">## EndorserHosts</span></span><br><span class="line"><span class="attr">endorserHosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"127.0.0.1:8848"</span></span><br><span class="line"><span class="attr">endorserModule:</span> <span class="string">"default"</span></span><br><span class="line"><span class="comment"># Set the max message size in bytes the server can receive.</span></span><br><span class="line"><span class="comment"># If this is not set, gRPC uses the default 4MB.</span></span><br><span class="line"><span class="attr">maxRecvMsgSize:</span> <span class="number">134217728</span></span><br><span class="line"><span class="comment"># readBufSize lets you set the size of read buffer, this determines how much data can be read at most for one read syscall. The default value for this buffer is 32KB. Zero will disable read buffer for a connection so data framer can access the underlying conn directly.</span></span><br><span class="line"><span class="attr">readBufSize:</span> <span class="number">32768</span></span><br><span class="line"><span class="comment"># writeBufSize determines how much data can be batched before doing a write on the wire. The corresponding memory allocation for this buffer will be twice the size to keep syscalls low. The default value for this buffer is 32KB. Zero will disable the write buffer such that each write will be on underlying connection. <span class="doctag">Note:</span> A Send call may not directly translate to a write.</span></span><br><span class="line"><span class="attr">writeBufSize:</span> <span class="number">32768</span></span><br><span class="line"><span class="comment"># Window size for stream</span></span><br><span class="line"><span class="comment"># The lower bound for window size is 64K and any value smaller than that will be ignored</span></span><br><span class="line"><span class="attr">initWindowSize:</span> <span class="number">131072</span></span><br><span class="line"><span class="comment"># Window size for a connection</span></span><br><span class="line"><span class="comment"># The lower bound for window size is 64K and any value smaller than that will be ignored</span></span><br><span class="line"><span class="attr">initConnWindowSize:</span> <span class="number">65536</span></span><br></pre></td></tr></table></figure><p>启动<code>node3</code>的front服务，会自动拉取证书。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nohup ./bin/front &amp;</span><br><span class="line"><span class="comment"># xfront 启动后，会生成 cert 目录，将内容拷贝到 netkeys 目录下。</span></span><br><span class="line">cp data/cert/* data/netkeys/</span><br></pre></td></tr></table></figure><h2 id="启动节点"><a href="#启动节点" class="headerlink" title="启动节点"></a>启动节点</h2><p>依次启动三个节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> node1</span><br><span class="line">bash control.sh start</span><br><span class="line"><span class="built_in">cd</span> ../node2</span><br><span class="line">bash control.sh start</span><br><span class="line"><span class="built_in">cd</span> ../node3</span><br><span class="line">bash control.sh start</span><br></pre></td></tr></table></figure><h2 id="启动区块链浏览器"><a href="#启动区块链浏览器" class="headerlink" title="启动区块链浏览器"></a>启动区块链浏览器</h2><blockquote><p> <strong>注意</strong>：区块链浏览器后台访问超级链节点，不通过front服务进行代理。</p></blockquote><p>参考<a href="./bff162b0.html">从0开始搭建超级链5.1</a>，部署和启动超级链的区块链浏览器。</p><p><img src="/bff162b0/image-20211025163640865.png" alt="image-20211025163640865"></p><h1 id="测试联盟链功能"><a href="#测试联盟链功能" class="headerlink" title="测试联盟链功能"></a>测试联盟链功能</h1>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 超级链 </tag>
            
            <tag> xuperchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从0开始搭建超级链5.1</title>
      <link href="/b11b91fb.html"/>
      <url>/b11b91fb.html</url>
      
        <content type="html"><![CDATA[<h1 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h1><ol><li><p>安装编译依赖<code>gcc</code>、<code>make</code>以及<code>git</code>。安装<strong>1.13版本</strong>以上的<code>golang</code>，并配置好环境变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> go version</span></span><br><span class="line">go version go1.15.7 linux/amd64</span><br></pre></td></tr></table></figure></li><li><p>下载<code>xuperchain</code>源码</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xuperchain/xuperchain.git</span><br><span class="line">cd xuperchain</span><br><span class="line">git checkout release-v5.1</span><br><span class="line">make</span><br></pre></td></tr></table></figure><p>编译完成后，可以在<code>output</code>目录找到输出的文件。</p><blockquote><p>如果github访问比较慢，可以使用<code>https://hub.fastgit.org/xuperchain/xuperchain.git</code>缓存地址下载源码。</p><p>编译过程中，如果下载依赖比较慢，可以使用export GOPROXY=<a href="https://goproxy.cn,direct的方式，使用代理下载相关依赖库。" target="_blank" rel="noopener">https://goproxy.cn,direct的方式，使用代理下载相关依赖库。</a></p></blockquote></li><li><p>生成的output目录有bin, conf, data三个目录,以及一个control.sh 脚本。</p><p>各目录的功能如下表：</p><table><thead><tr><th>目录名</th><th>功能</th></tr></thead><tbody><tr><td>output/</td><td>节点根目录</td></tr><tr><td>├─ bin</td><td>可执行文件存放目录</td></tr><tr><td>│ ··· ├─ wasm2c</td><td>XVM 虚拟机工具，将 WASM 转为 C</td></tr><tr><td>│ ··· ├─ xchain</td><td>xchain服务的二进制文件</td></tr><tr><td>│ ··· ├─ xchain-cli</td><td>xchain客户端工具</td></tr><tr><td>├─ conf</td><td>配置相关目录</td></tr><tr><td>│ ··· ├─ xchain.yaml</td><td>xchain服务的配置信息（注意端口冲突）</td></tr><tr><td>│ ··· ├─ engine.yaml</td><td>引擎相关配置</td></tr><tr><td>│ ··· ├─ env.yaml</td><td>本地环境相关配置，设置key存储路径等</td></tr><tr><td>│ ··· ├─ ledger.yaml</td><td>存储引擎相关配置，levelDB等</td></tr><tr><td>│ ··· ├─ log.yaml</td><td>日志相关配置，日志级别，保留时间等</td></tr><tr><td>│ ··· ├─ network.yaml</td><td>网络相关配置，单机多节点配置时需更改端口等</td></tr><tr><td>│ ··· ├─ server.yaml</td><td>服务相关配置，如端口，tls等</td></tr><tr><td>│ ··· ├─ xchain-cli.yaml</td><td>xchain客户端相关配置，交易是否需要配置，交易发送节点等</td></tr><tr><td>├─ control.sh</td><td>启动脚本</td></tr><tr><td>├─ data</td><td>数据的存放目录，创世块信息，以及共识和合约的样例</td></tr><tr><td>│ ··· ├─ blockchain</td><td>账本目录</td></tr><tr><td>│ ··· ├─ keys</td><td>此节点的地址，具有全局唯一性</td></tr><tr><td>│ ··· ├─ netkeys</td><td>此节点的网络标识ID，具有全局唯一性</td></tr><tr><td>│ ··· └─ genesis</td><td>包括创始的共识，初始的资源数，矿工奖励机制等。</td></tr><tr><td>├─ logs</td><td>程序日志目录</td></tr><tr><td>├─ tmp</td><td>临时文件夹，目前存储进程pid</td></tr></tbody></table></li></ol><h1 id="使用single共识部署"><a href="#使用single共识部署" class="headerlink" title="使用single共识部署"></a>使用single共识部署</h1><p>使用single共识为例子进行部署，其他共识方式，需要根据创世配置的不同，准备若干个节点，但基本步骤大致相同。</p><p>以node1为矿工节点和种子节点，node2、node3作为种子节点，组成P2P网络。执行以下命令准备文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p testnet/&#123;node1,node2,node3&#125;</span><br><span class="line">cp -r output/* testnet/node1</span><br><span class="line">cp -r output/* testnet/node2</span><br><span class="line">cp -r output/* testnet/node3</span><br></pre></td></tr></table></figure><h2 id="准备矿工节点地址"><a href="#准备矿工节点地址" class="headerlink" title="准备矿工节点地址"></a>准备矿工节点地址</h2><p>进入目录<code>testnet/node1</code>，并清空<code>data</code>子目录，以便从头开始。</p><p><code>rm -rf data/*</code></p><h3 id="准备node1节点地址"><a href="#准备node1节点地址" class="headerlink" title="准备node1节点地址"></a>准备node1节点地址</h3><p>使用命令<code>./bin/xchain-cli account newkeys</code>，创建节点的地址。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/xchain-cli account newkeys</span><br><span class="line">create account using crypto <span class="built_in">type</span> default</span><br><span class="line">create account <span class="keyword">in</span> ./data/keys</span><br><span class="line">$ ls data/keys</span><br><span class="line">address  private.key  public.key</span><br><span class="line">$ cat data/keys/address</span><br><span class="line">ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF</span><br></pre></td></tr></table></figure><p><code>address</code>文件内容即为节点的地址。</p><h3 id="准备node1节点网络地址"><a href="#准备node1节点网络地址" class="headerlink" title="准备node1节点网络地址"></a>准备node1节点网络地址</h3><p>使用命令<code>./bin/xchain-cli a</code>，准备节点的网络身份</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/xchain-cli netURL gen</span><br><span class="line">$ ls data/netkeys</span><br><span class="line">net_private.key</span><br><span class="line">$ ./bin/xchain-cli netURL preview</span><br><span class="line">/ip4/127.0.0.1/tcp/47101/p2p/QmZdt6X2Pn9ornxFKDuTVHqQGVsE9itzxzh4vaKNavf76o</span><br></pre></td></tr></table></figure><p>命令行从<code>data/netkeys/net_private.key</code>进行处理后得到节点在P2P网络上的访问信息，<code>netURL preview</code>的输出即为节点的网络地址。</p><blockquote><p>上面的响应中的127.0.0.1可以通过参数–ip 指定其他节点可访问的IP地址，47101端口可以通过–port设置为其他节点可访问的端口。</p></blockquote><h2 id="准备种子节点node2"><a href="#准备种子节点node2" class="headerlink" title="准备种子节点node2"></a>准备种子节点node2</h2><p>与准备node1的地址命令一样，注意记录文件内容和命令行输出。</p><p>进入目录<code>testnet/node2</code>，并清空<code>data</code>子目录，以便从头开始。</p><p><code>rm -rf data/*</code></p><h3 id="准备node2节点地址"><a href="#准备node2节点地址" class="headerlink" title="准备node2节点地址"></a>准备node2节点地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/xchain-cli account newkeys</span><br><span class="line">create account using crypto <span class="built_in">type</span> default</span><br><span class="line">create account <span class="keyword">in</span> ./data/keys</span><br><span class="line">$ ls data/keys</span><br><span class="line">address  private.key  public.key</span><br><span class="line">$ cat data/keys/address</span><br><span class="line">WaZqVN6qGQF9mi8D24kLTyhK7W5NJUwGg</span><br></pre></td></tr></table></figure><h3 id="准备node2网络地址"><a href="#准备node2网络地址" class="headerlink" title="准备node2网络地址"></a>准备node2网络地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/xchain-cli netURL gen</span><br><span class="line">$ ls data/netkeys</span><br><span class="line">net_private.key</span><br><span class="line">$ ./bin/xchain-cli netURL preview --port 47102</span><br><span class="line">/ip4/127.0.0.1/tcp/47102/p2p/QmS75Z3ELD5dFQLyHWFDMUG6u51Rb7WhNYiEJvQ7aGENYC</span><br></pre></td></tr></table></figure><h2 id="准备种子节点node3"><a href="#准备种子节点node3" class="headerlink" title="准备种子节点node3"></a>准备种子节点node3</h2><p>与准备node1的地址命令一样，注意记录文件内容和命令行输出。</p><p>进入目录<code>testnet/node3</code>，并清空<code>data</code>子目录，以便从头开始。</p><p><code>rm -rf data/*</code></p><h3 id="准备node3节点地址"><a href="#准备node3节点地址" class="headerlink" title="准备node3节点地址"></a>准备node3节点地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/xchain-cli account newkeys</span><br><span class="line">create account using crypto <span class="built_in">type</span> default</span><br><span class="line">create account <span class="keyword">in</span> ./data/keys</span><br><span class="line">$ ls data/keys</span><br><span class="line">address  private.key  public.key</span><br><span class="line">$ cat data/keys/address</span><br><span class="line">dW98WTgPAxviPeJkL1bJjRkWNQNvSDnnU</span><br></pre></td></tr></table></figure><h3 id="准备node3网络地址"><a href="#准备node3网络地址" class="headerlink" title="准备node3网络地址"></a>准备node3网络地址</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/xchain-cli netURL gen</span><br><span class="line">$ ls data/netkeys</span><br><span class="line">net_private.key</span><br><span class="line">$ ./bin/xchain-cli netURL preview --port 47103</span><br><span class="line">/ip4/127.0.0.1/tcp/47103/p2p/QmY68fgjF2xNa5dnWy8uHDoP1fUZUh4iSxYxuKeTmziiQG</span><br></pre></td></tr></table></figure><h2 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h2><h3 id="准备创世配置"><a href="#准备创世配置" class="headerlink" title="准备创世配置"></a>准备创世配置</h3><p>在<code>testnet/node1</code>目录下准备创世块配置，创建文件<code>node1/data/genesis/xuper.json</code>内容如下：</p><blockquote><p>其他共识方式，可以参考编译输出的pow.json和官方文档，配置合适的节点地址即可。</p></blockquote><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"version"</span>: <span class="string">"1"</span>,</span><br><span class="line">    <span class="attr">"predistribution"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"address"</span>: <span class="string">"ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF"</span>,</span><br><span class="line">            <span class="attr">"quota"</span>: <span class="string">"100000000000000000000"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="attr">"maxblocksize"</span>: <span class="string">"128"</span>,</span><br><span class="line">    <span class="attr">"award"</span>: <span class="string">"1000000"</span>,</span><br><span class="line">    <span class="attr">"decimals"</span>: <span class="string">"8"</span>,</span><br><span class="line">    <span class="attr">"award_decay"</span>: &#123;</span><br><span class="line">        <span class="attr">"height_gap"</span>: <span class="number">31536000</span>,</span><br><span class="line">        <span class="attr">"ratio"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"gas_price"</span>: &#123;</span><br><span class="line">        <span class="attr">"cpu_rate"</span>: <span class="number">1000</span>,</span><br><span class="line">        <span class="attr">"mem_rate"</span>: <span class="number">1000000</span>,</span><br><span class="line">        <span class="attr">"disk_rate"</span>: <span class="number">1</span>,</span><br><span class="line">        <span class="attr">"xfee_rate"</span>: <span class="number">1</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="attr">"new_account_resource_amount"</span>: <span class="number">1000</span>,</span><br><span class="line">    <span class="attr">"genesis_consensus"</span>: &#123;</span><br><span class="line">        <span class="attr">"name"</span>: <span class="string">"single"</span>,</span><br><span class="line">        <span class="attr">"config"</span>: &#123;</span><br><span class="line">            <span class="attr">"miner"</span>: <span class="string">"ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF"</span>,</span><br><span class="line">            <span class="attr">"period"</span>: <span class="string">"3000"</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面的<code>ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF</code>为node1的节点地址。</p><blockquote><p>predistribution：节点预分配的余额，总量为各个节点的总和。</p><p>maxblocksize：最大区块大小，单位为KB。</p><p>new_account_resource_amount：创建的新账户的余额。</p></blockquote><p>将创世块配置分发到<code>node2</code>、<code>node3</code>的相同目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p node2/data/genesis</span><br><span class="line">mkdir -p node3/data/genesis</span><br><span class="line">cp -r node1/data/genesis/xuper.json node2/data/genesis</span><br><span class="line">cp -r node1/data/genesis/xuper.json node3/data/genesis</span><br></pre></td></tr></table></figure><h3 id="node1的网络配置和服务配置"><a href="#node1的网络配置和服务配置" class="headerlink" title="node1的网络配置和服务配置"></a>node1的网络配置和服务配置</h3><p>在<code>testnet</code>目录下执行操作。</p><p>修改文件<code>node1/conf/network.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># p2p network config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Module is the name of p2p module plugin.(p2pv1 | p2pv2)</span></span><br><span class="line"><span class="attr">module:</span> <span class="string">p2pv2</span></span><br><span class="line"><span class="comment"># Address multiaddr string，P2P端口，其他节点感知到的地址和端口</span></span><br><span class="line"><span class="attr">address:</span> <span class="string">/ip4/127.0.0.1/tcp/47101</span></span><br><span class="line"><span class="comment"># KeyPath is the netdisk private key path</span></span><br><span class="line"><span class="attr">keyPath:</span> <span class="string">netkeys</span></span><br><span class="line"><span class="comment"># BootNodes config the bootNodes the node to connect # 三个节点的网络地址</span></span><br><span class="line"><span class="attr">bootNodes:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/ip4/127.0.0.1/tcp/47101/p2p/QmZdt6X2Pn9ornxFKDuTVHqQGVsE9itzxzh4vaKNavf76o"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/ip4/127.0.0.1/tcp/47102/p2p/QmS75Z3ELD5dFQLyHWFDMUG6u51Rb7WhNYiEJvQ7aGENYC"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/ip4/127.0.0.1/tcp/47103/p2p/QmY68fgjF2xNa5dnWy8uHDoP1fUZUh4iSxYxuKeTmziiQG"</span></span><br><span class="line"><span class="comment"># service name</span></span><br><span class="line"><span class="attr">serviceName:</span> <span class="string">localhost</span></span><br></pre></td></tr></table></figure><p>修改文件<code>node1/conf/server.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpcPort service listen port for xuperos</span></span><br><span class="line"><span class="attr">rpcPort:</span> <span class="number">37101</span></span><br><span class="line"><span class="attr">metricPort:</span> <span class="number">37201</span></span><br><span class="line"><span class="comment"># GWPort gateway service listen port for xchain</span></span><br><span class="line"><span class="attr">GWPort:</span> <span class="number">37301</span></span><br><span class="line"><span class="comment"># enableEndorser switch for endorser service</span></span><br><span class="line"><span class="attr">enableEndorser:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># endorserHosts</span></span><br><span class="line"><span class="attr">endorserHosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"127.0.0.1:8848"</span></span><br><span class="line"><span class="attr">endorserModule:</span> <span class="string">"default"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maxRecvMsgSize set the max message size in bytes the server can receive.</span></span><br><span class="line"><span class="comment"># If this is not set, gRPC uses the default 4MB.</span></span><br><span class="line"><span class="attr">maxRecvMsgSize:</span> <span class="number">134217728</span></span><br><span class="line"><span class="comment"># readBufSize lets you set the size of read buffer, this determines how much data can be read at most for one read syscall. The default value for this buffer is 32KB. Zero will disable read buffer for a connection so data framer can access the underlying conn directly.</span></span><br><span class="line"><span class="attr">readBufSize:</span> <span class="number">32768</span></span><br><span class="line"><span class="comment"># writeBufSize determines how much data can be batched before doing a write on the wire. The corresponding memory allocation for this buffer will be twice the size to keep syscalls low. The default value for this buffer is 32KB. Zero will disable the write buffer such that each write will be on underlying connection. <span class="doctag">Note:</span> A Send call may not directly translate to a write.</span></span><br><span class="line"><span class="attr">writeBufSize:</span> <span class="number">32768</span></span><br><span class="line"><span class="comment"># initWindowSize window size for stream</span></span><br><span class="line"><span class="comment"># The lower bound for window size is 64K and any value smaller than that will be ignored</span></span><br><span class="line"><span class="attr">initWindowSize:</span> <span class="number">131072</span></span><br><span class="line"><span class="comment"># initConnWindowSize window size for a connection</span></span><br><span class="line"><span class="comment"># The lower bound for window size is 64K and any value smaller than that will be ignored</span></span><br><span class="line"><span class="attr">initConnWindowSize:</span> <span class="number">65536</span></span><br></pre></td></tr></table></figure><h3 id="node2的网络配置和服务配置"><a href="#node2的网络配置和服务配置" class="headerlink" title="node2的网络配置和服务配置"></a>node2的网络配置和服务配置</h3><p>在<code>testnet</code>目录下。</p><p>修改文件<code>node2/conf/network.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># p2p network config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Module is the name of p2p module plugin.(p2pv1 | p2pv2)</span></span><br><span class="line"><span class="attr">module:</span> <span class="string">p2pv2</span></span><br><span class="line"><span class="comment"># Address multiaddr string，P2P端口</span></span><br><span class="line"><span class="attr">address:</span> <span class="string">/ip4/127.0.0.1/tcp/47102</span></span><br><span class="line"><span class="comment"># KeyPath is the netdisk private key path</span></span><br><span class="line"><span class="attr">keyPath:</span> <span class="string">netkeys</span></span><br><span class="line"><span class="comment"># BootNodes config the bootNodes the node to connect # 三个节点的网络地址</span></span><br><span class="line"><span class="attr">bootNodes:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/ip4/127.0.0.1/tcp/47101/p2p/QmZdt6X2Pn9ornxFKDuTVHqQGVsE9itzxzh4vaKNavf76o"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/ip4/127.0.0.1/tcp/47102/p2p/QmS75Z3ELD5dFQLyHWFDMUG6u51Rb7WhNYiEJvQ7aGENYC"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/ip4/127.0.0.1/tcp/47103/p2p/QmY68fgjF2xNa5dnWy8uHDoP1fUZUh4iSxYxuKeTmziiQG"</span></span><br><span class="line"><span class="comment"># service name</span></span><br><span class="line"><span class="attr">serviceName:</span> <span class="string">localhost</span></span><br></pre></td></tr></table></figure><p>修改文件<code>node2/conf/server.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpcPort service listen port for xuperos</span></span><br><span class="line"><span class="attr">rpcPort:</span> <span class="number">37102</span></span><br><span class="line"><span class="attr">metricPort:</span> <span class="number">37202</span></span><br><span class="line"><span class="comment"># GWPort gateway service listen port for xchain</span></span><br><span class="line"><span class="attr">GWPort:</span> <span class="number">37302</span></span><br><span class="line"><span class="comment"># enableEndorser switch for endorser service</span></span><br><span class="line"><span class="attr">enableEndorser:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># endorserHosts</span></span><br><span class="line"><span class="attr">endorserHosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"127.0.0.1:8848"</span></span><br><span class="line"><span class="attr">endorserModule:</span> <span class="string">"default"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maxRecvMsgSize set the max message size in bytes the server can receive.</span></span><br><span class="line"><span class="comment"># If this is not set, gRPC uses the default 4MB.</span></span><br><span class="line"><span class="attr">maxRecvMsgSize:</span> <span class="number">134217728</span></span><br><span class="line"><span class="comment"># readBufSize lets you set the size of read buffer, this determines how much data can be read at most for one read syscall. The default value for this buffer is 32KB. Zero will disable read buffer for a connection so data framer can access the underlying conn directly.</span></span><br><span class="line"><span class="attr">readBufSize:</span> <span class="number">32768</span></span><br><span class="line"><span class="comment"># writeBufSize determines how much data can be batched before doing a write on the wire. The corresponding memory allocation for this buffer will be twice the size to keep syscalls low. The default value for this buffer is 32KB. Zero will disable the write buffer such that each write will be on underlying connection. <span class="doctag">Note:</span> A Send call may not directly translate to a write.</span></span><br><span class="line"><span class="attr">writeBufSize:</span> <span class="number">32768</span></span><br><span class="line"><span class="comment"># initWindowSize window size for stream</span></span><br><span class="line"><span class="comment"># The lower bound for window size is 64K and any value smaller than that will be ignored</span></span><br><span class="line"><span class="attr">initWindowSize:</span> <span class="number">131072</span></span><br><span class="line"><span class="comment"># initConnWindowSize window size for a connection</span></span><br><span class="line"><span class="comment"># The lower bound for window size is 64K and any value smaller than that will be ignored</span></span><br><span class="line"><span class="attr">initConnWindowSize:</span> <span class="number">65536</span></span><br></pre></td></tr></table></figure><h3 id="node3的网络配置和服务配置"><a href="#node3的网络配置和服务配置" class="headerlink" title="node3的网络配置和服务配置"></a>node3的网络配置和服务配置</h3><p>在<code>testnet</code>目录下。</p><p>修改文件<code>node3/conf/network.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># p2p network config</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># Module is the name of p2p module plugin.(p2pv1 | p2pv2)</span></span><br><span class="line"><span class="attr">module:</span> <span class="string">p2pv2</span></span><br><span class="line"><span class="comment"># Address multiaddr string，P2P端口</span></span><br><span class="line"><span class="attr">address:</span> <span class="string">/ip4/127.0.0.1/tcp/47103</span></span><br><span class="line"><span class="comment"># KeyPath is the netdisk private key path</span></span><br><span class="line"><span class="attr">keyPath:</span> <span class="string">netkeys</span></span><br><span class="line"><span class="comment"># BootNodes config the bootNodes the node to connect  # 三个节点的网络地址</span></span><br><span class="line"><span class="attr">bootNodes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/ip4/127.0.0.1/tcp/47101/p2p/QmZdt6X2Pn9ornxFKDuTVHqQGVsE9itzxzh4vaKNavf76o"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/ip4/127.0.0.1/tcp/47102/p2p/QmS75Z3ELD5dFQLyHWFDMUG6u51Rb7WhNYiEJvQ7aGENYC"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/ip4/127.0.0.1/tcp/47103/p2p/QmY68fgjF2xNa5dnWy8uHDoP1fUZUh4iSxYxuKeTmziiQG"</span></span><br><span class="line"><span class="comment"># service name</span></span><br><span class="line"><span class="attr">serviceName:</span> <span class="string">localhost</span></span><br></pre></td></tr></table></figure><p>修改文件<code>node1/conf/server.yaml</code>，内容如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># rpcPort service listen port for xuperos</span></span><br><span class="line"><span class="attr">rpcPort:</span> <span class="number">37103</span></span><br><span class="line"><span class="attr">metricPort:</span> <span class="number">37203</span></span><br><span class="line"><span class="comment"># GWPort gateway service listen port for xchain</span></span><br><span class="line"><span class="attr">GWPort:</span> <span class="number">37303</span></span><br><span class="line"><span class="comment"># enableEndorser switch for endorser service</span></span><br><span class="line"><span class="attr">enableEndorser:</span> <span class="literal">true</span></span><br><span class="line"><span class="comment"># endorserHosts</span></span><br><span class="line"><span class="attr">endorserHosts:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">"127.0.0.1:8848"</span></span><br><span class="line"><span class="attr">endorserModule:</span> <span class="string">"default"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># maxRecvMsgSize set the max message size in bytes the server can receive.</span></span><br><span class="line"><span class="comment"># If this is not set, gRPC uses the default 4MB.</span></span><br><span class="line"><span class="attr">maxRecvMsgSize:</span> <span class="number">134217728</span></span><br><span class="line"><span class="comment"># readBufSize lets you set the size of read buffer, this determines how much data can be read at most for one read syscall. The default value for this buffer is 32KB. Zero will disable read buffer for a connection so data framer can access the underlying conn directly.</span></span><br><span class="line"><span class="attr">readBufSize:</span> <span class="number">32768</span></span><br><span class="line"><span class="comment"># writeBufSize determines how much data can be batched before doing a write on the wire. The corresponding memory allocation for this buffer will be twice the size to keep syscalls low. The default value for this buffer is 32KB. Zero will disable the write buffer such that each write will be on underlying connection. <span class="doctag">Note:</span> A Send call may not directly translate to a write.</span></span><br><span class="line"><span class="attr">writeBufSize:</span> <span class="number">32768</span></span><br><span class="line"><span class="comment"># initWindowSize window size for stream</span></span><br><span class="line"><span class="comment"># The lower bound for window size is 64K and any value smaller than that will be ignored</span></span><br><span class="line"><span class="attr">initWindowSize:</span> <span class="number">131072</span></span><br><span class="line"><span class="comment"># initConnWindowSize window size for a connection</span></span><br><span class="line"><span class="comment"># The lower bound for window size is 64K and any value smaller than that will be ignored</span></span><br><span class="line"><span class="attr">initConnWindowSize:</span> <span class="number">65536</span></span><br></pre></td></tr></table></figure><h2 id="启动网络"><a href="#启动网络" class="headerlink" title="启动网络"></a>启动网络</h2><p>分别进入三个节点目录，执行命令<code>bash control.sh start</code>启动服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> node1</span><br><span class="line">bash control.sh start</span><br><span class="line"><span class="built_in">cd</span> ../node2</span><br><span class="line">bash control.sh start</span><br><span class="line"><span class="built_in">cd</span> ../node3</span><br><span class="line">bash control.sh start</span><br></pre></td></tr></table></figure><blockquote><p>注意：节点之间启动时间不要间隔太久，否则会因为P2P网络无法建立而失败。</p></blockquote><p>在任意节点目录中，执行命令<code>./bin/xchain-cli status -H 127.0.0.1:37101</code>，输入如下内容表示成功创建网络。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/xchain-cli status -H 127.0.0.1:37101</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"blockchains"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"xuper"</span>,</span><br><span class="line">      <span class="string">"ledger"</span>: &#123;</span><br><span class="line">        <span class="string">"rootBlockid"</span>: <span class="string">"d39d657f0c32d61c685c1cdcb2e86d93ec44f0ffc203b20c4db18f2130c63e5a"</span>,</span><br><span class="line">        <span class="string">"tipBlockid"</span>: <span class="string">"9c55e1b507d71e6417366ab5c0f1c34137483d2a438384b2dd93b160e196a059"</span>,</span><br><span class="line">        <span class="string">"trunkHeight"</span>: 44</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"utxo"</span>: &#123;</span><br><span class="line">        <span class="string">"latestBlockid"</span>: <span class="string">"9c55e1b507d71e6417366ab5c0f1c34137483d2a438384b2dd93b160e196a059"</span>,</span><br><span class="line">        <span class="string">"lockKeyList"</span>: null,</span><br><span class="line">        <span class="string">"utxoTotal"</span>: <span class="string">"100000000000044000000"</span>,</span><br><span class="line">        <span class="string">"avgDelay"</span>: 0,</span><br><span class="line">        <span class="string">"unconfirmed"</span>: 0,</span><br><span class="line">        <span class="string">"maxBlockSize"</span>: 134217728,</span><br><span class="line">        <span class="string">"reservedContracts"</span>: [],</span><br><span class="line">        <span class="string">"forbiddenContract"</span>: &#123;</span><br><span class="line">          <span class="string">"moduleName"</span>: <span class="string">""</span>,</span><br><span class="line">          <span class="string">"contractName"</span>: <span class="string">""</span>,</span><br><span class="line">          <span class="string">"methodName"</span>: <span class="string">""</span>,</span><br><span class="line">          <span class="string">"args"</span>: &#123;&#125;,</span><br><span class="line">          <span class="string">"resource_limits"</span>: null</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">"newAccountResourceAmount"</span>: 1000,</span><br><span class="line">        <span class="string">"irreversibleBlockHeight"</span>: 0,</span><br><span class="line">        <span class="string">"irreversibleSlideWindow"</span>: 0,</span><br><span class="line">        <span class="string">"gasPrice"</span>: &#123;</span><br><span class="line">          <span class="string">"cpu_rate"</span>: 1000,</span><br><span class="line">          <span class="string">"mem_rate"</span>: 1000000,</span><br><span class="line">          <span class="string">"disk_rate"</span>: 1,</span><br><span class="line">          <span class="string">"xfee_rate"</span>: 1</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="string">"branchBlockid"</span>: [</span><br><span class="line">        <span class="string">"9c55e1b507d71e6417366ab5c0f1c34137483d2a438384b2dd93b160e196a059"</span></span><br><span class="line">      ]</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"peers"</span>: [</span><br><span class="line">    <span class="string">"/ip4/127.0.0.1/tcp/47103/p2p/QmY68fgjF2xNa5dnWy8uHDoP1fUZUh4iSxYxuKeTmziiQG"</span>,</span><br><span class="line">    <span class="string">"/ip4/127.0.0.1/tcp/47102/p2p/QmS75Z3ELD5dFQLyHWFDMUG6u51Rb7WhNYiEJvQ7aGENYC"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"speeds"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>命令行输出的<code>peers</code>即为当前节点感知到的其他节点地址。</p><h1 id="基本功能测试"><a href="#基本功能测试" class="headerlink" title="基本功能测试"></a>基本功能测试</h1><h2 id="账号创建"><a href="#账号创建" class="headerlink" title="账号创建"></a>账号创建</h2><p>普通账号为用户使用，使用程序生成离线保存，用于访问超级链。合约账号是超级链中用于智能合约管理的单元，由普通账户发起交易，在链上生成的一个16位数字的账户，存储在链上。发起合约相关交易，比如合约调用时，需要使用合约账户。</p><ol><li><p>创建普通账号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/xchain-cli account newkeys --output data/mark --strength 1 --lang zh</span><br><span class="line">create account <span class="keyword">in</span> data/mark</span><br><span class="line">$ ls data/mark</span><br><span class="line">address  mnemonic  private.key  public.key</span><br><span class="line">$ cat data/mark/mnemonic <span class="comment"># 内容为助记词</span></span><br><span class="line">拌 讼 登 穿 铺 项 租 曲 品 沈 雄 百</span><br><span class="line">$ cat data/mark/address  <span class="comment"># 内容为账户地址</span></span><br><span class="line">mRU8vKjiUdcJQyFRNXJbGyci8YS59PjkM</span><br></pre></td></tr></table></figure><p>上述命令生成一个带助记词的离线普通账号。不加<code>--strength</code>参数表示不使用助记词</p></li><li><p>创建合约账号</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ bin/xchain-cli account new --account 1111111111111111 --fee 2000</span><br><span class="line">contract response:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"pm"</span>: &#123;</span><br><span class="line">                <span class="string">"rule"</span>: 1,</span><br><span class="line">                <span class="string">"acceptValue"</span>: 1.0</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"aksWeight"</span>: &#123;</span><br><span class="line">                <span class="string">"ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF"</span>: 1.0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">The gas you cousume is: 1000</span><br><span class="line">The fee you pay is: 2000</span><br><span class="line">Tx id: 882cd072013eff00c6511bf5efc195d31182e1ef71772355883121c4c5201de7</span><br><span class="line">account name: XC1111111111111111@xuper</span><br></pre></td></tr></table></figure></li></ol><h2 id="查询账号余额"><a href="#查询账号余额" class="headerlink" title="查询账号余额"></a>查询账号余额</h2><p>使用下列命令查询新创建的普通账号的余额。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ bin/xchain-cli account balance --keys data/mark</span><br><span class="line">0</span><br><span class="line"><span class="comment"># 两种方式是等价的，使用地址或者指定保存地址的目录即可。</span></span><br><span class="line">$ bin/xchain-cli account balance mRU8vKjiUdcJQyFRNXJbGyci8YS59PjkM</span><br><span class="line">0</span><br><span class="line"><span class="comment"># 在node1目录下执行，即node1持有的余额（通过创世块进行分配）</span></span><br><span class="line">$ bin/xchain-cli account balance --keys data/keys</span><br><span class="line">100000000000669000000</span><br></pre></td></tr></table></figure><blockquote><p><strong>注意：</strong>创世块中规定了了矿工出块奖励为1000000，而node1的初始额度为100000000000000000000，差值669000000/1000000即为当时的区块高度669。</p></blockquote><h2 id="转账"><a href="#转账" class="headerlink" title="转账"></a>转账</h2><p>在<code>node1</code>的目录下进行操作，<strong><em>初始情况只有矿工节点才有余额</em></strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --keys 从此地址 转给 --to地址 --amount 金额</span></span><br><span class="line">$ bin/xchain-cli transfer --to mRU8vKjiUdcJQyFRNXJbGyci8YS59PjkM --amount 10 --keys data/keys/ -H 127.0.0.1:37101</span><br><span class="line">9558dfa4a3c0873846e88900611b8de9b3e26d026e62c4441abd61d4918bbcd5</span><br><span class="line"><span class="comment"># 向其他种子节点请求也可以转账，但必须使用node1的私钥</span></span><br><span class="line">$ bin/xchain-cli transfer --to mRU8vKjiUdcJQyFRNXJbGyci8YS59PjkM --amount 10 --keys data/keys/ -H 127.0.0.1:37102</span><br><span class="line">4560eb5d2777fc07854ce003c1bbb11313d9fe865a375eb5c4a9448d1db96d68</span><br><span class="line">$ bin/xchain-cli transfer --to mRU8vKjiUdcJQyFRNXJbGyci8YS59PjkM --amount 10 --keys data/keys/ -H 127.0.0.1:37103</span><br><span class="line">3e404991033d9defad8f698cbf97310450953e03d5aa7db2b184df0a77185af1</span><br></pre></td></tr></table></figure><h2 id="查询交易"><a href="#查询交易" class="headerlink" title="查询交易"></a>查询交易</h2><p>通过以下命令可以查询交易的信息，包括交易状态、交易的源和目标账号、交易的金额、所在的区块（如果已上链）等内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">$ bin/xchain-cli tx query 3e404991033d9defad8f698cbf97310450953e03d5aa7db2b184df0a77185af1 -H 127.0.0.1:37101</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"txid"</span>: <span class="string">"3e404991033d9defad8f698cbf97310450953e03d5aa7db2b184df0a77185af1"</span>,</span><br><span class="line">  <span class="string">"blockid"</span>: <span class="string">"9d396132d6c5a0541d2cf720f1c4dcc8a2d93d333653cd7bb3ffb46a4660c0f4"</span>,</span><br><span class="line">  <span class="string">"txInputs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"refTxid"</span>: <span class="string">"228fab3f61078f8d651a2b178fee7b1b52cbff0839e019fc6f6d42751cf5e7c4"</span>,</span><br><span class="line">      <span class="string">"refOffset"</span>: 0,</span><br><span class="line">      <span class="string">"fromAddr"</span>: <span class="string">"ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF"</span>,</span><br><span class="line">      <span class="string">"amount"</span>: <span class="string">"1000000"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"txOutputs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"amount"</span>: <span class="string">"10"</span>,</span><br><span class="line">      <span class="string">"toAddr"</span>: <span class="string">"mRU8vKjiUdcJQyFRNXJbGyci8YS59PjkM"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"amount"</span>: <span class="string">"999990"</span>,</span><br><span class="line">      <span class="string">"toAddr"</span>: <span class="string">"ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"desc"</span>: <span class="string">"transfer from console"</span>,</span><br><span class="line">  <span class="string">"nonce"</span>: <span class="string">"16342646001626674173793502"</span>,</span><br><span class="line">  <span class="string">"timestamp"</span>: 1634264600625831700,</span><br><span class="line">  <span class="string">"version"</span>: 3,</span><br><span class="line">  <span class="string">"autogen"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"coinbase"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"txInputsExt"</span>: null,</span><br><span class="line">  <span class="string">"txOutputsExt"</span>: null,</span><br><span class="line">  <span class="string">"contractRequests"</span>: null,</span><br><span class="line">  <span class="string">"initiator"</span>: <span class="string">"ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF"</span>,</span><br><span class="line">  <span class="string">"authRequire"</span>: [</span><br><span class="line">    <span class="string">"ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"initiatorSigns"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"publickey"</span>: <span class="string">"&#123;\"Curvname\":\"P-256\",\"X\":56335038704624734171766820457929516633652997544180595332321831286203018586578,\"Y\":13420952595097616685913582932235044534210414175672093961644149064937854256045&#125;"</span>,</span><br><span class="line">      <span class="string">"sign"</span>: <span class="string">"3045022100a6a57c9fed1a3e3bdef4534959f663cbcc550cff50dc3c4d05e11194f4e8c3e6022034d19caa384760e038e387b27579b6351633bfd447bd21b12673cb4a5e8f663d"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"authRequireSigns"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"publickey"</span>: <span class="string">"&#123;\"Curvname\":\"P-256\",\"X\":56335038704624734171766820457929516633652997544180595332321831286203018586578,\"Y\":13420952595097616685913582932235044534210414175672093961644149064937854256045&#125;"</span>,</span><br><span class="line">      <span class="string">"sign"</span>: <span class="string">"304402201df685c3c74612428d67e4170dbdbbf4961940d3dc3aaa14223b91529f8426010220637ad99977428dcb880826085ce735ca87f7899324f36dddef1af437bbbbca3f"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"receivedTimestamp"</span>: 1634264600642359300,</span><br><span class="line">  <span class="string">"modifyBlock"</span>: &#123;</span><br><span class="line">    <span class="string">"marked"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"effectiveHeight"</span>: 0,</span><br><span class="line">    <span class="string">"effectiveTxid"</span>: <span class="string">""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="查询区块"><a href="#查询区块" class="headerlink" title="查询区块"></a>查询区块</h2><p>通过blockid可以查询区块的相关信息，包括区块内打包的交易、所在链的高度、前驱/后继区块的id等内容</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可查询上一步交易所在的block id信息</span></span><br><span class="line">$ bin/xchain-cli block 9d396132d6c5a0541d2cf720f1c4dcc8a2d93d333653cd7bb3ffb46a4660c0f4 -H 127.0.0.1:37101</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"version"</span>: 1,</span><br><span class="line">  <span class="string">"blockid"</span>: <span class="string">"9d396132d6c5a0541d2cf720f1c4dcc8a2d93d333653cd7bb3ffb46a4660c0f4"</span>,</span><br><span class="line">  <span class="string">"preHash"</span>: <span class="string">"263d08e3f1bd832852541b2c46909ec37ddffc8971a3bca92b3840daf1918a39"</span>,</span><br><span class="line">  <span class="string">"proposer"</span>: <span class="string">"ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF"</span>,</span><br><span class="line">  <span class="string">"sign"</span>: <span class="string">"304602210096448754162a81e26f4e1ebf25d86d7db18a8613a2bc109dc575c93167bbb36b022100a23f862ccf6757c3049a5d3ddd57ae4cf1f5fd2ccf5984abea1ea2260d29f6cb"</span>,</span><br><span class="line">  <span class="string">"pubkey"</span>: <span class="string">"&#123;\"Curvname\":\"P-256\",\"X\":56335038704624734171766820457929516633652997544180595332321831286203018586578,\"Y\":13420952595097616685913582932235044534210414175672093961644149064937854256045&#125;"</span>,</span><br><span class="line">  <span class="string">"merkleRoot"</span>: <span class="string">"7d4d95e5815f2a612398c9e79b325dc738e177eac30eadd1627043d76bc2c488"</span>,</span><br><span class="line">  <span class="string">"height"</span>: 947,</span><br><span class="line">  <span class="string">"timestamp"</span>: 1634264601472151100,</span><br><span class="line">  <span class="string">"transactions"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"txid"</span>: <span class="string">"99533fea585387cb68c860aadef8b2dd45415bd8bf52902280f49ae4ca57c31f"</span>,</span><br><span class="line">      <span class="string">"blockid"</span>: <span class="string">"9d396132d6c5a0541d2cf720f1c4dcc8a2d93d333653cd7bb3ffb46a4660c0f4"</span>,</span><br><span class="line">      <span class="string">"txInputs"</span>: null,</span><br><span class="line">      <span class="string">"txOutputs"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"amount"</span>: <span class="string">"1000000"</span>,</span><br><span class="line">          <span class="string">"toAddr"</span>: <span class="string">"ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"desc"</span>: <span class="string">"award"</span>,</span><br><span class="line">      <span class="string">"nonce"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"timestamp"</span>: 1634264601472449300,</span><br><span class="line">      <span class="string">"version"</span>: 1,</span><br><span class="line">      <span class="string">"autogen"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"coinbase"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"txInputsExt"</span>: null,</span><br><span class="line">      <span class="string">"txOutputsExt"</span>: null,</span><br><span class="line">      <span class="string">"contractRequests"</span>: null,</span><br><span class="line">      <span class="string">"initiator"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"authRequire"</span>: null,</span><br><span class="line">      <span class="string">"initiatorSigns"</span>: null,</span><br><span class="line">      <span class="string">"authRequireSigns"</span>: null,</span><br><span class="line">      <span class="string">"receivedTimestamp"</span>: 0,</span><br><span class="line">      <span class="string">"modifyBlock"</span>: &#123;</span><br><span class="line">        <span class="string">"marked"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"effectiveHeight"</span>: 0,</span><br><span class="line">        <span class="string">"effectiveTxid"</span>: <span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"txid"</span>: <span class="string">"3e404991033d9defad8f698cbf97310450953e03d5aa7db2b184df0a77185af1"</span>,</span><br><span class="line">      <span class="string">"blockid"</span>: <span class="string">"9d396132d6c5a0541d2cf720f1c4dcc8a2d93d333653cd7bb3ffb46a4660c0f4"</span>,</span><br><span class="line">      <span class="string">"txInputs"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"refTxid"</span>: <span class="string">"228fab3f61078f8d651a2b178fee7b1b52cbff0839e019fc6f6d42751cf5e7c4"</span>,</span><br><span class="line">          <span class="string">"refOffset"</span>: 0,</span><br><span class="line">          <span class="string">"fromAddr"</span>: <span class="string">"ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF"</span>,</span><br><span class="line">          <span class="string">"amount"</span>: <span class="string">"1000000"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"txOutputs"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"amount"</span>: <span class="string">"10"</span>,</span><br><span class="line">          <span class="string">"toAddr"</span>: <span class="string">"mRU8vKjiUdcJQyFRNXJbGyci8YS59PjkM"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"amount"</span>: <span class="string">"999990"</span>,</span><br><span class="line">          <span class="string">"toAddr"</span>: <span class="string">"ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"desc"</span>: <span class="string">"transfer from console"</span>,</span><br><span class="line">      <span class="string">"nonce"</span>: <span class="string">"16342646001626674173793502"</span>,</span><br><span class="line">      <span class="string">"timestamp"</span>: 1634264600625831700,</span><br><span class="line">      <span class="string">"version"</span>: 3,</span><br><span class="line">      <span class="string">"autogen"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"coinbase"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"txInputsExt"</span>: null,</span><br><span class="line">      <span class="string">"txOutputsExt"</span>: null,</span><br><span class="line">      <span class="string">"contractRequests"</span>: null,</span><br><span class="line">      <span class="string">"initiator"</span>: <span class="string">"ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF"</span>,</span><br><span class="line">      <span class="string">"authRequire"</span>: [</span><br><span class="line">        <span class="string">"ZdhAbisf5rZF9BX2kpzd7nR2jzJXWxSwF"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"initiatorSigns"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"publickey"</span>: <span class="string">"&#123;\"Curvname\":\"P-256\",\"X\":56335038704624734171766820457929516633652997544180595332321831286203018586578,\"Y\":13420952595097616685913582932235044534210414175672093961644149064937854256045&#125;"</span>,</span><br><span class="line">          <span class="string">"sign"</span>: <span class="string">"3045022100a6a57c9fed1a3e3bdef4534959f663cbcc550cff50dc3c4d05e11194f4e8c3e6022034d19caa384760e038e387b27579b6351633bfd447bd21b12673cb4a5e8f663d"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"authRequireSigns"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"publickey"</span>: <span class="string">"&#123;\"Curvname\":\"P-256\",\"X\":56335038704624734171766820457929516633652997544180595332321831286203018586578,\"Y\":13420952595097616685913582932235044534210414175672093961644149064937854256045&#125;"</span>,</span><br><span class="line">          <span class="string">"sign"</span>: <span class="string">"304402201df685c3c74612428d67e4170dbdbbf4961940d3dc3aaa14223b91529f8426010220637ad99977428dcb880826085ce735ca87f7899324f36dddef1af437bbbbca3f"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"receivedTimestamp"</span>: 1634264600642359300,</span><br><span class="line">      <span class="string">"modifyBlock"</span>: &#123;</span><br><span class="line">        <span class="string">"marked"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"effectiveHeight"</span>: 0,</span><br><span class="line">        <span class="string">"effectiveTxid"</span>: <span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"txCount"</span>: 2,</span><br><span class="line">  <span class="string">"merkleTree"</span>: [</span><br><span class="line">    <span class="string">"99533fea585387cb68c860aadef8b2dd45415bd8bf52902280f49ae4ca57c31f"</span>,</span><br><span class="line">    <span class="string">"3e404991033d9defad8f698cbf97310450953e03d5aa7db2b184df0a77185af1"</span>,</span><br><span class="line">    <span class="string">"7d4d95e5815f2a612398c9e79b325dc738e177eac30eadd1627043d76bc2c488"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"inTrunk"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"nextHash"</span>: <span class="string">"e9cac3bbd01ed8854387932bce8803d48ee40c7ed5368c45d2f6c6b9d2210cae"</span>,</span><br><span class="line">  <span class="string">"failedTxs"</span>: null,</span><br><span class="line">  <span class="string">"curTerm"</span>: 0,</span><br><span class="line">  <span class="string">"curBlockNum"</span>: 0,</span><br><span class="line">  <span class="string">"justify"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="区块链浏览器"><a href="#区块链浏览器" class="headerlink" title="区块链浏览器"></a>区块链浏览器</h1><ol><li><p>从github<a href="https://github.com/xuperchain/xuperscan/releases" target="_blank" rel="noopener">链接</a>下载区块链浏览器的后台服务，并进行解压。其中的<code>conf/config.yaml</code>指定的后台服务访问区块链的方式。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">node: <span class="string">"127.0.0.1:37101"</span></span><br><span class="line">maxWatcherNum: 10</span><br><span class="line">sqliteDBPath: <span class="string">"./xindexer.db"</span></span><br><span class="line">bcname: <span class="string">"xuper"</span></span><br><span class="line">listen: <span class="string">":8088"</span></span><br></pre></td></tr></table></figure><p>启动服务<code>nohup bin/xindexer &amp;</code>即可。</p></li><li><p>下载xuperscan源码，启动服务</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/xuperchain/xuperscan.git</span><br><span class="line">cd xuperscan</span><br><span class="line">npm install --registry=https://registry.npmmirror.com</span><br><span class="line">npm run serve</span><br></pre></td></tr></table></figure><blockquote><p>如果git下载源码比较慢，可以使用镜像地址<a href="https://hub.fastgit.org/xuperchain/xuperscan.git。" target="_blank" rel="noopener">https://hub.fastgit.org/xuperchain/xuperscan.git。</a></p></blockquote><p>成功运行后，即可访问<a href="http://localhost:8080，查看区块链浏览器，主界面如下图所示。">http://localhost:8080，查看区块链浏览器，主界面如下图所示。</a></p><p><img src="/b11b91fb/image-20211015105105029.png" alt="image-20211015105105029"></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 超级链 </tag>
            
            <tag> xuperchain </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在超级链上使用和开发智能合约</title>
      <link href="/4505b11e.html"/>
      <url>/4505b11e.html</url>
      
        <content type="html"><![CDATA[<h1 id="智能合约支持"><a href="#智能合约支持" class="headerlink" title="智能合约支持"></a>智能合约支持</h1><h2 id="XVM"><a href="#XVM" class="headerlink" title="XVM"></a>XVM</h2><p>超级链定义了XVM虚拟机为智能合约的运行提供隔离的安全沙箱。</p><ul><li>隔离性，合约运行环境和xchain运行环境互不影响，合约的崩溃不影响xchain。</li><li>确定性，合约可以访问链上资源，但不能访问宿主机资源，保证在确定的输入下有确定的输出</li><li>可停止性，设置资源quota，合约对资源的使用超quota自动停止</li><li>可以统计合约的资源使用情况，如CPU，内存等</li><li>运行速度尽量快。</li></ul><p>在运行过程中，智能合约被编译为WASM字节码在XVM上运行。</p><blockquote><p>WASM是WebAssembly的缩写，是一种运行在浏览器上的字节码，用于解决js在浏览器上的性能不足的问题。 WASM的指令跟机器码很相似，因此很多高级语言如C，C++，Go，rust等都可以编译成WASM字节码从而可以运行在浏览器上。 很多性能相关的模块可以通过用C/C++来编写，再编译成WASM来提高性能，如视频解码器，运行在网页的游戏引擎，React的虚拟Dom渲染算法等。</p><p>WASM本身只是一个指令集，并没有限定运行环境，因此只要实现相应的解释器，WASM也可以运行在非浏览器环境。 xchain的WASM合约正是这样的应用场景，通过用C++，go等高级语言来编写智能合约，再编译成WASM字节码，最后由XVM虚拟机来运行。 XVM虚拟机在这里就提供了一个WASM的运行环境。</p></blockquote><h2 id="智能合约运行模式"><a href="#智能合约运行模式" class="headerlink" title="智能合约运行模式"></a>智能合约运行模式</h2><h3 id="wasm"><a href="#wasm" class="headerlink" title="wasm"></a>wasm</h3><p>C++合约的运行模式，将智能合约通过<code>hub.baidubce.com/xchain/emcc</code>容器来编译成WASM字节码，然后通过直接部署到XVM虚拟机上运行。</p><h3 id="native"><a href="#native" class="headerlink" title="native"></a>native</h3><p>Golang、Java合约的运行模式，将智能合约编译为二进制或者Jar包，直接运行或者在容器容器内运行。</p><h3 id="solidity"><a href="#solidity" class="headerlink" title="solidity"></a>solidity</h3><p>Solidity合约的运行模式，使用EVM模式运行。</p><h1 id="native-GO合约使用"><a href="#native-GO合约使用" class="headerlink" title="native GO合约使用"></a>native GO合约使用</h1><h2 id="示例合约的使用"><a href="#示例合约的使用" class="headerlink" title="示例合约的使用"></a>示例合约的使用</h2><blockquote><p>注意保持GOPATH，建议使用golang 1.13以上版本，启用Go Modules</p></blockquote><ol><li><p>编译</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> core/contractsdk/go/example/counter</span><br><span class="line">$ go build</span><br><span class="line">go: downloading github.com/go-playground/validator/v10 v10.4.1</span><br><span class="line">$ ls</span><br><span class="line">counter  main.go</span><br></pre></td></tr></table></figure></li><li><p>创建合约账户</p><p>超级链中，部署合约必须使用<strong>合约账户</strong>，与普通账户不同，合约账户具备ACL属性，表示多节点签名之和满足阈值后才可成功使用合约账户，类似于fabric中的背书策略。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">$ ./xchain-cli account new --account 1111111111111111 --fee 1000</span><br><span class="line">contract response:</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"pm"</span>: &#123;</span><br><span class="line">                <span class="string">"rule"</span>: 1,</span><br><span class="line">                <span class="string">"acceptValue"</span>: 1.0</span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="string">"aksWeight"</span>: &#123;</span><br><span class="line">                <span class="string">"dpzuVdosQrF2kmzumhVeFQZa1aYcdgFpN"</span>: 1.0</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">The gas you cousume is: 1000</span><br><span class="line">The fee you pay is: 1000</span><br><span class="line">Tx id: 38fee75d1c4b5cf3707a0f77501c5bc24a1384307fbf226aa3cf6b3028b8b02b</span><br><span class="line">account name: XC1111111111111111@xuper</span><br></pre></td></tr></table></figure><blockquote><p>账户的ID为16为全局唯一的数字，账户名格式为 XC+ID+@super</p></blockquote><p>查询账户余额，确保有足够费用来部署智能合约</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./xchain-cli account balance XC1111111111111111@xuper -H 127.0.0.1:37101</span><br><span class="line">0</span><br><span class="line"><span class="comment"># 如果余额不足，需要进行转账</span></span><br><span class="line">$ ./xchain-cli transfer --to  XC1111111111111111@xuper --amount 10000 --keys data/keys/ -H 127.0.0.1:37101</span><br><span class="line">1af4580f6899155f80784db67cf14b01a8cc6a39d00364a8493916500a0eb368</span><br></pre></td></tr></table></figure></li><li><p>部署合约</p><p>使用命令行<strong>在当前节点</strong>部署合约，如果出现如下所示费用不足的情况，可能是<code>--fee</code>选项支付的费用或者合约账号的余额不足以字符。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ ./xchain-cli native deploy --account XC1111111111111111@xuper --fee 15587517 --runtime go -a <span class="string">'&#123;"creator":"XC1111111111111111@xuper"&#125;'</span>   --cname golangcounter ../core/contractsdk/go/example/counter/counter</span><br><span class="line">contract response:</span><br><span class="line">The gas you cousume is: 10870804</span><br><span class="line">The fee you pay is: 15587517</span><br><span class="line">Select utxo error, details:NOT_ENOUGH_UTXO_ERROR</span><br><span class="line"><span class="comment"># 费用不足，按提示设置费用即可</span></span><br><span class="line">$ ./xchain-cli native deploy --account XC1111111111111111@xuper --fee 10870804 --runtime go -a <span class="string">'&#123;"creator":"XC1111111111111111@xuper"&#125;'</span>   --cname golangcounter ../core/contractsdk/go/example/counter/counter</span><br><span class="line">contract response:</span><br><span class="line">The gas you cousume is: 10870804</span><br><span class="line">The fee you pay is: 10870804</span><br><span class="line">Tx id: 9170ce7e03e3bc03881206217d91e79df9b0df1045a94f952b911fe455251cf6</span><br></pre></td></tr></table></figure><blockquote><p>如果xchain.yaml中，配置使用docker容器来运行native合约，则需要提前手动将相关镜像准备好，默认为<code>docker.io/centos:7.5.1804</code>，且docker服务必须在本地运行，以便进行文件传输。</p></blockquote></li><li><p>测试合约功能</p><p>调用合约需要支付费用，如果费用不足，会产生错误提示<code>You need add fee</code>或者<code>NOT_ENOUGH_UTXO_ERROR</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ ./xchain-cli native invoke --method Increase -a <span class="string">'&#123;"key":"test"&#125;'</span> golangcounter --fee 53</span><br><span class="line">contract response: 1</span><br><span class="line">The gas you cousume is: 53</span><br><span class="line">The fee you pay is: 53</span><br><span class="line">Tx id: 2e1bf5763c104db0ae34c7263ad6a18f7180f5b98e479420c32a4566b17497b2</span><br></pre></td></tr></table></figure><p>查询合约不需要支付费用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./xchain-cli native query --method Get -a <span class="string">'&#123;"key":"test"&#125;'</span> golangcounter</span><br><span class="line">contract response: 1</span><br></pre></td></tr></table></figure></li></ol><h2 id="智能合约GO-SDK介绍"><a href="#智能合约GO-SDK介绍" class="headerlink" title="智能合约GO SDK介绍"></a>智能合约GO SDK介绍</h2><p>智能合约的Go SDK在代码路径<code>core/contractsdk/go</code>下，其接口文件为<a href="https://github.com/xuperchain/xuperchain/blob/master/core/contractsdk/go/code/context.go" target="_blank" rel="noopener">core/contractsdk/go/code/context.go</a>：</p><table><thead><tr><th>API</th><th>功能</th></tr></thead><tbody><tr><td>Args() <code>map[string][]byte</code></td><td>获取传入合约的参数表</td></tr><tr><td>Initiator() string</td><td>获取发起此合约调用的账号</td></tr><tr><td>AuthRequire() []string</td><td>获取授权此合约调用的账号</td></tr><tr><td>PutObject(key []byte, value []byte) error</td><td>进行一次写操作</td></tr><tr><td>GetObject(key []byte) ([]byte, error)</td><td>进行一次读操作</td></tr><tr><td>DeleteObject(key []byte) error</td><td>进行一次删除操作</td></tr><tr><td>NewIterator(start, limit []byte) Iterator</td><td>获得遍历合约存储的迭代器</td></tr><tr><td>QueryTx(txid string) (*pb.Transaction, error)</td><td>查询指定id的交易内容</td></tr><tr><td>QueryBlock(blockid string) (*pb.Block, error)</td><td>查询指定id的区块内容</td></tr><tr><td>Transfer(to string, amount *big.Int) error</td><td>进行转账操作</td></tr><tr><td>TransferAmount() (*big.Int, error)</td><td>获取合约调用操作中的转账数额</td></tr><tr><td>Call(module, contract, method string, args … ) (*Response, error)</td><td>调用其他合约</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 超级链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>超级链多节点部署</title>
      <link href="/dd1671c6.html"/>
      <url>/dd1671c6.html</url>
      
        <content type="html"><![CDATA[<h1 id="超级链简介"><a href="#超级链简介" class="headerlink" title="超级链简介"></a>超级链简介</h1><p>超级链是百度开源的联盟链方案，XuperChain是超级链体系下的第一个开源项目，是构建超级联盟网络的底层方案。</p><p>其主要特点是高性能，通过原创的XuperModel模型，真正实现了智能合约的并行执行和验证，通过自研的WASM虚拟机，做到了指令集级别的极致优化。</p><p>在架构方面，其可插拔、插件化的设计使得用户可以方便选择适合自己业务场景的解决方案，通过独有的XuperBridge技术，可插拔多语言虚拟机，从而支持丰富的合约开发语言。</p><p>在网络能力方面，XuperChain具备全球化部署能力，节点通信基于加密的P2P网络，支持广域网超大规模节点，且底层账本支持分叉管理，自动收敛一致性，TDPOS算法确保了大规模节点下的快速共识。在账号安全方面，XuperChain内置了多私钥保护的账号体系，支持权重累计、集合运算等灵活的策略。</p><p><img src="/dd1671c6/arch.png" alt="XuperChain架构"></p><h1 id="准备部署包"><a href="#准备部署包" class="headerlink" title="准备部署包"></a>准备部署包</h1><h2 id="从源码编译"><a href="#从源码编译" class="headerlink" title="从源码编译"></a>从源码编译</h2><ol><li><p>准备依赖</p><p><code>sudo apt-get install make g++ gcc</code></p><p>安装1.11以上的<code>golang</code>，并配置PATH和GOPATH。</p></li><li><p>下载源码，并进行编译</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 如果github访问很慢，可以考虑使用国内镜像地址https://gitee.com/baidu/xuperchain.git</span></span><br><span class="line">git clone https://github.com/xuperchain/xuperchain.git</span><br><span class="line">cd xuperchain</span><br><span class="line">make</span><br></pre></td></tr></table></figure></li><li><p>编译完成后，所有部署所需都在<code>output</code>目录下</p><table><thead><tr><th>目录名</th><th>功能</th></tr></thead><tbody><tr><td>output/</td><td>节点根目录</td></tr><tr><td>├─ conf</td><td>xchain.yaml: xchain服务的配置信息（注意端口冲突） plugins.conf: 插件的配置信息</td></tr><tr><td>├─ data</td><td>数据的存放目录，创世块信息，以及共识和合约的样例</td></tr><tr><td>│ ··· ├─ blockchain</td><td>账本目录</td></tr><tr><td>│ ··· ├─ keys</td><td>此节点的地址，具有全局唯一性</td></tr><tr><td>│ ··· ├─ netkeys</td><td>此节点的网络标识ID，具有全局唯一性</td></tr><tr><td>│ ··· └─ config</td><td>包括创始的共识，初始的资源数，矿工奖励机制等</td></tr><tr><td>├─ logs</td><td>程序日志目录</td></tr><tr><td>├─ plugins</td><td>so扩展的存放目录</td></tr><tr><td>├─ xchain</td><td>xchain服务的二进制文件</td></tr><tr><td>├─ xchain-cli</td><td>xchain客户端工具</td></tr><tr><td>└─ wasm2c</td><td>wasm工具（智能合约会用到）</td></tr><tr><td>└─ xdev</td><td>智能合约编译工具</td></tr><tr><td>└─ xchain-httpgw</td><td>xchain的http restful网关</td></tr></tbody></table></li><li></li></ol><h2 id="直接下载部署包"><a href="#直接下载部署包" class="headerlink" title="直接下载部署包"></a>直接下载部署包</h2><p>从github下载最新版发布包</p><p><a href="https://github.com/xuperchain/xuperchain/releases" target="_blank" rel="noopener">https://github.com/xuperchain/xuperchain/releases</a></p><p>国内可以使用CDN地址</p><p><a href="https://cms-store.bj.bcebos.com/xuperchain-linux-amd64-v3.10.tar.gz" target="_blank" rel="noopener">https://cms-store.bj.bcebos.com/xuperchain-linux-amd64-v3.10.tar.gz</a></p><h1 id="部署多节点"><a href="#部署多节点" class="headerlink" title="部署多节点"></a>部署多节点</h1><blockquote><p>使用默认配置启动多节点网络，</p><ul><li>共识算法为tdpos，在data/config/xuper.json的<code>genesis_consensus</code>中配置</li><li>不启用tls</li><li>启用prometheus监控采集</li></ul></blockquote><h2 id="启动第一个种子节点-bootNode"><a href="#启动第一个种子节点-bootNode" class="headerlink" title="启动第一个种子节点(bootNode)"></a>启动第一个种子节点(bootNode)</h2><p>首先需要启动若干个种子节点，作为超级链节点注册和相互路由的核心节点。种子节点与普通节点主要通过<code>xchain.yaml</code>配置进行区分，示例如下图所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># node config</span></span><br><span class="line"><span class="comment"># 日志配置</span></span><br><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="comment"># 模块名称</span></span><br><span class="line">  <span class="attr">module:</span> <span class="string">xchain</span></span><br><span class="line">  <span class="comment"># 日志目录</span></span><br><span class="line">  <span class="attr">filepath:</span> <span class="string">logs</span></span><br><span class="line">  <span class="comment"># 日志文件名</span></span><br><span class="line">  <span class="attr">filename:</span> <span class="string">xchain</span></span><br><span class="line">  <span class="attr">fmt:</span> <span class="string">logfmt</span></span><br><span class="line">  <span class="comment"># 是否打印命令行工具端口</span></span><br><span class="line">  <span class="attr">console:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 日志等级</span></span><br><span class="line">  <span class="attr">level:</span> <span class="string">info</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># RPC 服务暴露的端口</span></span><br><span class="line"><span class="attr">tcpServer:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">:37101</span></span><br><span class="line">  <span class="comment"># prometheus监控指标端口, 为空的话就不启动</span></span><br><span class="line">  <span class="attr">metricPort:</span> <span class="string">:37200</span></span><br><span class="line">  <span class="attr">tls:</span> <span class="literal">false</span></span><br><span class="line">  <span class="comment">#cachePeriod: 2</span></span><br><span class="line">  <span class="comment"># 最大接受数据包长度</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 区块链节点配置</span></span><br><span class="line"><span class="attr">p2p:</span></span><br><span class="line">  <span class="comment"># module is the name of p2p module plugin, value is [p2pv2/p2pv1], default is p2pv2</span></span><br><span class="line">  <span class="attr">module:</span> <span class="string">p2pv2</span></span><br><span class="line">  <span class="attr">port:</span> <span class="number">47101</span></span><br><span class="line">  <span class="comment">#isTls: true</span></span><br><span class="line">  <span class="comment">#certPath: ./data/tls/1</span></span><br><span class="line">  <span class="comment">#serviceName: saas_test.server.com</span></span><br><span class="line">  <span class="comment">#bootNodes:</span></span><br><span class="line">  <span class="comment">#  - "/ip4/&lt;ip&gt;/tcp/&lt;port&gt;/p2p/&lt;node_hash&gt;" for p2pv2 or - "&lt;ip&gt;:&lt;port&gt;" for p2pv1</span></span><br><span class="line">  <span class="comment">#staticNodes:</span></span><br><span class="line">  <span class="comment">#  xuper:</span></span><br><span class="line">  <span class="comment">#    - "127.0.0.1:47102"</span></span><br><span class="line"></span><br><span class="line"><span class="attr">miner:</span></span><br><span class="line">  <span class="comment"># 密钥存储路径</span></span><br><span class="line">  <span class="attr">keypath:</span> <span class="string">./data/keys</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 数据存储路径</span></span><br><span class="line"><span class="attr">datapath:</span> <span class="string">./data/blockchain</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 多盘存储的路径</span></span><br><span class="line"><span class="comment">#datapathOthers:</span></span><br><span class="line"><span class="comment">#    - /ssd1/blockchain</span></span><br><span class="line"><span class="comment">#    - /ssd2/blockchain</span></span><br><span class="line"><span class="comment">#    - /ssd3/blockchain</span></span><br><span class="line"></span><br><span class="line"><span class="attr">utxo:</span></span><br><span class="line">  <span class="comment"># utxo的内存LRUCache大小，表示内存中最多缓存多少个UtxoItem</span></span><br><span class="line">  <span class="attr">cachesize:</span> <span class="number">2000000</span></span><br><span class="line">  <span class="comment"># GenerateTx的临时锁定期限，默认是60秒</span></span><br><span class="line">  <span class="attr">tmplockSeconds:</span> <span class="number">60</span></span><br><span class="line">  <span class="comment">#单个块的合约执行的总时间(单位ms)</span></span><br><span class="line">  <span class="attr">contractExecutionTime:</span> <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="attr">kernel:</span></span><br><span class="line">  <span class="comment"># minNewChainAmount 设置创建平行链时最少要转多少钱到同链名address</span></span><br><span class="line">  <span class="attr">minNewChainAmount:</span> <span class="string">"100"</span></span><br><span class="line">  <span class="attr">newChainWhiteList:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">dpzuVdosQrF2kmzumhVeFQZa1aYcdgFpN:</span> <span class="literal">true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 合约通用配置</span></span><br><span class="line"><span class="attr">contract:</span></span><br><span class="line">  <span class="attr">enableUpgrade:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># wasm合约配置</span></span><br><span class="line"><span class="attr">wasm:</span></span><br><span class="line">  <span class="attr">driver:</span> <span class="string">"xvm"</span></span><br><span class="line">  <span class="attr">xvm:</span></span><br><span class="line">    <span class="attr">optLevel:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># evm合约配置</span></span><br><span class="line"><span class="attr">evm:</span></span><br><span class="line">  <span class="attr">driver:</span> <span class="string">"evm"</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 管理native合约的配置</span></span><br><span class="line"><span class="attr">native:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># docker相关配置</span></span><br><span class="line">  <span class="attr">docker:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">    <span class="comment"># 合约运行的镜像名字</span></span><br><span class="line">    <span class="attr">imageName:</span> <span class="string">"docker.io/centos:7.5.1804"</span></span><br><span class="line">    <span class="comment"># cpu核数限制，可以为小数</span></span><br><span class="line">    <span class="attr">cpus:</span> <span class="number">1</span></span><br><span class="line">    <span class="comment"># 内存大小限制</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">"1G"</span></span><br><span class="line"></span><br><span class="line">  <span class="comment"># 停止合约的等待秒数，超时强制杀死</span></span><br><span class="line">  <span class="attr">stopTimeout:</span> <span class="number">3</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 插件配置文件路径</span></span><br><span class="line"><span class="attr">pluginConfPath:</span> <span class="string">"./conf/plugins.conf"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否启用p2p核心节点直连</span></span><br><span class="line"><span class="attr">coreConnection:</span> <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="attr">txidCacheExpiredTime:</span> <span class="string">"10s"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 是否压缩交易/区块</span></span><br><span class="line"><span class="comment">#enableCompress: true</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 块广播模式</span></span><br><span class="line"><span class="attr">blockBroadcaseMode:</span> <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 剪枝配置</span></span><br><span class="line"><span class="attr">prune:</span></span><br><span class="line">  <span class="attr">switch:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">bcname:</span> <span class="string">"xuper"</span></span><br><span class="line">  <span class="attr">targetBlockid:</span> <span class="string">"xxx"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 背书服务相关配置</span></span><br><span class="line"><span class="attr">xendorser:</span></span><br><span class="line">  <span class="comment"># 是否开启默认的XEndorser背书服务</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">false</span></span><br><span class="line">  <span class="attr">module:</span> <span class="string">"default"</span></span><br><span class="line">  <span class="comment">#confPath: "./conf/xendorser.yaml"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 云存储配置(AWS S3接口兼容)</span></span><br><span class="line"><span class="attr">cloudStorage:</span></span><br><span class="line">  <span class="attr">bucket:</span> <span class="string">"xchain-cloud-test"</span></span><br><span class="line">  <span class="attr">path:</span> <span class="string">"node1"</span></span><br><span class="line">  <span class="attr">ak:</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">sk:</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">region:</span> <span class="string">"bj"</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">"s3.bj.bcebos.com"</span></span><br><span class="line">  <span class="attr">localCacheDir:</span> <span class="string">"./data/cache"</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 事件订阅相关配置</span></span><br><span class="line"><span class="attr">event:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="comment"># 每个ip的最大订阅连接数，为0的话不限连接数</span></span><br><span class="line">  <span class="attr">addrMaxConn:</span> <span class="number">5</span></span><br></pre></td></tr></table></figure><p>将编译或者下载的部署包，放到目录<code>n1</code>中，在此目录中，依次执行下列命令准备创世区块和启动服务。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./xchain-cli createChain</span><br><span class="line">nohup ./xchain &amp;</span><br></pre></td></tr></table></figure><p><img src="/dd1671c6/image-20210419154745101.png" alt="image-20210419154745101"></p><p><img src="/dd1671c6/image-20210419154854659.png" alt="image-20210419154854659"></p><p><strong>注意</strong>，使用下列命令，获取第一个节点的地址，用于启动其他节点。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./xchain-cli netURL get -H 127.0.0.1:37101</span><br><span class="line"><span class="string">"/ip4/127.0.0.1/tcp/47101/p2p/QmVxeNubpg1ZQjQT8W5yZC9fD7ZB1ViArwvyGUB53sqf8e"</span></span><br></pre></td></tr></table></figure><p>其他节点使用127.0.0.1或者其他可达地址访问。<em>不要直接使用命令行的输出</em></p><h2 id="启动其他种子节点"><a href="#启动其他种子节点" class="headerlink" title="启动其他种子节点"></a>启动其他种子节点</h2><p>在其他节点的<code>config/xchain.yaml</code>中，修改<code>tcpServer.port</code>和<code>p2p.port</code>，注意端口冲突。在bootNodes中，增加第一个种子节点的p2p地址，修改部分如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RPC 服务暴露的端口</span></span><br><span class="line"><span class="attr">tcpServer:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">:37102</span></span><br><span class="line">  <span class="comment"># prometheus监控指标端口, 为空的话就不启动</span></span><br><span class="line">  <span class="attr">metricPort:</span> <span class="string">:37300</span></span><br><span class="line"><span class="attr">p2p:</span></span><br><span class="line">    <span class="attr">module:</span> <span class="string">p2pv2</span></span><br><span class="line">    <span class="string">//</span> <span class="string">port是节点p2p网络监听的默认端口，如果在一台机器上部署注意端口配置不要冲突，</span></span><br><span class="line">    <span class="string">//</span> <span class="string">node1配置的是47101，node2和node3可以分别设置为47102和47103</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">47102</span></span><br><span class="line">    <span class="string">//</span> <span class="string">节点加入网络所连接的种子节点的链接信息，</span></span><br><span class="line">    <span class="attr">bootNodes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/ip4/127.0.0.1/tcp/47101/p2p/QmVxeNubpg1ZQjQT8W5yZC9fD7ZB1ViArwvyGUB53sqf8e"</span></span><br></pre></td></tr></table></figure><p>执行下列命令，为节点准备新的身份，并启动节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf ./data/&#123;blockchain,keys,netkeys&#125;</span><br><span class="line">$ ./xchain-cli account newkeys -f</span><br><span class="line">$ ./xchain-cli netURL gen</span><br><span class="line">$ ./xchain-cli createChain</span><br><span class="line">$ nohup ./xchain &amp;</span><br></pre></td></tr></table></figure><p>使用下列命令，来获取这个种子节点的地址</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./xchain-cli netURL get -H 192.168.137.1:37102</span><br><span class="line"><span class="string">"/ip4/127.0.0.1/tcp/47102/p2p/QmV7UnFbqxKMhuQVTSNDKr3FCCaNqfUk5nnLU86cqYiVdw"</span></span><br></pre></td></tr></table></figure><h2 id="启动其他节点"><a href="#启动其他节点" class="headerlink" title="启动其他节点"></a>启动其他节点</h2><p>在其他普通节点的<code>config/xchain.yaml</code>中，修改<code>tcpServer.port</code>和<code>p2p.port</code>，注意端口冲突。在bootNodes中，增加第一个种子节点的p2p地址，修改部分如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># RPC 服务暴露的端口</span></span><br><span class="line"><span class="attr">tcpServer:</span></span><br><span class="line">  <span class="attr">port:</span> <span class="string">:37102</span></span><br><span class="line">  <span class="comment"># prometheus监控指标端口, 为空的话就不启动</span></span><br><span class="line">  <span class="attr">metricPort:</span> <span class="string">:37300</span></span><br><span class="line"><span class="attr">p2p:</span></span><br><span class="line">    <span class="attr">module:</span> <span class="string">p2pv2</span></span><br><span class="line">    <span class="string">//</span> <span class="string">port是节点p2p网络监听的默认端口，如果在一台机器上部署注意端口配置不要冲突，</span></span><br><span class="line">    <span class="string">//</span> <span class="string">node1配置的是47101，node2和node3可以分别设置为47102和47103</span></span><br><span class="line">    <span class="attr">port:</span> <span class="number">47102</span></span><br><span class="line">    <span class="string">//</span> <span class="string">节点加入网络所连接的种子节点的链接信息，</span></span><br><span class="line">    <span class="attr">bootNodes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/ip4/127.0.0.1/tcp/47101/p2p/QmVxeNubpg1ZQjQT8W5yZC9fD7ZB1ViArwvyGUB53sqf8e"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/ip4/127.0.0.1/tcp/47102/p2p/QmV7UnFbqxKMhuQVTSNDKr3FCCaNqfUk5nnLU86cqYiVdw"</span></span><br></pre></td></tr></table></figure><p>执行下列命令，为节点准备新的身份，并启动节点</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ rm -rf ./data/&#123;blockchain,keys,netkeys&#125;</span><br><span class="line">$ ./xchain-cli account newkeys -f</span><br><span class="line">$ ./xchain-cli netURL gen</span><br><span class="line">$ ./xchain-cli createChain</span><br><span class="line">$ nohup ./xchain &amp;</span><br></pre></td></tr></table></figure><h2 id="检查节点状态"><a href="#检查节点状态" class="headerlink" title="检查节点状态"></a>检查节点状态</h2><p>使用<code>xchain-cli</code>来检查三个节点的账本高度，一致则表示网络建立成功。</p><blockquote><p>-H 选项设置目标节点地址</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="keyword">for</span> i <span class="keyword">in</span> 1 2 3;<span class="keyword">do</span> <span class="built_in">echo</span> 127.0.0.1:3710<span class="variable">$i</span>;./xchain-cli status -H 127.0.0.1:3710<span class="variable">$i</span> |grep -i trunkHeight; <span class="keyword">done</span></span><br><span class="line">127.0.0.1:37101</span><br><span class="line">        <span class="string">"trunkHeight"</span>: 2097</span><br><span class="line">127.0.0.1:37102</span><br><span class="line">        <span class="string">"trunkHeight"</span>: 2097</span><br><span class="line">127.0.0.1:37103</span><br><span class="line">        <span class="string">"trunkHeight"</span>: 2097</span><br></pre></td></tr></table></figure><h1 id="测试网络功能"><a href="#测试网络功能" class="headerlink" title="测试网络功能"></a>测试网络功能</h1><h2 id="内置转账"><a href="#内置转账" class="headerlink" title="内置转账"></a>内置转账</h2><ol><li>创建一个普通账户</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建普通用户, 包含地址，公钥，私钥</span></span><br><span class="line">./xchain-cli account newkeys --output data/bob</span><br><span class="line"><span class="comment"># 在bob目录下会看到文件address，publickey，privatekey生成</span></span><br></pre></td></tr></table></figure><p><img src="/dd1671c6/image-20210419171014573.png" alt="image-20210419171014573"></p><ol start="2"><li>查询账户余额</li></ol><p>向网络请求查询账户余额，返回结果为<code>keys</code>参数指向的私钥地址持有的余额。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./xchain-cli account balance --keys data/keys -H 127.0.0.1:37101</span><br></pre></td></tr></table></figure><p><img src="/dd1671c6/image-20210419171119834.png" alt="image-20210419171119834"></p><ol start="3"><li>转账</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">./xchain-cli transfer --to ZsrBwh8PJtDKAQpq5GwqscKgb5ejB18y7 --amount 10 --keys data/keys/ -H 127.0.0.1:37101</span><br><span class="line"><span class="comment"># 地址可以通过查看给bob分配的地址</span></span><br></pre></td></tr></table></figure><p><img src="/dd1671c6/image-20210419171318834.png" alt="image-20210419171318834"></p><ol start="4"><li>检查用户<code>bob</code>余额</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ./xchain-cli account balance --keys data/bob -H 127.0.0.1:37101</span><br><span class="line">10</span><br></pre></td></tr></table></figure><ol start="5"><li>查询交易和区块的信息</li></ol><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 可查询上一步生成的txid的交易信息</span></span><br><span class="line">$ ./xchain-cli tx query 416130c2a3b1f4ba67e1b32e7ad11b59f4884b2d0a8f6d1fbe851ed14c912e08 -H 127.0.0.1:37101</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"txid"</span>: <span class="string">"416130c2a3b1f4ba67e1b32e7ad11b59f4884b2d0a8f6d1fbe851ed14c912e08"</span>,</span><br><span class="line">  <span class="string">"blockid"</span>: <span class="string">"597b1c1bba077a0c0ef09e75f5526242becde19fd0f9086f3420a46471503605"</span>,</span><br><span class="line">  <span class="string">"txInputs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"refTxid"</span>: <span class="string">"66869e420ae3573b19b3326cd852a7a3074d222993c322042e0bf94a4cab862f"</span>,</span><br><span class="line">      <span class="string">"refOffset"</span>: 0,</span><br><span class="line">      <span class="string">"fromAddr"</span>: <span class="string">"dpzuVdosQrF2kmzumhVeFQZa1aYcdgFpN"</span>,</span><br><span class="line">      <span class="string">"amount"</span>: <span class="string">"1000000"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"txOutputs"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"amount"</span>: <span class="string">"10"</span>,</span><br><span class="line">      <span class="string">"toAddr"</span>: <span class="string">"ZsrBwh8PJtDKAQpq5GwqscKgb5ejB18y7"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"amount"</span>: <span class="string">"999990"</span>,</span><br><span class="line">      <span class="string">"toAddr"</span>: <span class="string">"dpzuVdosQrF2kmzumhVeFQZa1aYcdgFpN"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"desc"</span>: <span class="string">"transfer from console"</span>,</span><br><span class="line">  <span class="string">"nonce"</span>: <span class="string">"161882353298498081"</span>,</span><br><span class="line">  <span class="string">"timestamp"</span>: 1618823532402329500,</span><br><span class="line">  <span class="string">"version"</span>: 1,</span><br><span class="line">  <span class="string">"autogen"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"coinbase"</span>: <span class="literal">false</span>,</span><br><span class="line">  <span class="string">"txInputsExt"</span>: null,</span><br><span class="line">  <span class="string">"txOutputsExt"</span>: null,</span><br><span class="line">  <span class="string">"contractRequests"</span>: null,</span><br><span class="line">  <span class="string">"initiator"</span>: <span class="string">"dpzuVdosQrF2kmzumhVeFQZa1aYcdgFpN"</span>,</span><br><span class="line">  <span class="string">"authRequire"</span>: [</span><br><span class="line">    <span class="string">"dpzuVdosQrF2kmzumhVeFQZa1aYcdgFpN"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"initiatorSigns"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"publickey"</span>: <span class="string">"&#123;\"Curvname\":\"P-256\",\"X\":74695617477160058757747208220371236837474210247114418775262229497812962582435,\"Y\":51348715319124770392993866417088542497927816017012182211244120852620959209571&#125;"</span>,</span><br><span class="line">      <span class="string">"sign"</span>: <span class="string">"3045022036fe5b48143346800a5b90ba6f24c9a08ff4272501520dc88b22a5b08d8f300e022100fbe0d4f1ca47fcfc78b6fa600452eea88720f545f55a4a9c7fb17d05afbd93c1"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"authRequireSigns"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"publickey"</span>: <span class="string">"&#123;\"Curvname\":\"P-256\",\"X\":74695617477160058757747208220371236837474210247114418775262229497812962582435,\"Y\":51348715319124770392993866417088542497927816017012182211244120852620959209571&#125;"</span>,</span><br><span class="line">      <span class="string">"sign"</span>: <span class="string">"3045022057d0efcf7642d65949bd9373a7fac0743f34a84ca67c3fbc7a4b8e38204888bf022100c85b48e03ad93b57abdf3f322a70b211982215c7121ae5ea30d210390f54c131"</span></span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"receivedTimestamp"</span>: 1618823532412563300,</span><br><span class="line">  <span class="string">"modifyBlock"</span>: &#123;</span><br><span class="line">    <span class="string">"marked"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="string">"effectiveHeight"</span>: 0,</span><br><span class="line">    <span class="string">"effectiveTxid"</span>: <span class="string">""</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 查询交易对应的区块信息</span></span><br><span class="line">$ ./xchain-cli tx query 597b1c1bba077a0c0ef09e75f5526242becde19fd0f9086f3420a46471503605 -H 127.0.0.1:37101</span><br><span class="line">&#123;</span><br><span class="line">  <span class="string">"version"</span>: 1,</span><br><span class="line">  <span class="string">"blockid"</span>: <span class="string">"597b1c1bba077a0c0ef09e75f5526242becde19fd0f9086f3420a46471503605"</span>,</span><br><span class="line">  <span class="string">"preHash"</span>: <span class="string">"6a5e8a5af85cbddc58170e9d786efc47c2a705e4b81dcff69331f329062a6177"</span>,</span><br><span class="line">  <span class="string">"proposer"</span>: <span class="string">"dpzuVdosQrF2kmzumhVeFQZa1aYcdgFpN"</span>,</span><br><span class="line">  <span class="string">"sign"</span>: <span class="string">"3045022100f429488187cae1a921d241e1d39cf505f854f1d8148e4ece901d381961ef24fd0220209fddc3aec6fb670d0e1c1bce497ed1889f0b7e5139be584bfea46481d44c1e"</span>,</span><br><span class="line">  <span class="string">"pubkey"</span>: <span class="string">"&#123;\"Curvname\":\"P-256\",\"X\":74695617477160058757747208220371236837474210247114418775262229497812962582435,\"Y\":51348715319124770392993866417088542497927816017012182211244120852620959209571&#125;"</span>,</span><br><span class="line">  <span class="string">"merkleRoot"</span>: <span class="string">"7ab7a4688b09f759e58aa1990a991c767702fcb993159f62a925c4c3dbe63ec2"</span>,</span><br><span class="line">  <span class="string">"height"</span>: 1497,</span><br><span class="line">  <span class="string">"timestamp"</span>: 1618823535000440400,</span><br><span class="line">  <span class="string">"transactions"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"txid"</span>: <span class="string">"416130c2a3b1f4ba67e1b32e7ad11b59f4884b2d0a8f6d1fbe851ed14c912e08"</span>,</span><br><span class="line">      <span class="string">"blockid"</span>: <span class="string">"597b1c1bba077a0c0ef09e75f5526242becde19fd0f9086f3420a46471503605"</span>,</span><br><span class="line">      <span class="string">"txInputs"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"refTxid"</span>: <span class="string">"66869e420ae3573b19b3326cd852a7a3074d222993c322042e0bf94a4cab862f"</span>,</span><br><span class="line">          <span class="string">"refOffset"</span>: 0,</span><br><span class="line">          <span class="string">"fromAddr"</span>: <span class="string">"dpzuVdosQrF2kmzumhVeFQZa1aYcdgFpN"</span>,</span><br><span class="line">          <span class="string">"amount"</span>: <span class="string">"1000000"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"txOutputs"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"amount"</span>: <span class="string">"10"</span>,</span><br><span class="line">          <span class="string">"toAddr"</span>: <span class="string">"ZsrBwh8PJtDKAQpq5GwqscKgb5ejB18y7"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"amount"</span>: <span class="string">"999990"</span>,</span><br><span class="line">          <span class="string">"toAddr"</span>: <span class="string">"dpzuVdosQrF2kmzumhVeFQZa1aYcdgFpN"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"desc"</span>: <span class="string">"transfer from console"</span>,</span><br><span class="line">      <span class="string">"nonce"</span>: <span class="string">"161882353298498081"</span>,</span><br><span class="line">      <span class="string">"timestamp"</span>: 1618823532402329500,</span><br><span class="line">      <span class="string">"version"</span>: 1,</span><br><span class="line">      <span class="string">"autogen"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"coinbase"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"txInputsExt"</span>: null,</span><br><span class="line">      <span class="string">"txOutputsExt"</span>: null,</span><br><span class="line">      <span class="string">"contractRequests"</span>: null,</span><br><span class="line">      <span class="string">"initiator"</span>: <span class="string">"dpzuVdosQrF2kmzumhVeFQZa1aYcdgFpN"</span>,</span><br><span class="line">      <span class="string">"authRequire"</span>: [</span><br><span class="line">        <span class="string">"dpzuVdosQrF2kmzumhVeFQZa1aYcdgFpN"</span></span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"initiatorSigns"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"publickey"</span>: <span class="string">"&#123;\"Curvname\":\"P-256\",\"X\":74695617477160058757747208220371236837474210247114418775262229497812962582435,\"Y\":51348715319124770392993866417088542497927816017012182211244120852620959209571&#125;"</span>,</span><br><span class="line">          <span class="string">"sign"</span>: <span class="string">"3045022036fe5b48143346800a5b90ba6f24c9a08ff4272501520dc88b22a5b08d8f300e022100fbe0d4f1ca47fcfc78b6fa600452eea88720f545f55a4a9c7fb17d05afbd93c1"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"authRequireSigns"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"publickey"</span>: <span class="string">"&#123;\"Curvname\":\"P-256\",\"X\":74695617477160058757747208220371236837474210247114418775262229497812962582435,\"Y\":51348715319124770392993866417088542497927816017012182211244120852620959209571&#125;"</span>,</span><br><span class="line">          <span class="string">"sign"</span>: <span class="string">"3045022057d0efcf7642d65949bd9373a7fac0743f34a84ca67c3fbc7a4b8e38204888bf022100c85b48e03ad93b57abdf3f322a70b211982215c7121ae5ea30d210390f54c131"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"receivedTimestamp"</span>: 1618823532412563300,</span><br><span class="line">      <span class="string">"modifyBlock"</span>: &#123;</span><br><span class="line">        <span class="string">"marked"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"effectiveHeight"</span>: 0,</span><br><span class="line">        <span class="string">"effectiveTxid"</span>: <span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"txid"</span>: <span class="string">"8af509d52ac61485ac064e2aa8c42bfd86a3f7b6a1ac6f966c280bad5c730998"</span>,</span><br><span class="line">      <span class="string">"blockid"</span>: <span class="string">"597b1c1bba077a0c0ef09e75f5526242becde19fd0f9086f3420a46471503605"</span>,</span><br><span class="line">      <span class="string">"txInputs"</span>: null,</span><br><span class="line">      <span class="string">"txOutputs"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">          <span class="string">"amount"</span>: <span class="string">"1000000"</span>,</span><br><span class="line">          <span class="string">"toAddr"</span>: <span class="string">"dpzuVdosQrF2kmzumhVeFQZa1aYcdgFpN"</span></span><br><span class="line">        &#125;</span><br><span class="line">      ],</span><br><span class="line">      <span class="string">"desc"</span>: <span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"nonce"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"timestamp"</span>: 1618823535001215300,</span><br><span class="line">      <span class="string">"version"</span>: 1,</span><br><span class="line">      <span class="string">"autogen"</span>: <span class="literal">false</span>,</span><br><span class="line">      <span class="string">"coinbase"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"txInputsExt"</span>: null,</span><br><span class="line">      <span class="string">"txOutputsExt"</span>: null,</span><br><span class="line">      <span class="string">"contractRequests"</span>: null,</span><br><span class="line">      <span class="string">"initiator"</span>: <span class="string">""</span>,</span><br><span class="line">      <span class="string">"authRequire"</span>: null,</span><br><span class="line">      <span class="string">"initiatorSigns"</span>: null,</span><br><span class="line">      <span class="string">"authRequireSigns"</span>: null,</span><br><span class="line">      <span class="string">"receivedTimestamp"</span>: 0,</span><br><span class="line">      <span class="string">"modifyBlock"</span>: &#123;</span><br><span class="line">        <span class="string">"marked"</span>: <span class="literal">false</span>,</span><br><span class="line">        <span class="string">"effectiveHeight"</span>: 0,</span><br><span class="line">        <span class="string">"effectiveTxid"</span>: <span class="string">""</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"txCount"</span>: 2,</span><br><span class="line">  <span class="string">"merkleTree"</span>: [</span><br><span class="line">    <span class="string">"416130c2a3b1f4ba67e1b32e7ad11b59f4884b2d0a8f6d1fbe851ed14c912e08"</span>,</span><br><span class="line">    <span class="string">"8af509d52ac61485ac064e2aa8c42bfd86a3f7b6a1ac6f966c280bad5c730998"</span>,</span><br><span class="line">    <span class="string">"7ab7a4688b09f759e58aa1990a991c767702fcb993159f62a925c4c3dbe63ec2"</span></span><br><span class="line">  ],</span><br><span class="line">  <span class="string">"inTrunk"</span>: <span class="literal">true</span>,</span><br><span class="line">  <span class="string">"nextHash"</span>: <span class="string">"8ef88b5c83870be994ed9a7abdcc029624e34e1adfe917011c1a98e1b06c0b9f"</span>,</span><br><span class="line">  <span class="string">"failedTxs"</span>: null,</span><br><span class="line">  <span class="string">"curTerm"</span>: 949236,</span><br><span class="line">  <span class="string">"curBlockNum"</span>: 4,</span><br><span class="line">  <span class="string">"justify"</span>: &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="TODO"><a href="#TODO" class="headerlink" title="TODO"></a>TODO</h1><ul><li><a href="./4505b11e.html">智能合约的使用</a></li><li>启用TLS配置多节点网络</li><li>使用POW共识部署网络</li><li>使用XPOA共识部署网络</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 区块链 </tag>
            
            <tag> 超级链 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>WSL命令行开发环境设置</title>
      <link href="/ea931d49.html"/>
      <url>/ea931d49.html</url>
      
        <content type="html"><![CDATA[<h1 id="启用WSL"><a href="#启用WSL" class="headerlink" title="启用WSL"></a>启用WSL</h1><p>在开始菜单搜索”启用或关闭Windows功能“，找到“适用于Linux的Windows子系统”，勾选即可。</p><p><img src="/ea931d49/image-20210401105053852.png" alt="image-20210401105053852"></p><p>操作系统会自动安装更新，并且提示重启操作系统，重启即可。</p><h1 id="安装Windows-Terminal"><a href="#安装Windows-Terminal" class="headerlink" title="安装Windows Terminal"></a>安装Windows Terminal</h1><p>在Microsoft  Store中，搜索Windows Terminal即可，它是目前Windows上最方便实用的命令行工具。并且Windows Terminal会自动创建 WSL 链接，可以很方便地切换，安装即可。</p><h1 id="使用LxRunOffline安装发行版"><a href="#使用LxRunOffline安装发行版" class="headerlink" title="使用LxRunOffline安装发行版"></a>使用LxRunOffline安装发行版</h1><p>在Microsoft Store中，直接安装发行版，会安装到系统盘下，很容易浪费宝贵的系统盘空间。<a href="https://github.com/DDoSolitary/LxRunOffline/releases" target="_blank" rel="noopener">LxRunOffline</a>支持在任意目录安装发行版，并对其进行备份、转移等各种便捷操作。下载后，可以直接绿色使用，在其目录下执行命令行即可，可用命令行选项如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">Supported actions are:</span><br><span class="line">    l, list            List all installed distributions.</span><br><span class="line">    gd, get-default    Get the default distribution, which is used by bash.exe.</span><br><span class="line">    sd, set-default    Set the default distribution, which is used by bash.exe.</span><br><span class="line">    i, install         Install a new distribution.</span><br><span class="line">    ui, uninstall      Uninstall a distribution.</span><br><span class="line">    rg, register       Register an existing installation directory.</span><br><span class="line">    ur, unregister     Unregister a distribution but not delete the installation directory.</span><br><span class="line">    m, move            Move a distribution to a new directory.</span><br><span class="line">    d, duplicate       Duplicate an existing distribution in a new directory.</span><br><span class="line">    e, export          Export a distribution's filesystem to a .tar.gz file, which can be imported by the "install" command.</span><br><span class="line">    r, run             Run a command in a distribution.</span><br><span class="line">    di, get-dir        Get the installation directory of a distribution.</span><br><span class="line">    gv, get-version    Get the filesystem version of a distribution.</span><br><span class="line">    ge, get-env        Get the default environment variables of a distribution.</span><br><span class="line">    se, set-env        Set the default environment variables of a distribution.</span><br><span class="line">    ae, add-env        Add to the default environment variables of a distribution.</span><br><span class="line">    re, remove-env     Remove from the default environment variables of a distribution.</span><br><span class="line">    gu, get-uid        Get the UID of the default user of a distribution.</span><br><span class="line">    su, set-uid        Set the UID of the default user of a distribution.</span><br><span class="line">    gk, get-kernelcmd  Get the default kernel command line of a distribution.</span><br><span class="line">    sk, set-kernelcmd  Set the default kernel command line of a distribution.</span><br><span class="line">    gf, get-flags      Get some flags of a distribution. See https://docs.microsoft.com/en-us/previous-versions/windows/desktop/api/wslapi/ne-wslapi-wsl_distribution_flags for details.</span><br><span class="line">    sf, set-flags      Set some flags of a distribution. See https://docs.microsoft.com/en-us/previous-versions/windows/desktop/api/wslapi/ne-wslapi-wsl_distribution_flags for details.</span><br><span class="line">    s, shortcut        Create a shortcut to launch a distribution.</span><br><span class="line">    ec, export-config  Export configuration of a distribution to an XML file.</span><br><span class="line">    ic, import-config  Import configuration of a distribution from an XML file.</span><br><span class="line">    sm, summary        Get general information of a distribution.</span><br><span class="line">    version            Get version information about this LxRunOffline.exe.</span><br></pre></td></tr></table></figure><h2 id="安装发行版"><a href="#安装发行版" class="headerlink" title="安装发行版"></a>安装发行版</h2><p>从<a href="https://docs.microsoft.com/zh-cn/windows/wsl/install-manual" target="_blank" rel="noopener">微软官方网站</a>，下载想要使用的发行版，以 Ubuntu 18.04 为例，其下载地址为<code>https://aka.ms/wsl-ubuntu-1804</code>，下载完成后，将其后缀文件名修改为zip，使用解压软件从中提取 <code>install.tar.gz</code>，使用 下列命令安装即可：</p><p><code>./LxRunOffline.exe i -n &lt;WSL名称&gt; -d &lt;安装路径&gt; -f &lt;安装包路径&gt;.tar.gz</code></p><blockquote><p>使用<code>-s</code>选项，会自动创建一个桌面快捷方式。</p></blockquote><p>微软官方商店提供了Ubuntu、Debian、Fedora、SUSE等操作系统，如果想要尝鲜Arch系的发行版，可以使用社区打包好的版本<a href="https://github.com/yuk7/ArchWSL/releases" target="_blank" rel="noopener">ArchWSL</a>，下载好最新版本后，将<code>Arch.zip</code>解压到任意可读写的目录，执行其中的<code>Arch.exe</code>即可将一个发行版安装到当前目录，使用更加方便。</p><h2 id="配置发行版"><a href="#配置发行版" class="headerlink" title="配置发行版"></a>配置发行版</h2><h3 id="配置Windows-Terminal的WSL外观"><a href="#配置Windows-Terminal的WSL外观" class="headerlink" title="配置Windows Terminal的WSL外观"></a>配置Windows Terminal的WSL外观</h3><p>安装好WSL发行版后，Windows Terminal会自动为其添加一个快捷链接进行切换，如下图所示。</p><p><img src="/ea931d49/image-20210401111326172.png" alt="image-20210401111326172"></p><p>默认图标不是很美观，可以通过<code>设置</code>调整其配置项，调整WSL发行版对应配置如下，所有配置项可以参考<a href>链接</a>：</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This file was initially generated by Windows Terminal 1.0.1811.0</span></span><br><span class="line"><span class="comment">// It should still be usable in newer versions, but newer versions might have additional</span></span><br><span class="line"><span class="comment">// settings, help text, or changes that you will not see unless you clear this file</span></span><br><span class="line"><span class="comment">// and let us generate a new one for you.</span></span><br><span class="line"><span class="comment">// To view the default settings, hold "alt" while clicking on the "Settings" button.</span></span><br><span class="line"><span class="comment">// For documentation on these settings, see: https://aka.ms/terminal-documentation</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="attr">"$schema"</span>: <span class="string">"https://aka.ms/terminal-profiles-schema"</span>,</span><br><span class="line">    <span class="attr">"defaultProfile"</span>: <span class="string">"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;"</span>,</span><br><span class="line">    <span class="comment">// You can add more global application settings here.</span></span><br><span class="line">    <span class="comment">// To learn more about global settings, visit https://aka.ms/terminal-global-settings</span></span><br><span class="line">    <span class="comment">// If enabled, selections are automatically copied to your clipboard.</span></span><br><span class="line">    <span class="attr">"copyOnSelect"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// If enabled, formatted data is also copied to your clipboard</span></span><br><span class="line">    <span class="attr">"copyFormatting"</span>: <span class="literal">false</span>,</span><br><span class="line">    <span class="comment">// A profile specifies a command to execute paired with information about how it should look and feel.</span></span><br><span class="line">    <span class="comment">// Each one of them will appear in the 'New Tab' dropdown,</span></span><br><span class="line">    <span class="comment">//   and can be invoked from the commandline with `wt.exe -p xxx`</span></span><br><span class="line">    <span class="comment">// To learn more about profiles, visit https://aka.ms/terminal-profile-settings</span></span><br><span class="line">    <span class="attr">"profiles"</span>: &#123;</span><br><span class="line">        <span class="attr">"defaults"</span>: &#123;</span><br><span class="line">            <span class="comment">// Put settings here that you want to apply to all profiles.</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">"list"</span>: [</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the powershell.exe profile.</span></span><br><span class="line">                <span class="attr">"guid"</span>: <span class="string">"&#123;61c54bbd-c2c6-5271-96e7-009a87ff44bf&#125;"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"Windows PowerShell"</span>,</span><br><span class="line">                <span class="attr">"commandline"</span>: <span class="string">"powershell.exe"</span>,</span><br><span class="line">                <span class="attr">"startingDirectory"</span>: <span class="string">"D:/Workspaces/"</span>,</span><br><span class="line">                <span class="attr">"colorScheme"</span>: <span class="string">"Brogrammer"</span>,</span><br><span class="line">                <span class="attr">"historySize"</span>: <span class="number">2000</span>,</span><br><span class="line">                <span class="attr">"fontSize"</span>: <span class="number">14</span>,</span><br><span class="line">                <span class="attr">"hidden"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"guid"</span>: <span class="string">"&#123;9a549227-0bad-5c01-ab6d-9dbfe9447357&#125;"</span>,</span><br><span class="line">                <span class="attr">"hidden"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"dev"</span>,</span><br><span class="line">                <span class="attr">"colorScheme"</span>: <span class="string">"Brogrammer"</span>,</span><br><span class="line">                <span class="attr">"icon"</span>: <span class="string">"F:/wsl/ubuntu.png"</span>,</span><br><span class="line">                <span class="attr">"fontSize"</span>: <span class="number">14</span>,</span><br><span class="line">                <span class="attr">"startingDirectory"</span>: <span class="string">"D:/Workspaces/"</span>,</span><br><span class="line">                <span class="attr">"source"</span>: <span class="string">"Windows.Terminal.Wsl"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the powershell.exe profile</span></span><br><span class="line">                <span class="attr">"guid"</span>: <span class="string">"&#123;2f519d07-31ac-4d8e-906c-ce0fe47ddcf1&#125;"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"Git Bash"</span>,</span><br><span class="line">                <span class="attr">"historySize"</span>: <span class="number">2000</span>,</span><br><span class="line">                <span class="attr">"commandline"</span>: <span class="string">"C:/Program Files/Git/bin/bash.exe"</span>,</span><br><span class="line">                <span class="attr">"icon"</span>: <span class="string">"F:/wsl/git.png"</span>,</span><br><span class="line">                <span class="attr">"fontSize"</span>: <span class="number">14</span>,</span><br><span class="line">                <span class="attr">"colorScheme"</span>: <span class="string">"Brogrammer"</span>,</span><br><span class="line">                <span class="attr">"startingDirectory"</span>: <span class="string">"D:/Workspaces/"</span>,</span><br><span class="line">                <span class="attr">"hidden"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="comment">// Make changes here to the cmd.exe profile.</span></span><br><span class="line">                <span class="attr">"guid"</span>: <span class="string">"&#123;0caa0dad-35be-5f56-a8ff-afceeeaa6101&#125;"</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"命令提示符"</span>,</span><br><span class="line">                <span class="attr">"commandline"</span>: <span class="string">"cmd.exe"</span>,</span><br><span class="line">                <span class="attr">"hidden"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="attr">"guid"</span>: <span class="string">"&#123;b453ae62-4e3d-5e58-b989-0a998ec441b8&#125;"</span>,</span><br><span class="line">                <span class="attr">"hidden"</span>: <span class="literal">false</span>,</span><br><span class="line">                <span class="attr">"name"</span>: <span class="string">"Azure Cloud Shell"</span>,</span><br><span class="line">                <span class="attr">"source"</span>: <span class="string">"Windows.Terminal.Azure"</span></span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// Add custom color schemes to this array.</span></span><br><span class="line">    <span class="comment">// 添加自定义控制台显示方案</span></span><br><span class="line">    <span class="comment">// To learn more about color schemes, visit https://aka.ms/terminal-color-schemes</span></span><br><span class="line">    <span class="attr">"schemes"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"name"</span>: <span class="string">"Brogrammer"</span>,</span><br><span class="line">            <span class="attr">"black"</span>: <span class="string">"#1f1f1f"</span>,</span><br><span class="line">            <span class="attr">"red"</span>: <span class="string">"#f81118"</span>,</span><br><span class="line">            <span class="attr">"green"</span>: <span class="string">"#2dc55e"</span>,</span><br><span class="line">            <span class="attr">"yellow"</span>: <span class="string">"#ecba0f"</span>,</span><br><span class="line">            <span class="attr">"blue"</span>: <span class="string">"#2a84d2"</span>,</span><br><span class="line">            <span class="attr">"purple"</span>: <span class="string">"#4e5ab7"</span>,</span><br><span class="line">            <span class="attr">"cyan"</span>: <span class="string">"#1081d6"</span>,</span><br><span class="line">            <span class="attr">"white"</span>: <span class="string">"#d6dbe5"</span>,</span><br><span class="line">            <span class="attr">"brightBlack"</span>: <span class="string">"#d6dbe5"</span>,</span><br><span class="line">            <span class="attr">"brightRed"</span>: <span class="string">"#de352e"</span>,</span><br><span class="line">            <span class="attr">"brightGreen"</span>: <span class="string">"#1dd361"</span>,</span><br><span class="line">            <span class="attr">"brightYellow"</span>: <span class="string">"#f3bd09"</span>,</span><br><span class="line">            <span class="attr">"brightBlue"</span>: <span class="string">"#1081d6"</span>,</span><br><span class="line">            <span class="attr">"brightPurple"</span>: <span class="string">"#5350b9"</span>,</span><br><span class="line">            <span class="attr">"brightCyan"</span>: <span class="string">"#0f7ddb"</span>,</span><br><span class="line">            <span class="attr">"brightWhite"</span>: <span class="string">"#ffffff"</span>,</span><br><span class="line">            <span class="attr">"background"</span>: <span class="string">"#131313"</span>,</span><br><span class="line">            <span class="attr">"foreground"</span>: <span class="string">"#d6dbe5"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ],</span><br><span class="line">    <span class="comment">// Add custom keybindings to this array.</span></span><br><span class="line">    <span class="comment">// To unbind a key combination from your defaults.json, set the command to "unbound".</span></span><br><span class="line">    <span class="comment">// To learn more about keybindings, visit https://aka.ms/terminal-keybindings</span></span><br><span class="line">    <span class="attr">"keybindings"</span>: [</span><br><span class="line">        <span class="comment">// Copy and paste are bound to Ctrl+Shift+C and Ctrl+Shift+V in your defaults.json.</span></span><br><span class="line">        <span class="comment">// These two lines additionally bind them to Ctrl+C and Ctrl+V.</span></span><br><span class="line">        <span class="comment">// To learn more about selection, visit https://aka.ms/terminal-selection</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"command"</span>: &#123;</span><br><span class="line">                <span class="attr">"action"</span>: <span class="string">"copy"</span>,</span><br><span class="line">                <span class="attr">"singleLine"</span>: <span class="literal">false</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"keys"</span>: <span class="string">"ctrl+c"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"paste"</span>,</span><br><span class="line">            <span class="attr">"keys"</span>: <span class="string">"ctrl+v"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Press Ctrl+Shift+F to open the search box</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"command"</span>: <span class="string">"find"</span>,</span><br><span class="line">            <span class="attr">"keys"</span>: <span class="string">"ctrl+shift+f"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="comment">// Press Alt+Shift+D to open a new pane.</span></span><br><span class="line">        <span class="comment">// - "split": "auto" makes this pane open in the direction that provides the most surface area.</span></span><br><span class="line">        <span class="comment">// - "splitMode": "duplicate" makes the new pane use the focused pane's profile.</span></span><br><span class="line">        <span class="comment">// To learn more about panes, visit https://aka.ms/terminal-panes</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="attr">"command"</span>: &#123;</span><br><span class="line">                <span class="attr">"action"</span>: <span class="string">"splitPane"</span>,</span><br><span class="line">                <span class="attr">"split"</span>: <span class="string">"auto"</span>,</span><br><span class="line">                <span class="attr">"splitMode"</span>: <span class="string">"duplicate"</span></span><br><span class="line">            &#125;,</span><br><span class="line">            <span class="attr">"keys"</span>: <span class="string">"alt+shift+d"</span></span><br><span class="line">        &#125;</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="登陆用户"><a href="#登陆用户" class="headerlink" title="登陆用户"></a>登陆用户</h3><p>使用上述方式安装的发行版，默认使用root用户进入命令行，不是很安全，可以使用<code>LxRunOffline</code>工具调整默认用户。</p><p>安装好发行版以后，使用Windows Terminal，登陆进入WSL发行版的命令行。</p><p>创建用户：</p><p><code>useradd -m -s /bin/bash &lt;用户名&gt;</code></p><p>设置用户密码：</p><p><code>passwd &lt;用户名&gt;</code></p><p>为用户添加免密码<code>sudo</code>权限，修改<code>/etc/sudoers</code>文件，增加如下一行：</p><p><code>%&lt;用户名&gt; ALL=(ALL:ALL) NOPASSWD:ALL</code></p><blockquote><p>sudoers文件为系统保护文件，使用vim修改完成退出时，需要使用<code>:wq!</code>强行退出。</p></blockquote><p>查询用户ID，一般情况下为<code>1000</code>：</p><p><code>id -u &lt;用户名&gt;</code></p><p>使用<code>LxRunOffline</code>命令行修改默认用户：</p><p><code>LxRunOffline.exe su -n &lt;WSL名称&gt; -v &lt;用户ID&gt;</code></p><h3 id="文件权限问题"><a href="#文件权限问题" class="headerlink" title="文件权限问题"></a>文件权限问题</h3><p>默认情况下，Windows系统的磁盘挂载到目录在WSL发行版中是777权限，并且默认属于root用户，很不方便使用，创建或者修改<code>/etc/wsl.conf</code>文件，增加如下内容</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">[automount]</span></span><br><span class="line"><span class="attr">enabled</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">root</span> = /mnt/</span><br><span class="line"><span class="attr">options</span> = <span class="string">"metadata,dmask=022,fmask=133"</span></span><br><span class="line"><span class="attr">mountFsTab</span> = <span class="literal">false</span></span><br></pre></td></tr></table></figure><p>修改完成后，退出WSL发行版。在Windows Powershell中，执行下列命令强行关闭WSL发行版，以便加载配置</p><p><code>wsl --shutdown</code></p><p>重新进入WSL发行版后，可以看到登陆的用户为指定用户，权限也是正常的755的目录权限。但是在发行版命令行中创建的文件还是777，需要进行调整</p><p>修改<code>.bashrc</code>（如果Shell使用zsh，则修改.zshrc），增加如下内容即可</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">if [[ "$(umask)" == '000' ]]; then</span><br><span class="line">    umask 022</span><br><span class="line">fi</span><br></pre></td></tr></table></figure><h3 id="软件源设置"><a href="#软件源设置" class="headerlink" title="软件源设置"></a>软件源设置</h3><p>使用常规方式，替换其安装源为国内镜像源。以<code>Ubuntu 18.04</code>为例，替换<code>/etc/apt/sources.list</code>内容为阿里云镜像源。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb [arch&#x3D;amd64] http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu bionic stable</span><br><span class="line"># deb-src [arch&#x3D;amd64] http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;docker-ce&#x2F;linux&#x2F;ubuntu bionic stable</span><br></pre></td></tr></table></figure><p>执行<code>sudo apt-get update</code>更新缓存。</p><h3 id="常用依赖包"><a href="#常用依赖包" class="headerlink" title="常用依赖包"></a>常用依赖包</h3><p>安装常用软件</p><p><code>sudo apt-get install git make gcc zsh jq -y</code></p><p>安装docker客户端</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="meta">#</span><span class="bash"> step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository "deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 4: 更新并安装 Docker-CE</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> apt-cache madison docker-ce</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo apt-get -y install docker-ce</span></span><br></pre></td></tr></table></figure><blockquote><p>使用export DOCKER_HOST=tcp://&lt;远程DOCKER主机&gt;:2375方式访问远端的容器资源。</p></blockquote><h3 id="安装oh-my-zsh"><a href="#安装oh-my-zsh" class="headerlink" title="安装oh-my-zsh"></a>安装oh-my-zsh</h3><blockquote><p>由于github下载速度过慢，使用<strong>fastgit.org</strong>的镜像来进行安装。</p></blockquote><p>使用下列命令安装</p><p><code>sh -c &quot;$(wget https://raw.fastgit.org/ohmyzsh/ohmyzsh/master/tools/install.sh -O -)&quot;</code></p><p>安装插件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 根据历史记录和补全历史，自动补全</span></span><br><span class="line">git clone https://hub.fastgit.org/zsh-users/zsh-autosuggestions $ZSH_CUSTOM/plugins/zsh-autosuggestions</span><br><span class="line"><span class="meta">#</span><span class="bash"> 语法高亮插件</span></span><br><span class="line">git clone https://hub.fastgit.org/zsh-users/zsh-syntax-highlighting.git $ZSH_CUSTOM/plugins/zsh-syntax-highlighting</span><br></pre></td></tr></table></figure><p>配置<code>~/.zshrc</code>，启用插件和主题，并使用命令<code>source ~/.zshrc</code>重新加载配置</p><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">ZSH_THEME</span>=<span class="string">"ys"</span></span><br><span class="line"><span class="attr">plugins</span>=(git zsh-autosuggestions zsh-syntax-highlighting)</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统设置 </tag>
            
            <tag> Windows </tag>
            
            <tag> wsl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Go语言Channel编程模式</title>
      <link href="/9c6b0310.html"/>
      <url>/9c6b0310.html</url>
      
        <content type="html"><![CDATA[<h1 id="channel"><a href="#channel" class="headerlink" title="channel"></a>channel</h1><p>channel 是 golang 中提倡使用的并发基础概念，通过通信来共享，与goroutine一起，实现了CSP机制。但同时 golang 也支持基于共享内存的同步原语来进行并发控制。开发者可以通过以下几个条件来决定使用同步原语还是channel来实现并发：</p><ul><li>是否需要转移数据所有权：数据需要从一个goroutine转移到另一个goroutine，并且自身不在保留，这样通过channel方式实现是最自然的。</li><li>是否需要保护对象内部状态：使用同步原语来实现更加方便</li><li>是否需要协调多个对象的并发逻辑：使用channel是更好的选择，隔离性更好</li></ul><p>通道在不同状态下，各种操作的结果如下表所示：</p><table><thead><tr><th>操作</th><th>状态</th><th>结果</th></tr></thead><tbody><tr><td>读</td><td>nil</td><td>阻塞</td></tr><tr><td></td><td>打开，非空</td><td>正常读取值</td></tr><tr><td></td><td>打开，为空</td><td>阻塞</td></tr><tr><td></td><td>closed</td><td><em>通道值类型的默认值</em>，false</td></tr><tr><td></td><td>只写通道</td><td><strong>编译失败</strong></td></tr><tr><td>写</td><td>nil</td><td>阻塞</td></tr><tr><td></td><td>打开，满</td><td>阻塞</td></tr><tr><td></td><td>打开，不满</td><td>写入通道</td></tr><tr><td></td><td>closed</td><td>panic</td></tr><tr><td></td><td>只读通道</td><td><strong>编译失败</strong></td></tr><tr><td>close</td><td>nil</td><td>panic</td></tr><tr><td></td><td>打开，非空</td><td>关闭，读操作可以继续读完通道中所有数据，关闭后为默认值和false</td></tr><tr><td></td><td>打开，为空</td><td>关闭，读操作为默认值和false</td></tr><tr><td></td><td>closed</td><td>panic</td></tr><tr><td></td><td>只读通道</td><td><strong>编译失败</strong></td></tr></tbody></table><p><strong>channel的读写必须在两个goroutine之间，否则会发生死锁</strong></p><h1 id="done-channel——确保channel可以被关闭"><a href="#done-channel——确保channel可以被关闭" class="headerlink" title="done channel——确保channel可以被关闭"></a>done channel——确保channel可以被关闭</h1><p>这是最常见的一种使用模式，通过使用一个特殊的<strong>只读通道</strong>，使父goroutine可以给若干个子goroutine发送信号，用于关闭子goroutine。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestDoneChannel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">createRandChan := <span class="function"><span class="keyword">func</span><span class="params">(done &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span> <span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">ch := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line">t.Log(<span class="string">"rand channel is exiting"</span>)</span><br><span class="line"><span class="built_in">close</span>(ch)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line">t.Log(<span class="string">"got done signal"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> ch &lt;- rand.Int():</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> ch</span><br><span class="line">&#125;</span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">ch := createRandChan(done)</span><br><span class="line">t.Log(<span class="string">"try to get 3 random int and exit"</span>)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">3</span>; i++ &#123;</span><br><span class="line">t.Log(ch)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 关闭ch虽然也可以退出，但是这影响了通道的封装性和所有权：谁创建谁关闭，容易出现问题</span></span><br><span class="line"><span class="built_in">close</span>(done)</span><br><span class="line">t.Log(<span class="string">"send done signal"</span>)</span><br><span class="line"><span class="comment">// 等退出defer能够完全输出操作日志，否则可能过早退出了</span></span><br><span class="line">time.Sleep(time.Second)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="or-channel——任意多个channel退出则退出"><a href="#or-channel——任意多个channel退出则退出" class="headerlink" title="or-channel——任意多个channel退出则退出"></a>or-channel——任意多个channel退出则退出</h1><p>当需要将多个通道，组合到一个通道中，并且任意组成通道退出时，退出整个流程时，在这种场景下，可以使用or-channel模式。使用<strong>递归方式</strong>解决通道数量</p><p>示例代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 将任意数量的通道组合如一个通道中，任意通道退出，则整个通道退出</span></span><br><span class="line"><span class="keyword">var</span> or <span class="function"><span class="keyword">func</span><span class="params">(channels ...<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">chan</span> <span class="title">interface</span></span>&#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestOrChannel</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">or = <span class="function"><span class="keyword">func</span><span class="params">(channels ...<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">chan</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(channels) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(channels) == <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> channels[<span class="number">0</span>]</span><br><span class="line">&#125;</span><br><span class="line">joined := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(joined)</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-channels[<span class="number">0</span>]:</span><br><span class="line"><span class="keyword">case</span> &lt;-channels[<span class="number">1</span>]:</span><br><span class="line"><span class="comment">// 传入当前go routine的，递归到下一层，任意通道收到信号，退出当前routine，并级联关闭joined，通知上一层关闭</span></span><br><span class="line"><span class="keyword">case</span> &lt;-or(<span class="built_in">append</span>(channels[<span class="number">2</span>:], joined)...):</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> joined</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sig := <span class="function"><span class="keyword">func</span><span class="params">(after <span class="keyword">int</span>)</span> <span class="title">chan</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">c := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(c)</span><br><span class="line">d := time.Duration(after) * time.Second</span><br><span class="line">time.Sleep(d)</span><br><span class="line">t.Log(d, <span class="string">"signal is send"</span>)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> c</span><br><span class="line">&#125;</span><br><span class="line">start := time.Now()</span><br><span class="line">joined := or(sig(<span class="number">1</span>), sig(<span class="number">2</span>), sig(<span class="number">3</span>), sig(<span class="number">4</span>))</span><br><span class="line">val := &lt;-joined</span><br><span class="line">t.Log(val)</span><br><span class="line">t.Log(<span class="string">"done after"</span>, time.Since(start))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="pipeline——多个独立流程串行处理"><a href="#pipeline——多个独立流程串行处理" class="headerlink" title="pipeline——多个独立流程串行处理"></a>pipeline——多个独立流程串行处理</h1><p>如果一个业务由多个独立流程组成，并且上一步生成的数据会交给下一步，存在<strong>数据所有权的转移</strong>，那么使用channel的pipeline模式可以很方便的实现，如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">adder</span><span class="params">(done <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, input <span class="keyword">chan</span> <span class="keyword">int</span>)</span> <span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">output := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(output)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> val, ok := &lt;-input:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">output &lt;- val + <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> output</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">multiplier</span><span class="params">(done <span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, input <span class="keyword">chan</span> <span class="keyword">int</span>)</span> <span class="title">chan</span> <span class="title">int</span></span> &#123;</span><br><span class="line">output := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(output)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> val, ok := &lt;-input:</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">output &lt;- val * <span class="number">10</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> output</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestPipeline</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">input := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(input)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">"original val"</span>, i)</span><br><span class="line">input &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">t.Log(<span class="string">"先+再x"</span>)</span><br><span class="line"><span class="keyword">for</span> val := <span class="keyword">range</span> multiplier(done, adder(done, input)) &#123;</span><br><span class="line">t.Log(<span class="string">"proceced val"</span>, val)</span><br><span class="line">&#125;</span><br><span class="line">time.Sleep(time.Second * <span class="number">2</span>)</span><br><span class="line">input = <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">int</span>)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(input)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">10</span>; i++ &#123;</span><br><span class="line">fmt.Println(<span class="string">"original val"</span>, i)</span><br><span class="line">input &lt;- i</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line">t.Log(<span class="string">"先x再+"</span>)</span><br><span class="line"><span class="keyword">for</span> val := <span class="keyword">range</span> adder(done, multiplier(done, input)) &#123;</span><br><span class="line">t.Log(<span class="string">"processed val"</span>, val)</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">close</span>(done)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="fan-in-fan-out——并行化部分pipeline阶段"><a href="#fan-in-fan-out——并行化部分pipeline阶段" class="headerlink" title="fan-in fan-out——并行化部分pipeline阶段"></a>fan-in fan-out——并行化部分pipeline阶段</h1><p>对pipeline的改进，如果某个流程比较慢，可以考虑通过并行的方式，启动多个这个流程的goroutine，对这个流程的输入来说，上一流程产生的多个并行输出成为fan-out，这个流程将数据合并到一个channel成为fan-in。示例如下所示：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestFanInFanOut</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">fanIn := <span class="function"><span class="keyword">func</span><span class="params">(done &lt;-<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, channels ...&lt;-<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> &lt;-<span class="title">chan</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">multiplexedStream := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">var</span> wg sync.WaitGroup</span><br><span class="line">multiplex := <span class="function"><span class="keyword">func</span><span class="params">(ch &lt;-<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123; <span class="comment">// 并发输入模块</span></span><br><span class="line"><span class="keyword">defer</span> wg.Done()</span><br><span class="line"><span class="keyword">for</span> i := <span class="keyword">range</span> ch &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> multiplexedStream &lt;- i:</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">wg.Add(<span class="built_in">len</span>(channels)) <span class="comment">// 启动扇入</span></span><br><span class="line"><span class="keyword">for</span> _, c := <span class="keyword">range</span> channels &#123;</span><br><span class="line"><span class="keyword">go</span> multiplex(c)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123; <span class="comment">// 所有输入都结束时，扇出channel</span></span><br><span class="line">wg.Wait()</span><br><span class="line"><span class="built_in">close</span>(multiplexedStream)</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> multiplexedStream</span><br><span class="line">&#125;</span><br><span class="line">generator := <span class="function"><span class="keyword">func</span><span class="params">(done &lt;-<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> &lt;-<span class="title">chan</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">genCh := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(genCh)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> genCh &lt;- rand.Intn(<span class="number">100000</span>):</span><br><span class="line">t := rand.Intn(<span class="number">5</span>) + <span class="number">1</span> <span class="comment">// 模拟工作过程</span></span><br><span class="line">time.Sleep(time.Second * time.Duration(t))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> genCh</span><br><span class="line">&#125;</span><br><span class="line">take := <span class="function"><span class="keyword">func</span><span class="params">(done &lt;-<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, valueStream &lt;-<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, n <span class="keyword">int</span>)</span> &lt;-<span class="title">chan</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">takeStream := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(takeStream)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; n; i++ &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> n := &lt;-valueStream:</span><br><span class="line">takeStream &lt;- n</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> takeStream</span><br><span class="line">&#125;</span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(done)</span><br><span class="line">num := runtime.NumCPU()</span><br><span class="line">chs := <span class="built_in">make</span>([]&lt;-<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;, num)</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; num; i++ &#123;</span><br><span class="line">chs[i] = generator(done)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> n := <span class="keyword">range</span> take(done, fanIn(done, chs...), <span class="number">20</span>) &#123;</span><br><span class="line">fmt.Printf(<span class="string">"%v "</span>, n)</span><br><span class="line">&#125;</span><br><span class="line">fmt.Println(<span class="string">""</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="tee-channel——分割单一通道为多个通道"><a href="#tee-channel——分割单一通道为多个通道" class="headerlink" title="tee-channel——分割单一通道为多个通道"></a>tee-channel——分割单一通道为多个通道</h1><p>有时候你可能想分割来自通道的多个值，以便将它们发送到两个独立区域。例如：你可能想要在一个通道上接收一系列操作指令，将它们发送给执行者，同时记录操作日志。示例代码如下：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">TestTee</span><span class="params">(t *testing.T)</span></span> &#123;</span><br><span class="line">done := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;)</span><br><span class="line">generator := <span class="function"><span class="keyword">func</span><span class="params">(done &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, integers ...<span class="keyword">int</span>)</span> &lt;-<span class="title">chan</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line">inStream := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(inStream)</span><br><span class="line"><span class="keyword">for</span> _, v := <span class="keyword">range</span> integers &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> inStream &lt;- v:</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> inStream</span><br><span class="line">&#125;</span><br><span class="line">tee := <span class="function"><span class="keyword">func</span><span class="params">(done &lt;-<span class="keyword">chan</span> <span class="keyword">struct</span>&#123;&#125;, in &lt;-<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(_, _ &lt;-<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span></span> &#123;</span><br><span class="line">out1 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line">out2 := <span class="built_in">make</span>(<span class="keyword">chan</span> <span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(out1)</span><br><span class="line"><span class="keyword">defer</span> <span class="built_in">close</span>(out2)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> val := <span class="keyword">range</span> in &#123;</span><br><span class="line">out1, out2 := out1, out2</span><br><span class="line"><span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">2</span>; i++ &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> &lt;-done:</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line"><span class="keyword">case</span> out1 &lt;- val:</span><br><span class="line">out1 = <span class="literal">nil</span> <span class="comment">//一旦我们写入了通道，我们将其副本设置为零，这样继续写入将阻塞，而另一个通道可以继续执行。</span></span><br><span class="line"><span class="keyword">case</span> out2 &lt;- val:</span><br><span class="line">out2 = <span class="literal">nil</span> <span class="comment">//一旦我们写入了通道，我们将其副本设置为零，这样继续写入将阻塞，而另一个通道可以继续执行。</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;()</span><br><span class="line"><span class="keyword">return</span> out1, out2</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">out1, out2 := tee(done, generator(done, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>))</span><br><span class="line"><span class="keyword">for</span> val1 := <span class="keyword">range</span> out1 &#123;</span><br><span class="line">fmt.Printf(<span class="string">"out1: %v, out2: %v"</span>, val1, &lt;-out2)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> channel </tag>
            
            <tag> 并发编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在electron中实现PDF预览功能</title>
      <link href="/b6ae07.html"/>
      <url>/b6ae07.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>由于electron从3.x版本开始，已经不再支持直接预览PDF。有业务需求时，需要自行实现，总结记录两种实现预览的解决办法</p><h1 id="使用iframe预览"><a href="#使用iframe预览" class="headerlink" title="使用iframe预览"></a>使用iframe预览</h1><p>如果PDF文件可以已经托管为静态文件，可以通过iframe的方式，直接使用弹出的页面预览文件内容</p><ul><li><p>优点：实现简单方便，并且自带基本的工具按钮。</p></li><li><p>缺点：样式与应用本身差别比较大，很难定制。</p></li></ul><p>实现代码如下所示：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;div style&#x3D;&quot;margin: 0px&quot;&gt;</span><br><span class="line">                        &lt;iframe :src&#x3D;&quot;fileUrl&quot; style&#x3D;&quot;width: 100%;height:600px&quot;&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure><p>在主进程生成窗口时，打开插件支持，否则无法成功预览，如下：</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mainWindow = <span class="keyword">new</span> BrowserWindow(&#123;</span><br><span class="line">    icon: <span class="string">'./static/icon.png'</span>,</span><br><span class="line">    height: <span class="number">563</span>,</span><br><span class="line">    useContentSize: <span class="literal">true</span>,</span><br><span class="line">    width: <span class="number">1000</span>,</span><br><span class="line">    webPreferences: &#123;</span><br><span class="line">      webSecurity: <span class="literal">false</span>,</span><br><span class="line">      javascript: <span class="literal">true</span>,</span><br><span class="line">      plugins: <span class="literal">true</span>&#125;</span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p>预览效果如下图所示：</p><p><img src="/b6ae07/image-20200807175117350.png" alt="image-20200807175117350"></p><h1 id="使用pdfjs-dist"><a href="#使用pdfjs-dist" class="headerlink" title="使用pdfjs-dist"></a>使用pdfjs-dist</h1><p><code>pdfjs</code>是<code>Mozilla</code>开源的PDF处理库，将PDF内容渲染为canvas数据，支持预览、翻页、打印等功能。</p><ul><li><p>优点：样式和功能都可以深度定制，集成度很好。</p></li><li><p>缺点：需要一定工作量来开发定制。</p></li></ul><p>在<code>electron</code>中使用时，如果直接使用<code>pdfjs</code>发布包，会引入较多无用依赖，导致打包生成的应用过大。因此使用<code>pdfjs-dist</code>这个包使用精简实现。</p><p>使用下列命令安装依赖：</p><p><code>cnpm install pdfjs-dist</code></p><p>创建如下内容的组件<code>pdf.vue</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div v-loading&#x3D;&quot;loading&quot; v-if&#x3D;&quot;url&quot; class&#x3D;&quot;center&quot; style&#x3D;&quot;height:100%&quot;&gt;</span><br><span class="line">        &lt;canvas v-for&#x3D;&quot;data in canvasData&quot; :key&#x3D;&quot;data&quot; :id&#x3D;&quot;&#39;the-canvas-&#39;+data&quot; class&#x3D;&quot;canvasstyle&quot;&gt;&lt;&#x2F;canvas&gt;</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">    &lt;div v-else style&#x3D;&quot;font-size:18px;text-align:center;font-weight:900&quot;&gt;</span><br><span class="line">        没有PDF文件可以预览</span><br><span class="line">    &lt;&#x2F;div&gt;</span><br><span class="line">&lt;&#x2F;template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script type&#x3D;&quot;text&#x2F;ecmascript-6&quot;&gt;</span><br><span class="line">    import PDFJS from &#39;pdfjs-dist&#39;</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">      name: &#39;PDFContent&#39;,</span><br><span class="line">      props: &#123;</span><br><span class="line">        url: &#123;</span><br><span class="line">          type: String,</span><br><span class="line">          default: &#39;&#39;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      data () &#123;</span><br><span class="line">        return &#123;</span><br><span class="line">          pdfDoc: null, &#x2F;&#x2F; pdfjs 生成的对象</span><br><span class="line">          pageNum: 1, &#x2F;&#x2F;</span><br><span class="line">          pageRendering: false,</span><br><span class="line">          pageNumPending: null,</span><br><span class="line">          scale: 1.2, &#x2F;&#x2F; 放大倍数</span><br><span class="line">          page_num: 0, &#x2F;&#x2F; 当前页数</span><br><span class="line">          page_count: 0, &#x2F;&#x2F; 总页数</span><br><span class="line">          maxscale: 2, &#x2F;&#x2F; 最大放大倍数</span><br><span class="line">          minscale: 0.8, &#x2F;&#x2F; 最小放大倍数</span><br><span class="line">          canvasData: [],</span><br><span class="line">          loading: false</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      created () &#123;</span><br><span class="line">        console.log(this.url)</span><br><span class="line">      &#125;,</span><br><span class="line">      destroyed () &#123;</span><br><span class="line">        console.log(&#39;destroyed&#39;)</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        renderPage (num) &#123;</span><br><span class="line">          &#x2F;&#x2F; 渲染pdf的每一页</span><br><span class="line">          const vm &#x3D; this</span><br><span class="line">          this.pageRendering &#x3D; true</span><br><span class="line">          const canvas &#x3D; document.getElementById(&#96;the-canvas-$&#123;num&#125;&#96;)</span><br><span class="line">          &#x2F;&#x2F; Using promise to fetch the page</span><br><span class="line">          this.pdfDoc.getPage(num).then((page) &#x3D;&gt; &#123;</span><br><span class="line">            const viewport &#x3D; page.getViewport(&#123;scale: vm.scale&#125;)</span><br><span class="line">            canvas.height &#x3D; viewport.height</span><br><span class="line">            canvas.width &#x3D; viewport.width</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Render PDF page into canvas context</span><br><span class="line">            const renderContext &#x3D; &#123;</span><br><span class="line">              &#x2F;&#x2F;   canvasContext: vm.ctx,</span><br><span class="line">              canvasContext: canvas.getContext(&#39;2d&#39;),</span><br><span class="line">              viewport</span><br><span class="line">            &#125;</span><br><span class="line">            const renderTask &#x3D; page.render(renderContext)</span><br><span class="line"></span><br><span class="line">            &#x2F;&#x2F; Wait for rendering to finish</span><br><span class="line">            renderTask.promise.then(() &#x3D;&gt; &#123;</span><br><span class="line">              vm.pageRendering &#x3D; false</span><br><span class="line">              if (vm.pageNumPending !&#x3D;&#x3D; null) &#123;</span><br><span class="line">                &#x2F;&#x2F; New page rendering is pending</span><br><span class="line">                vm.renderPage(vm.pageNumPending)</span><br><span class="line">                vm.pageNumPending &#x3D; null</span><br><span class="line">              &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">          &#125;)</span><br><span class="line">          vm.page_num &#x3D; vm.pageNum</span><br><span class="line">        &#125;,</span><br><span class="line">        showPdf () &#123;</span><br><span class="line">          const vm &#x3D; this</span><br><span class="line">          this.loading &#x3D; true</span><br><span class="line">          vm.canvasData &#x3D; []</span><br><span class="line">          &#x2F;&#x2F; PDFJS.GlobalWorkerOptions.workerSrc &#x3D; &#39;static&#x2F;pdf&#x2F;pdf.worker.js&#39;</span><br><span class="line">          PDFJS.GlobalWorkerOptions.workerSrc &#x3D; &#39;static&#x2F;pdf&#x2F;pdf.worker.min.js&#39;</span><br><span class="line">          PDFJS.getDocument(vm.url).promise</span><br><span class="line">            .then((pdf) &#x3D;&gt; &#123;</span><br><span class="line">              &#x2F;&#x2F; 初始化pdf内容</span><br><span class="line">              vm.pdfDoc &#x3D; pdf</span><br><span class="line">              vm.page_count &#x3D; vm.pdfDoc.numPages</span><br><span class="line">              for (let i &#x3D; 0; i &lt; vm.page_count; i +&#x3D; 1) &#123;</span><br><span class="line">                vm.canvasData.push(i + 1)</span><br><span class="line">              &#125;</span><br><span class="line">              return pdf</span><br><span class="line">            &#125;)</span><br><span class="line">            .then((pdf) &#x3D;&gt; &#123;</span><br><span class="line">              &#x2F;&#x2F; 初始化pdf</span><br><span class="line">              vm.pdfDoc &#x3D; pdf</span><br><span class="line">              vm.page_count &#x3D; vm.pdfDoc.numPages</span><br><span class="line">              for (let i &#x3D; 0; i &lt; vm.page_count; i +&#x3D; 1) &#123;</span><br><span class="line">                vm.renderPage(i + 1)</span><br><span class="line">              &#125;</span><br><span class="line">              vm.loading &#x3D; false</span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      mounted () &#123;</span><br><span class="line">        this.showPdf()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;&#x2F;script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang&#x3D;&quot;scss&quot; scoped type&#x3D;&quot;text&#x2F;css&quot;&gt;</span><br><span class="line"></span><br><span class="line">    .center &#123;</span><br><span class="line">        text-align: center;</span><br><span class="line">        height: 100%;</span><br><span class="line">        overflow: auto;</span><br><span class="line">        padding-top: 20px;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;&#x2F;style&gt;</span><br></pre></td></tr></table></figure><p>在需要预览的页面中，引用组件，并设置PDF的地址即可：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;div style&#x3D;&quot;margin: 0px&quot;&gt;</span><br><span class="line">                        &lt;PDFContent :url&#x3D;&quot;fileUrl&quot;&gt;&lt;&#x2F;PDFContent&gt;</span><br><span class="line">                    &lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">    import PDFContent from &#39;@&#x2F;components&#x2F;printer&#x2F;pdf&#39;</span><br><span class="line"></span><br><span class="line">    const ipcRenderer &#x3D; require(&#39;electron&#39;).ipcRenderer</span><br><span class="line"></span><br><span class="line">    export default &#123;</span><br><span class="line">      components: &#123;PDFContent&#125;,</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>预览效果如下：</p><p><img src="/b6ae07/image-20200807175232223.png" alt="image-20200807175232223"></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron打包踩坑</title>
      <link href="/a9cf0f63.html"/>
      <url>/a9cf0f63.html</url>
      
        <content type="html"><![CDATA[<h1 id="electron镜像"><a href="#electron镜像" class="headerlink" title="electron镜像"></a>electron镜像</h1><p>淘宝提供了electron的镜像源，帮助国内用户快速安装，地址为</p><p><code>https://npm.taobao.org/mirrors/electron/</code></p><p>例如，如果全局安装<code>electron</code>，则可使用以下命令</p><p><code>ELECTRON_MIRROR=http://npm.taobao.org/mirrors/electron/ npm install -g electron</code></p><p>在使用<code>electron-builder</code>打包时，也可以从这个镜像站手动下载放到缓存目录中一遍规避网络问题</p><h2 id="缓存目录"><a href="#缓存目录" class="headerlink" title="缓存目录"></a>缓存目录</h2><p>Windows下路径为：</p><p><code>C:\Users\&lt;用户名&gt;\AppData\Local\electron\Cache</code></p><p>Linux下路径为：</p><p><code>$HOME/.cache/electron/</code></p><p>Mac下路径为：</p><p><code>$HOME/Library/Caches/electron</code></p><h1 id="electron-builder打包"><a href="#electron-builder打包" class="headerlink" title="electron-builder打包"></a>electron-builder打包</h1><p>electron-builder是比较流行的electron打包工具，可以支持全平台、不同架构的包输出。</p><h2 id="各操作系统下的打包命令"><a href="#各操作系统下的打包命令" class="headerlink" title="各操作系统下的打包命令"></a>各操作系统下的打包命令</h2><p>打包win64位安装包</p><p><code>electron-builder --win --x64</code></p><p>打包win32位安装包</p><p><code>electron-builder --win --ia32</code></p><p>打包linux 64位appimage（linux平台下，不指定目标时，默认appimage和snap格式）</p><p><code>electron-builder --linux appimage --x64</code></p><p>打包linux 64位deb和tar.xz包</p><p><code>electron-builder --linux deb tar.xz  --x64</code></p><p>打包树莓派3的appimage包</p><p><code>electron-builder --linux appimage --armv7l</code></p><p>打包树莓派4 64位的appimage包</p><p><code>electron-builder --linux appimage --arm64</code></p><blockquote><p>关于交叉编译：</p><p>由于node_modules的编译安装问题，windows平台下，如果交叉编译linux的软件包，必须使用<code>wsl</code>做隔离，在编译时，必须清理windows下的安装，重新install</p><p>在linux下交叉编译windows软件包，需要依赖wine设置，可以从淘宝镜像源上下载准备好</p></blockquote><h2 id="加速构建"><a href="#加速构建" class="headerlink" title="加速构建"></a>加速构建</h2><p>淘宝提供了electron-builder的镜像源，帮助国内用户快速安装，地址为</p><p><code>https://npm.taobao.org/mirrors/electron-builder-binaries/</code></p><p>但此镜像源也不是完整的镜像，部分软件包没有同步，只能从github上下载，解决部分软件的问题。</p><p>以windows系统为例，说明在linux和windows上的主要软件包处理方式</p><h3 id="electron"><a href="#electron" class="headerlink" title="electron"></a>electron</h3><p>将electron-builder日志中，缺失的electron操作系统包从淘宝镜像源上下载，以<code>electron-v2.0.18-win32-x64.zip</code>为例，淘宝镜像源对应版本的<a href="https://npm.taobao.org/mirrors/electron/2.0.18/electron-v2.0.18-win32-x64.zip" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/electron/2.0.18/electron-v2.0.18-win32-x64.zip</a> ，下载后，放到<strong>electron的缓存目录中</strong>，如下图所示：</p><p><img src="/a9cf0f63/image-20200708145819268.png" alt="image-20200708145819268"></p><h3 id="winCodeSign"><a href="#winCodeSign" class="headerlink" title="winCodeSign"></a>winCodeSign</h3><p>windows平台下，打包还需要的winCodeSign-2.4.0，可以从淘宝镜像源对应版本地址<a href="https://npm.taobao.org/mirrors/electron-builder-binaries/winCodeSign-2.4.0/winCodeSign-2.4.0.7z，并将文件解压到**electron-builder缓存目录**的`winCodeSign\winCodeSign-2.4.0`子目录下，子目录名字与软件包名字必须保持一致，如下图所示：" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/electron-builder-binaries/winCodeSign-2.4.0/winCodeSign-2.4.0.7z，并将文件解压到**electron-builder缓存目录**的`winCodeSign\winCodeSign-2.4.0`子目录下，子目录名字与软件包名字必须保持一致，如下图所示：</a></p><p><img src="/a9cf0f63/image-20200708150224170.png" alt="image-20200708150224170"></p><h3 id="nsis"><a href="#nsis" class="headerlink" title="nsis"></a>nsis</h3><p>缺失软件包nsis-3.0.3.2时，可以从淘宝镜像源对应版本地址<a href="https://npm.taobao.org/mirrors/electron-builder-binaries/nsis-3.0.3.2/nsis-3.0.3.2.7z下载，并解压到**electron-builder缓存目录**的对应子目录`nsis\nsis-3.0.3.2`下，软件包名字与子目录名字保持一致。" target="_blank" rel="noopener">https://npm.taobao.org/mirrors/electron-builder-binaries/nsis-3.0.3.2/nsis-3.0.3.2.7z下载，并解压到**electron-builder缓存目录**的对应子目录`nsis\nsis-3.0.3.2`下，软件包名字与子目录名字保持一致。</a></p><p><img src="/a9cf0f63/image-20200708150518134.png" alt="image-20200708150518134"></p><h3 id="nsis-resource"><a href="#nsis-resource" class="headerlink" title="nsis-resource"></a>nsis-resource</h3><p>软件包nsis-resources-3.3.0在淘宝镜像源上并没有同步，只能从官方github仓库上下载，可以通过腾讯云或者阿里云等VPC上下载后，传回本地安装，存放到<strong>electron-builder缓存目录</strong>的对应子目录<code>nsis\nsis-resources-3.3.0</code>下</p><p><img src="/a9cf0f63/image-20200708150735869.png" alt="image-20200708150735869"></p><h3 id="chrome-driver"><a href="#chrome-driver" class="headerlink" title="chrome-driver"></a>chrome-driver</h3><p>有些情况下，通过<code>yarn</code>安装依赖时，下载安装chromedriver会因为超时失败，这时，可以使用淘宝镜像源加入构建，目前仅能使用<code>npm</code>或者<code>cnpm</code>命令行使用淘宝镜像源</p><p><code>npm install chromedriver --chromedriver_cdnurl=http://npm.taobao.org/mirrors/chromedriver</code></p><h2 id="linux下打包"><a href="#linux下打包" class="headerlink" title="linux下打包"></a>linux下打包</h2><ul><li><p>打包deb包时，需要使用ar命令，在<code>binutils</code>软件包中，可使用下列命令安装：</p><p><code>sudo apt-get install binutils</code></p></li><li><p>打包snap包时，需要安装并启动<code>snapd</code>服务，在<code>wsl</code>和<code>wsl2</code>下都无法使用，只能在Linux平台下编译</p></li></ul><h2 id="缓存目录-1"><a href="#缓存目录-1" class="headerlink" title="缓存目录"></a>缓存目录</h2><p>Windows下路径为：</p><p><code>C:\Users\&lt;用户名&gt;\AppData\Local\electron-builder\Cache</code></p><p>Linux下路径为：</p><p><code>$HOME/.cache/electron-builder/</code></p><p>Mac下路径为：</p><p><code>$HOME/Library/Caches/electron-builder</code></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> 操作系统设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue与beego的集成</title>
      <link href="/3c644b30.html"/>
      <url>/3c644b30.html</url>
      
        <content type="html"><![CDATA[<h1 id="beego设置"><a href="#beego设置" class="headerlink" title="beego设置"></a>beego设置</h1><p>正常开发vue前端后，使用<code>yarn run build</code>或者<code>npm run build</code>，生成<code>dist</code>发布包，然后将发布包复制到基于beego的web项目目录下。</p><p>在<code>beego.Run</code>执行之前，设置界面的访问路径</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">beego.BConfig.WebConfig.DirectoryIndex = <span class="literal">true</span></span><br><span class="line">beego.SetStaticPath(<span class="string">"/ui/"</span>, <span class="string">"dist"</span>)</span><br><span class="line"><span class="comment">// 默认vue生成的发布包，静态文件的路径为/static，因此需要再映射</span></span><br><span class="line">beego.SetStaticPath(<span class="string">"/static"</span>, <span class="string">"dist/static"</span>)</span><br></pre></td></tr></table></figure><ul><li>SetStaticPath：默认beego的静态目录为根目录下的<code>static</code>文件夹，可以通过StateStaticPath增加自定义设置。</li><li>WebConfig.DirectoryIndex：开启静态文件的目录访问，默认访问目录下的<code>index.html</code>，如果为false，则访问时会出现403错误。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fabric智能合约开发指南V2-contractapi</title>
      <link href="/72883fba.html"/>
      <url>/72883fba.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>从fabric 1.4版本开始，社区统一了不同编程语言中开发智能合约的接口约束，采用基本一致的方式提供合约的规范化模式，降低开发复杂度。在shim接口规范的基础上，对底层接口的调用进行封装，建议使用基于contractapi的协议规范，而不再直接使用fabric提供的底层shim接口。</p><p>下面，以Go语言开发智能合约为例，介绍基于contractapi的开发案例。</p><h1 id="规范"><a href="#规范" class="headerlink" title="规范"></a>规范</h1><p>与基于shim接口的合约类似，基于contractapi的合约也需要一个main方法来启动，并且包名必须为main。</p><ul><li><p>合约实现通过组合<code>contractapi.Contract</code>来继承大部分处理逻辑，对外提供的功能，通过自定义方法进行实现，并且按Go的规范，对外<strong>暴露的方法要求方法名首字母大写</strong>。</p></li><li><p>合约的方法调用方式不变，依然按<code>[&quot;方法名&quot;,&quot;参数1&quot;,&quot;参数2&quot;...]</code>的方式进行调用。</p><ul><li>方法名会自动进行大写处理，然后调用对应的实现方法。</li><li>方法的第一个参数必须是<code>contractapi.TransactionContextInterface</code>类型，通过这个参数与底层接口交互，后续参数可以不必要是字符串类型，但必须是可以<code>json反序列化处理的</code>。</li><li>方法返回值可以是一个或者两个值，但最后一个必须是error类型的，error为nil表示调用成功。如果有其他返回值，默认通过<strong>json进行序列化为字符串</strong>进行返回。</li></ul></li><li><p>对不需要通过合约暴露的方法，合约可以通过实现方法，返回需要屏蔽的方法名字数组。</p><ul><li><pre><code class="go">GetIgnoredFunctions() []<span class="keyword">string</span>&lt;!--￼<span class="number">0</span>--&gt;</code></pre></li></ul></li><li></li></ul><h1 id="示例合约"><a href="#示例合约" class="headerlink" title="示例合约"></a>示例合约</h1><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"errors"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line"><span class="string">"strconv"</span></span><br><span class="line"></span><br><span class="line"><span class="string">"github.com/hyperledger/fabric-contract-api-go/contractapi"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 通过组合默认合约来继承部分实现</span></span><br><span class="line"><span class="keyword">type</span> ABstore <span class="keyword">struct</span> &#123;</span><br><span class="line">contractapi.Contract</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// contractapi.Contract自动对方法参数做序列化和类型处理，每个调用参数字符串对应一个参数</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *ABstore)</span> <span class="title">Init</span><span class="params">(ctx contractapi.TransactionContextInterface, A <span class="keyword">string</span>, Aval <span class="keyword">int</span>, B <span class="keyword">string</span>, Bval <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">fmt.Println(<span class="string">"ABstore Init"</span>)</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="comment">// Initialize the chaincode</span></span><br><span class="line">fmt.Printf(<span class="string">"Aval = %d, Bval = %d\n"</span>, Aval, Bval)</span><br><span class="line"><span class="comment">// Write the state to the ledger</span></span><br><span class="line">err = ctx.GetStub().PutState(A, []<span class="keyword">byte</span>(strconv.Itoa(Aval)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = ctx.GetStub().PutState(B, []<span class="keyword">byte</span>(strconv.Itoa(Bval)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Transaction makes payment of X units from A to B</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *ABstore)</span> <span class="title">Invoke</span><span class="params">(ctx contractapi.TransactionContextInterface, A, B <span class="keyword">string</span>, X <span class="keyword">int</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">var</span> Aval <span class="keyword">int</span></span><br><span class="line"><span class="keyword">var</span> Bval <span class="keyword">int</span></span><br><span class="line"><span class="comment">// Get the state from the ledger</span></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> will be nice to have a GetAllState call to ledger</span></span><br><span class="line">Avalbytes, err := ctx.GetStub().GetState(A)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Failed to get state"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> Avalbytes == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Entity not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line">Aval, _ = strconv.Atoi(<span class="keyword">string</span>(Avalbytes))</span><br><span class="line"></span><br><span class="line">Bvalbytes, err := ctx.GetStub().GetState(B)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Failed to get state"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> Bvalbytes == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Entity not found"</span>)</span><br><span class="line">&#125;</span><br><span class="line">Bval, _ = strconv.Atoi(<span class="keyword">string</span>(Bvalbytes))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Perform the execution</span></span><br><span class="line">Aval = Aval - X</span><br><span class="line">Bval = Bval + X</span><br><span class="line">fmt.Printf(<span class="string">"Aval = %d, Bval = %d\n"</span>, Aval, Bval)</span><br><span class="line"></span><br><span class="line"><span class="comment">// Write the state back to the ledger</span></span><br><span class="line">err = ctx.GetStub().PutState(A, []<span class="keyword">byte</span>(strconv.Itoa(Aval)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = ctx.GetStub().PutState(B, []<span class="keyword">byte</span>(strconv.Itoa(Bval)))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete  an entity from state</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *ABstore)</span> <span class="title">Delete</span><span class="params">(ctx contractapi.TransactionContextInterface, A <span class="keyword">string</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Delete the key from the state in ledger</span></span><br><span class="line">err := ctx.GetStub().DelState(A)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Failed to delete state"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 允许最多两个返回值，最后一个必须是error类型</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(t *ABstore)</span> <span class="title">Query</span><span class="params">(ctx contractapi.TransactionContextInterface, A <span class="keyword">string</span>)</span> <span class="params">(<span class="keyword">string</span>, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="comment">// Get the state from the ledger</span></span><br><span class="line">Avalbytes, err := ctx.GetStub().GetState(A)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">jsonResp := <span class="string">"&#123;\"Error\":\"Failed to get state for "</span> + A + <span class="string">"\"&#125;"</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, errors.New(jsonResp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> Avalbytes == <span class="literal">nil</span> &#123;</span><br><span class="line">jsonResp := <span class="string">"&#123;\"Error\":\"Nil amount for "</span> + A + <span class="string">"\"&#125;"</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">""</span>, errors.New(jsonResp)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">jsonResp := <span class="string">"&#123;\"Name\":\""</span> + A + <span class="string">"\",\"Amount\":\""</span> + <span class="keyword">string</span>(Avalbytes) + <span class="string">"\"&#125;"</span></span><br><span class="line">fmt.Printf(<span class="string">"Query Response:%s\n"</span>, jsonResp)</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">string</span>(Avalbytes), <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">cc, err := contractapi.NewChaincode(<span class="built_in">new</span>(ABstore))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="built_in">panic</span>(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := cc.Start(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error starting ABstore chaincode: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="接口说明"><a href="#接口说明" class="headerlink" title="接口说明"></a>接口说明</h2><h3 id="contractapi-Contract"><a href="#contractapi-Contract" class="headerlink" title="contractapi.Contract"></a>contractapi.Contract</h3><p>可以通过组合<code>contractapi.Contract</code>来快速实现合约，提供以下可扩展函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetInfo：返回合约标题、描述等信息，会自动根据合约名称生成默认值</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Contract)</span> <span class="title">GetInfo</span><span class="params">()</span> <span class="title">metadata</span>.<span class="title">InfoMetadata</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetUnknownTransaction：如果调用的方法不存在，通过它返回自定义的处理函数，可以为nil</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Contract)</span> <span class="title">GetUnknownTransaction</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">return</span> c.UnknownTransaction</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetBeforeTransaction：调用方法前，需要做什么处理的自定义函数，可以为nil</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Contract)</span> <span class="title">GetBeforeTransaction</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">return</span> c.BeforeTransaction</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetAfterTransaction：调用方法后，需要做什么处理的自定义函数，可以为nil</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Contract)</span> <span class="title">GetAfterTransaction</span><span class="params">()</span> <span class="title">interface</span></span>&#123;&#125; &#123;</span><br><span class="line"><span class="keyword">return</span> c.AfterTransaction</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// GetName：合约名称，默认为合约的结构体名字，可以在安装打包时，对这个名称进行覆盖</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *Contract)</span> <span class="title">GetName</span><span class="params">()</span> <span class="title">string</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> c.Name</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="contractapi-TransactionContextInterface"><a href="#contractapi-TransactionContextInterface" class="headerlink" title="contractapi.TransactionContextInterface"></a>contractapi.TransactionContextInterface</h3><p>合约方法的第一个参数必须是<code>contractapi.TransactionContextInterface</code>类型的，方法内部通过这个参数来调用底层接口。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// GetStub返回底层shim接口，用于操作账本读写集</span></span><br><span class="line">GetStub() shim.ChaincodeStubInterface</span><br><span class="line"><span class="comment">// GetClientIdentity返回调用者的身份信息，包括证书、组织ID等信息</span></span><br><span class="line">GetClientIdentity() cid.ClientIdentity</span><br></pre></td></tr></table></figure><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><a href="https://godoc.org/github.com/hyperledger/fabric-contract-api-go/contractapi" target="_blank" rel="noopener">https://godoc.org/github.com/hyperledger/fabric-contract-api-go/contractapi</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric </tag>
            
            <tag> 智能合约 </tag>
            
            <tag> chaincode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sparkoperator墙内使用指南</title>
      <link href="/3f14187a.html"/>
      <url>/3f14187a.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>sparkoperator是kubernetes社区推出的专用于启动spark应用的operator，支持灵活便利地启动spark应用，加快应用向云原生迁移。</p><h1 id="准备本地仓库"><a href="#准备本地仓库" class="headerlink" title="准备本地仓库"></a>准备本地仓库</h1><h2 id="helm3安装"><a href="#helm3安装" class="headerlink" title="helm3安装"></a>helm3安装</h2><p>按官方文档下载<code>helm</code>二进制文件，并放到<code>PATH</code>下即可</p><h2 id="设置仓库"><a href="#设置仓库" class="headerlink" title="设置仓库"></a>设置仓库</h2><p>与<code>helm2</code>不同，<code>helm3</code>不再通过<code>serve</code>子命令启动本地仓库，用户需要手动启动文件服务作为本地仓库的服务端，只要指定文件服务的根路径下有符合规范的<code>index.html</code>文件即可。</p><p>使用下列命令，搭建一个只包含<code>sparkoperator</code>的本地仓库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir repo&amp;&amp;<span class="built_in">cd</span> repo</span><br><span class="line">wget http://storage.googleapis.com/kubernetes-charts-incubator/sparkoperator-0.6.13.tgz</span><br><span class="line"><span class="comment"># 如果无法正常访问，可以使用我的临时版本下载</span></span><br><span class="line"><span class="comment">#wget https://mrfengjian.github.io/download/sparkoperator-0.6.13.tgz</span></span><br><span class="line">helm repo index .</span><br><span class="line">nohup python -m SimpleHTTPServer &amp;</span><br><span class="line">helm repo add <span class="built_in">local</span> http://localhost:8000</span><br></pre></td></tr></table></figure><h1 id="启动sparkoperator"><a href="#启动sparkoperator" class="headerlink" title="启动sparkoperator"></a>启动sparkoperator</h1><p>参考<a href="https://github.com/GoogleCloudPlatform/spark-on-k8s-operator" target="_blank" rel="noopener">官方文档</a>，和<a href="https://github.com/helm/charts/tree/master/incubator/sparkoperator" target="_blank" rel="noopener">sparkoperator</a>说明，使用阿里云镜像创建sparkoperator，</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">helm install <span class="built_in">local</span>/sparkoperator --generate-name --namespace spark-operator --<span class="built_in">set</span> sparkJobNamespace=default --<span class="built_in">set</span> operatorImageName=registry.cn-hangzhou.aliyuncs.com/gcr_spark-operator/spark-operator</span><br></pre></td></tr></table></figure><p>检查sparkoperator是否正常运行：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  spark helm list --all-namespaces</span><br><span class="line">NAME                    NAMESPACE     REVISIONUPDATED                                STATUS  CHART               APP VERSION        </span><br><span class="line">sparkoperator-1589165215spark-operator1       2020-05-11 10:46:56.012475923 +0800 CSTdeployedsparkoperator-0.6.13v1beta2-1.1.1-2.4.5</span><br></pre></td></tr></table></figure><p>当sparkoperator启动正常时，使用下面的应用定义，通过阿里云镜像，使用命令<code>kubectl apply -f</code>启动<code>sparkpi</code>应用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">"sparkoperator.k8s.io/v1beta2"</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">SparkApplication</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark-pi</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">Scala</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">cluster</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">"registry.cn-hangzhou.aliyuncs.com/gcr_spark-operator/spark:v2.4.5"</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">Always</span></span><br><span class="line">  <span class="attr">mainClass:</span> <span class="string">org.apache.spark.examples.SparkPi</span></span><br><span class="line">  <span class="attr">mainApplicationFile:</span> <span class="string">"local:///opt/spark/examples/jars/spark-examples_2.11-2.4.5.jar"</span></span><br><span class="line">  <span class="attr">sparkVersion:</span> <span class="string">"2.4.5"</span></span><br><span class="line">  <span class="attr">restartPolicy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Never</span></span><br><span class="line">  <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"test-volume"</span></span><br><span class="line">      <span class="attr">hostPath:</span></span><br><span class="line">        <span class="attr">path:</span> <span class="string">"/tmp"</span></span><br><span class="line">        <span class="attr">type:</span> <span class="string">Directory</span></span><br><span class="line">  <span class="attr">driver:</span></span><br><span class="line">    <span class="attr">cores:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">coreLimit:</span> <span class="string">"1200m"</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">"512m"</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="number">2.4</span><span class="number">.5</span></span><br><span class="line">    <span class="attr">serviceAccount:</span> <span class="string">spark</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"test-volume"</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">"/tmp"</span></span><br><span class="line">  <span class="attr">executor:</span></span><br><span class="line">    <span class="attr">cores:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">instances:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">"512m"</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="number">2.4</span><span class="number">.5</span></span><br><span class="line">    <span class="attr">volumeMounts:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"test-volume"</span></span><br><span class="line">        <span class="attr">mountPath:</span> <span class="string">"/tmp"</span></span><br></pre></td></tr></table></figure><p>通过命令<code>kubectl describe SparkApplication spark-pi</code>可以查看应用状态：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">➜</span>  <span class="string">spark</span> <span class="string">kubectl</span> <span class="string">describe</span> <span class="string">SparkApplication</span> <span class="string">spark-pi</span>   </span><br><span class="line"><span class="attr">Name:</span>         <span class="string">spark-pi</span></span><br><span class="line"><span class="attr">Namespace:</span>    <span class="string">default</span></span><br><span class="line"><span class="attr">Labels:</span>       <span class="string">&lt;none&gt;</span></span><br><span class="line"><span class="attr">Annotations:  kubectl.kubernetes.io/last-applied-configuration:</span></span><br><span class="line">                <span class="string">&#123;"apiVersion":"sparkoperator.k8s.io/v1beta2","kind":"SparkApplication","metadata":&#123;"annotations":&#123;&#125;,"name":"spark-pi","namespace":"default...</span></span><br><span class="line"><span class="attr">API Version:</span>  <span class="string">sparkoperator.k8s.io/v1beta2</span></span><br><span class="line"><span class="attr">Kind:</span>         <span class="string">SparkApplication</span></span><br><span class="line"><span class="attr">Metadata:</span></span><br><span class="line">  <span class="attr">Creation Timestamp:</span>  <span class="number">2020</span><span class="number">-05</span><span class="string">-11T02:56:59Z</span></span><br><span class="line">  <span class="attr">Generation:</span>          <span class="number">1</span></span><br><span class="line">  <span class="attr">Managed Fields:</span></span><br><span class="line">    <span class="attr">API Version:</span>  <span class="string">sparkoperator.k8s.io/v1beta2</span></span><br><span class="line">    <span class="attr">Fields Type:</span>  <span class="string">FieldsV1</span></span><br><span class="line">    <span class="attr">fieldsV1:</span></span><br><span class="line">      <span class="attr">f:metadata:</span></span><br><span class="line">        <span class="attr">f:annotations:</span></span><br><span class="line">          <span class="string">.:</span></span><br><span class="line">          <span class="attr">f:kubectl.kubernetes.io/last-applied-configuration:</span></span><br><span class="line">      <span class="attr">f:spec:</span></span><br><span class="line">        <span class="string">.:</span></span><br><span class="line">        <span class="attr">f:driver:</span></span><br><span class="line">          <span class="string">.:</span></span><br><span class="line">          <span class="attr">f:coreLimit:</span></span><br><span class="line">          <span class="attr">f:cores:</span></span><br><span class="line">          <span class="attr">f:labels:</span></span><br><span class="line">            <span class="string">.:</span></span><br><span class="line">            <span class="attr">f:version:</span></span><br><span class="line">          <span class="attr">f:memory:</span></span><br><span class="line">          <span class="attr">f:serviceAccount:</span></span><br><span class="line">          <span class="attr">f:volumeMounts:</span></span><br><span class="line">        <span class="attr">f:executor:</span></span><br><span class="line">          <span class="string">.:</span></span><br><span class="line">          <span class="attr">f:cores:</span></span><br><span class="line">          <span class="attr">f:instances:</span></span><br><span class="line">          <span class="attr">f:labels:</span></span><br><span class="line">            <span class="string">.:</span></span><br><span class="line">            <span class="attr">f:version:</span></span><br><span class="line">          <span class="attr">f:memory:</span></span><br><span class="line">          <span class="attr">f:volumeMounts:</span></span><br><span class="line">        <span class="attr">f:image:</span></span><br><span class="line">        <span class="attr">f:imagePullPolicy:</span></span><br><span class="line">        <span class="attr">f:mainApplicationFile:</span></span><br><span class="line">        <span class="attr">f:mainClass:</span></span><br><span class="line">        <span class="attr">f:mode:</span></span><br><span class="line">        <span class="attr">f:restartPolicy:</span></span><br><span class="line">          <span class="string">.:</span></span><br><span class="line">          <span class="attr">f:type:</span></span><br><span class="line">        <span class="attr">f:sparkVersion:</span></span><br><span class="line">        <span class="attr">f:type:</span></span><br><span class="line">        <span class="attr">f:volumes:</span></span><br><span class="line">    <span class="attr">Manager:</span>      <span class="string">kubectl</span></span><br><span class="line">    <span class="attr">Operation:</span>    <span class="string">Update</span></span><br><span class="line">    <span class="attr">Time:</span>         <span class="number">2020</span><span class="number">-05</span><span class="string">-11T02:56:59Z</span></span><br><span class="line">    <span class="attr">API Version:</span>  <span class="string">sparkoperator.k8s.io/v1beta2</span></span><br><span class="line">    <span class="attr">Fields Type:</span>  <span class="string">FieldsV1</span></span><br><span class="line">    <span class="attr">fieldsV1:</span></span><br><span class="line">      <span class="attr">f:spec:</span></span><br><span class="line">        <span class="attr">f:deps:</span></span><br><span class="line">      <span class="attr">f:status:</span></span><br><span class="line">        <span class="string">.:</span></span><br><span class="line">        <span class="attr">f:applicationState:</span></span><br><span class="line">          <span class="string">.:</span></span><br><span class="line">          <span class="attr">f:state:</span></span><br><span class="line">        <span class="attr">f:driverInfo:</span></span><br><span class="line">          <span class="string">.:</span></span><br><span class="line">          <span class="attr">f:podName:</span></span><br><span class="line">          <span class="attr">f:webUIAddress:</span></span><br><span class="line">          <span class="attr">f:webUIPort:</span></span><br><span class="line">          <span class="attr">f:webUIServiceName:</span></span><br><span class="line">        <span class="attr">f:executionAttempts:</span></span><br><span class="line">        <span class="attr">f:executorState:</span></span><br><span class="line">          <span class="string">.:</span></span><br><span class="line">          <span class="attr">f:spark-pi-1589165820716-exec-1:</span></span><br><span class="line">        <span class="attr">f:lastSubmissionAttemptTime:</span></span><br><span class="line">        <span class="attr">f:sparkApplicationId:</span></span><br><span class="line">        <span class="attr">f:submissionAttempts:</span></span><br><span class="line">        <span class="attr">f:submissionID:</span></span><br><span class="line">        <span class="attr">f:terminationTime:</span></span><br><span class="line">    <span class="attr">Manager:</span>         <span class="string">spark-operator</span></span><br><span class="line">    <span class="attr">Operation:</span>       <span class="string">Update</span></span><br><span class="line">    <span class="attr">Time:</span>            <span class="number">2020</span><span class="number">-05</span><span class="string">-11T02:57:21Z</span></span><br><span class="line">  <span class="attr">Resource Version:</span>  <span class="number">400927</span></span><br><span class="line">  <span class="attr">Self Link:</span>         <span class="string">/apis/sparkoperator.k8s.io/v1beta2/namespaces/default/sparkapplications/spark-pi</span></span><br><span class="line">  <span class="attr">UID:</span>               <span class="string">038ff933-8d11-4741-b00c-6a053f0f369d</span></span><br><span class="line"><span class="attr">Spec:</span></span><br><span class="line">  <span class="attr">Driver:</span></span><br><span class="line">    <span class="attr">Core Limit:</span>  <span class="string">1200m</span></span><br><span class="line">    <span class="attr">Cores:</span>       <span class="number">1</span></span><br><span class="line">    <span class="attr">Labels:</span></span><br><span class="line">      <span class="attr">Version:</span>        <span class="number">2.4</span><span class="number">.5</span></span><br><span class="line">    <span class="attr">Memory:</span>           <span class="string">512m</span></span><br><span class="line">    <span class="attr">Service Account:</span>  <span class="string">spark</span></span><br><span class="line">    <span class="attr">Volume Mounts:</span></span><br><span class="line">      <span class="attr">Mount Path:</span>  <span class="string">/tmp</span></span><br><span class="line">      <span class="attr">Name:</span>        <span class="string">test-volume</span></span><br><span class="line">  <span class="attr">Executor:</span></span><br><span class="line">    <span class="attr">Cores:</span>      <span class="number">1</span></span><br><span class="line">    <span class="attr">Instances:</span>  <span class="number">1</span></span><br><span class="line">    <span class="attr">Labels:</span></span><br><span class="line">      <span class="attr">Version:</span>  <span class="number">2.4</span><span class="number">.5</span></span><br><span class="line">    <span class="attr">Memory:</span>     <span class="string">512m</span></span><br><span class="line">    <span class="attr">Volume Mounts:</span></span><br><span class="line">      <span class="attr">Mount Path:</span>         <span class="string">/tmp</span></span><br><span class="line">      <span class="attr">Name:</span>               <span class="string">test-volume</span></span><br><span class="line">  <span class="attr">Image:</span>                  <span class="string">registry.cn-hangzhou.aliyuncs.com/gcr_spark-operator/spark:v2.4.5</span></span><br><span class="line">  <span class="attr">Image Pull Policy:</span>      <span class="string">Always</span></span><br><span class="line">  <span class="attr">Main Application File:</span>  <span class="string">local:///opt/spark/examples/jars/spark-examples_2.11-2.4.5.jar</span></span><br><span class="line">  <span class="attr">Main Class:</span>             <span class="string">org.apache.spark.examples.SparkPi</span></span><br><span class="line">  <span class="attr">Mode:</span>                   <span class="string">cluster</span></span><br><span class="line">  <span class="attr">Restart Policy:</span></span><br><span class="line">    <span class="attr">Type:</span>         <span class="string">Never</span></span><br><span class="line">  <span class="attr">Spark Version:</span>  <span class="number">2.4</span><span class="number">.5</span></span><br><span class="line">  <span class="attr">Type:</span>           <span class="string">Scala</span></span><br><span class="line">  <span class="attr">Volumes:</span></span><br><span class="line">    <span class="attr">Host Path:</span></span><br><span class="line">      <span class="attr">Path:</span>  <span class="string">/tmp</span></span><br><span class="line">      <span class="attr">Type:</span>  <span class="string">Directory</span></span><br><span class="line">    <span class="attr">Name:</span>    <span class="string">test-volume</span></span><br><span class="line"><span class="attr">Status:</span></span><br><span class="line">  <span class="attr">Application State:</span></span><br><span class="line">    <span class="attr">State:</span>  <span class="string">COMPLETED</span></span><br><span class="line">  <span class="attr">Driver Info:</span></span><br><span class="line">    <span class="attr">Pod Name:</span>             <span class="string">spark-pi-driver</span></span><br><span class="line">    <span class="attr">Web UI Address:</span>       <span class="number">10.102</span><span class="number">.249</span><span class="number">.241</span><span class="string">:4040</span></span><br><span class="line">    <span class="attr">Web UI Port:</span>          <span class="number">4040</span></span><br><span class="line">    <span class="attr">Web UI Service Name:</span>  <span class="string">spark-pi-ui-svc</span></span><br><span class="line">  <span class="attr">Execution Attempts:</span>     <span class="number">1</span></span><br><span class="line">  <span class="attr">Executor State:</span></span><br><span class="line">    <span class="attr">spark-pi-1589165820716-exec-1:</span>  <span class="string">COMPLETED</span></span><br><span class="line">  <span class="attr">Last Submission Attempt Time:</span>     <span class="number">2020</span><span class="number">-05</span><span class="string">-11T02:57:02Z</span></span><br><span class="line">  <span class="attr">Spark Application Id:</span>             <span class="string">spark-fdeffb23aefa46369ad57e30df0b3ac8</span></span><br><span class="line">  <span class="attr">Submission Attempts:</span>              <span class="number">1</span></span><br><span class="line">  <span class="attr">Submission ID:</span>                    <span class="string">59be6cdd-15c3-4edc-9779-d0a44aea8841</span></span><br><span class="line">  <span class="attr">Termination Time:</span>                 <span class="number">2020</span><span class="number">-05</span><span class="string">-11T02:57:21Z</span></span><br><span class="line"><span class="attr">Events:</span></span><br><span class="line">  <span class="string">Type</span>    <span class="string">Reason</span>                     <span class="string">Age</span>                <span class="string">From</span>            <span class="string">Message</span></span><br><span class="line">  <span class="string">----</span>    <span class="string">------</span>                     <span class="string">----</span>               <span class="string">----</span>            <span class="string">-------</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">SparkApplicationAdded</span>      <span class="string">88s</span>                <span class="string">spark-operator</span>  <span class="string">SparkApplication</span> <span class="string">spark-pi</span> <span class="string">was</span> <span class="string">added,</span> <span class="string">enqueuing</span> <span class="string">it</span> <span class="string">for</span> <span class="string">submission</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">SparkApplicationSubmitted</span>  <span class="string">85s</span>                <span class="string">spark-operator</span>  <span class="string">SparkApplication</span> <span class="string">spark-pi</span> <span class="string">was</span> <span class="string">submitted</span> <span class="string">successfully</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">SparkDriverRunning</span>         <span class="string">82s</span>                <span class="string">spark-operator</span>  <span class="string">Driver</span> <span class="string">spark-pi-driver</span> <span class="string">is</span> <span class="string">running</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">SparkExecutorPending</span>       <span class="string">77s</span> <span class="string">(x2</span> <span class="string">over</span> <span class="string">77s)</span>  <span class="string">spark-operator</span>  <span class="string">Executor</span> <span class="string">spark-pi-1589165820716-exec-1</span> <span class="string">is</span> <span class="string">pending</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">SparkExecutorRunning</span>       <span class="string">75s</span>                <span class="string">spark-operator</span>  <span class="string">Executor</span> <span class="string">spark-pi-1589165820716-exec-1</span> <span class="string">is</span> <span class="string">running</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">SparkDriverCompleted</span>       <span class="string">66s</span>                <span class="string">spark-operator</span>  <span class="string">Driver</span> <span class="string">spark-pi-driver</span> <span class="string">completed</span></span><br><span class="line">  <span class="string">Normal</span>  <span class="string">SparkApplicationCompleted</span>  <span class="string">66s</span>                <span class="string">spark-operator</span>  <span class="string">SparkApplication</span> <span class="string">spark-pi</span> <span class="string">completed</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> spark </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>spark on kubernetes部署demo</title>
      <link href="/b3065445.html"/>
      <url>/b3065445.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>kubernetes以其完善的集群调度、资源管理、故障恢复等能力，已经成为事实上的容器集群管理标准。spark接入kubernetes后好处如下：</p><ul><li>统一调度：与其他kubernetes应用一起调度，简化技术栈依赖和管理孤岛</li><li>多租户：可以利用kubernetes原生方案，对spark应用的资源占用进行细粒度的资源管理和隔离</li><li>云原生生态：利用云原生的监控和管理方案，监测spark的性能，便于优化spark。</li></ul><h2 id="工作机制"><a href="#工作机制" class="headerlink" title="工作机制"></a>工作机制</h2><p><img src="/b3065445/image-20200430111658509.png" alt="image-20200430111658509"></p><p>在kubernetes中运行spark的基本机制如上图所示：</p><ol><li>spark-submit直接向<code>kubernetes apiserver</code>发出请求，创建一个<code>driver pod</code></li><li><code>driver pod</code>在集群内运行，并创建<code>executor pod</code>，然后与其连接，令<code>executor pod</code>自身执行应用的代码</li><li>如果<code>executor pod</code>执行完毕，自动进入<code>terminated</code>状态，并被kubernetes集群回收，而<code>driver pod</code>则进入<code>completed</code>状态，可以被kubernetes集群在必要情况下手动或自动地进行回收。<strong>此时，<code>driver pod</code>不占用任何计算资源</strong></li></ol><blockquote><p>启动<code>driver pod</code>和<code>executor pod</code>，可以通过参数配置，利用kubernetes原生调度机制，选择在哪些主机上启动。</p></blockquote><h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><h3 id="用户"><a href="#用户" class="headerlink" title="用户"></a>用户</h3><p>默认spark镜像都是root用户进行启动，实际生产环境中可能不太会有安全漏洞，必要时可以自行修改构建镜像的Dockerfile，指定spark的启动用户。可以在<code>spark-submit</code>中，通过参数，指定POD以对应的用户启动</p><h3 id="权限"><a href="#权限" class="headerlink" title="权限"></a>权限</h3><p>spark与kubernetes交互时，必须具备<strong>操作POD（list、get、create、delete、edit、watch）</strong>的权限，需要提前准备好，需要根据kubernetes的RBAC规则，为<code>driver pod</code>设置好具备权限的serviceaccount。</p><ul><li><p>默认<code>driver pod</code>使用名为default的serviceaccount，可以通过如下命令进行权限设置</p><p><code>kubectl create rolebinding default-admin --clusterrole=admin --serviceaccount=default --namespace=default</code></p><blockquote><p>clusterrole是kubernetes集群自带的一类角色，用于操作集群资源。常见的有cluster-admin(集群内的最高权限)、admin(对集群内大多数资源的操作权限)等。也可以创建只在某个命名空间内有权限的角色，具体请参考官方文档。</p></blockquote></li><li><p>也可以通过标准的RBAC设置方式，使用下面的设置，创建一个具备操作POD权限的serviceaccount，并在提交任务时指定使用这个serviceaccount。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark-role</span></span><br><span class="line"><span class="attr">rules:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">apiGroups:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">""</span></span><br><span class="line">  <span class="attr">resources:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">pods</span></span><br><span class="line">  <span class="attr">verbs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">get</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">list</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">watch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">delete</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">create</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">deletecollection</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">patch</span></span><br><span class="line">  <span class="bullet">-</span> <span class="string">update</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark-role-binding</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark-role</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br></pre></td></tr></table></figure></li><li><p>或者创建一个新的serviceaccount，设置使用kubernetes集群内置的管理角色。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl create serviceaccount spark</span><br><span class="line">kubectl create clusterrolebinding spark-role --clusterrole=admin --serviceaccount=spark --namespace=default</span><br></pre></td></tr></table></figure></li></ul><h1 id="测试spark-on-kubernetes"><a href="#测试spark-on-kubernetes" class="headerlink" title="测试spark on kubernetes"></a>测试spark on kubernetes</h1><h2 id="环境要求-amp-说明"><a href="#环境要求-amp-说明" class="headerlink" title="环境要求&amp;说明"></a>环境要求&amp;说明</h2><ul><li>spark 2.3版本以上</li><li>kubernetes 1.6版本以上，并且在spark所在机器配置好了权限，可以通过kubectl创建资源。</li><li>kubernetes必须启动了dns</li><li>最好安装<code>kubernetes dashboard</code>或者其他图形界面，便于观察测试结果</li><li>演示spark版本为<code>spark-2.4.4-bin-hadoop2.7</code>，kubernetes版本为<code>v1.18.2</code></li><li>spark客户端设置好<code>JAVA_HOME</code></li><li>kubernetes主机至少总计拥有8G内存，4核CPU，否则无法启动。</li></ul><h2 id="构建镜像"><a href="#构建镜像" class="headerlink" title="构建镜像"></a>构建镜像</h2><p>在spark的<strong>根目录</strong>，通过下列命令构建镜像：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">./bin/docker-image-tool.sh -r spark -t 2.4.4 build</span><br><span class="line"><span class="comment"># 需要确保kubernetes所有主机都可以访问这个镜像仓库</span></span><br><span class="line">./bin/docker-image-tool.sh -r spark -t 2.4.4 push</span><br></pre></td></tr></table></figure><p>使用<code>minikube</code>之类的单主机kubernetes集群环境时，可以直接构建镜像，不需要push，最终产生如下一系列镜像。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ docker images|grep spark/spark                        </span><br><span class="line">spark/spark-r                                                                                      2.4.4               d56982d3b554        22 hours ago        759MB</span><br><span class="line">spark/spark-py                                                                                     2.4.4               c075ce165c49        23 hours ago        466MB</span><br><span class="line">spark/spark                                                                                        2.4.4               7672ffe1a0b2        24 hours ago        374MB</span><br></pre></td></tr></table></figure><p>为简化测试流程，也可以直接使用Dockerfile进行构建</p><p><code>docker build -t spark:2.4.4 -f ./kubernetes/dockerfiles/spark/Dockerfile  .</code></p><h2 id="cluster模式提交应用"><a href="#cluster模式提交应用" class="headerlink" title="cluster模式提交应用"></a>cluster模式提交应用</h2><p>以自带的SparkPi为例直接<strong>使用客户端<code>spark-submit</code></strong>执行下列命令进行提交：</p><blockquote><p>要求当前用户下，用户有权限和配置来执行kubectl命令去操作POD。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ ./bin/spark-submit \</span><br><span class="line">--master k8s://http://192.168.137.150:6080 \</span><br><span class="line">--deploy-mode cluster \</span><br><span class="line">--name spark-pi \</span><br><span class="line">--class org.apache.spark.examples.SparkPi \</span><br><span class="line">--conf spark.kubernetes.authenticate.driver.serviceAccountName=spark \</span><br><span class="line">--conf spark.executor.instances=2 \</span><br><span class="line">--conf spark.kubernetes.container.image=spark/spark:2.4.4 \</span><br><span class="line"><span class="built_in">local</span>:///opt/spark/examples/jars/spark-examples_2.11-2.4.4.jar</span><br></pre></td></tr></table></figure><p>最终可以看到<code>driver pod</code>和<code>executor pod</code>正常运行。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ kubectl get pods                       </span><br><span class="line">NAME                               READY   STATUS    RESTARTS   AGE</span><br><span class="line">spark-pi-1588666210091-driver      1/1     Running   0          12s</span><br><span class="line">spark-pi-1588666210091-exec-1      1/1     Running   0          6s</span><br><span class="line">spark-pi-1588666210091-exec-2      1/1     Running   0          6s</span><br></pre></td></tr></table></figure><ul><li><p>master地址默认为https协议，即<code>k8s://192.168.137.150:6443</code>等价于<code>k8s://https://192.1688.137.150:6443</code></p></li><li><p><code>spark.kubernetes.authenticate.driver.serviceAccountName</code>指定<code>driver pod</code>创建时使用的serviceaccount的名称，默认为default</p></li><li><p>local参数的jar包路径为镜像中jar包的路径，而不是客户端本地的路径，这个jar包应当已经打包进去了系统镜像。</p></li><li><p>更多配置项，请参考官方文档<a href="https://spark.apache.org/docs/latest/running-on-kubernetes.html#spark-properties" target="_blank" rel="noopener">spark-properties</a>。</p></li></ul><p>启动完成后，<code>executor pod</code>会被清理，<code>driver pod</code>则变为Completed状态，可以通过如下命令查看<code>driver pod</code>的执行日志：</p><p><code>kubectl logs spark-pi-1588666210091-driver</code></p><h2 id="client模式提交应用"><a href="#client模式提交应用" class="headerlink" title="client模式提交应用"></a>client模式提交应用</h2><h2 id="通过yaml提交应用"><a href="#通过yaml提交应用" class="headerlink" title="通过yaml提交应用"></a>通过yaml提交应用</h2><p>通过yaml定义<code>driver pod</code>，然后由<code>driver pod</code>来启动<code>executor pod</code>，因此要保证<code>driver pod</code>使用的serviceaccount具备操作POD的权限。实质上就是把<code>spark-submit</code>的功能转换为yaml的定义，因此需要对spark的参数配置很了解才能比较好的定义。</p><p>示例yaml内容如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="comment"># 创建具备操作POD权限的serviceaccount  </span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">rbac.authorization.k8s.io/v1beta1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ClusterRoleBinding</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark-role-binding</span></span><br><span class="line"><span class="attr">roleRef:</span></span><br><span class="line">  <span class="attr">apiGroup:</span> <span class="string">rbac.authorization.k8s.io</span></span><br><span class="line">  <span class="attr">kind:</span> <span class="string">ClusterRole</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">edit</span></span><br><span class="line"><span class="attr">subjects:</span></span><br><span class="line"><span class="bullet">-</span> <span class="attr">kind:</span> <span class="string">ServiceAccount</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">#需要确保每个应用的服务名称不重复，相关label需要自行生成惟一的关联值</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">Service</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">sparkpi-spark-driver-svc</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">clusterIP:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">ports:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">driver-rpc-port</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">7078</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">7078</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">blockmanager</span></span><br><span class="line">      <span class="attr">port:</span> <span class="number">7079</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">TCP</span></span><br><span class="line">      <span class="attr">targetPort:</span> <span class="number">7079</span></span><br><span class="line">  <span class="attr">selector:</span></span><br><span class="line">    <span class="attr">spark-app-selector:</span> <span class="string">spark-9b7952456a86413b94c70fe2b3f8496c</span></span><br><span class="line">    <span class="attr">spark-role:</span> <span class="string">driver</span></span><br><span class="line">  <span class="attr">sessionAffinity:</span> <span class="string">None</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">ClusterIP</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment"># configmap定义spark应用的启动参数</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">v1</span></span><br><span class="line"><span class="attr">data:</span></span><br><span class="line">  <span class="attr">spark.properties:</span> <span class="string">|</span></span><br><span class="line">    <span class="string">spark.kubernetes.driver.pod.name=spark-pi-9b7952456a86413b94c70fe2b3f8496c-driver</span></span><br><span class="line">    <span class="string">spark.driver.host=sparkpi-spark-driver-svc.default.svc</span></span><br><span class="line">    <span class="string">spark.kubernetes.container.image=spark\:2.4.4</span></span><br><span class="line">    <span class="string">spark.executor.instances=2</span></span><br><span class="line">    <span class="string">spark.app.id=spark-9b7952456a86413b94c70fe2b3f8496c</span></span><br><span class="line">    <span class="string">spark.app.name=spark-pi</span></span><br><span class="line">    <span class="string">spark.driver.port=7078</span></span><br><span class="line">    <span class="string">spark.kubernetes.resource.type=java</span></span><br><span class="line">    <span class="string">spark.master=k8s\://http\://192.168.137.150\:6080</span></span><br><span class="line">    <span class="string">spark.kubernetes.python.pyFiles=</span></span><br><span class="line">    <span class="string">spark.kubernetes.executor.podNamePrefix=spark-pi-9b7952456a86413b94c70fe2b3f8496c</span></span><br><span class="line">    <span class="string">spark.driver.blockManager.port=7079</span></span><br><span class="line">    <span class="string">spark.jars=/opt/spark/examples/jars/spark-examples_2.11-2.4.4.jar</span></span><br><span class="line">    <span class="string">spark.submit.deployMode=cluster</span></span><br><span class="line">    <span class="string">spark.kubernetes.submitInDriver=true</span></span><br><span class="line">    <span class="string">spark.kubernetes.authenticate.driver.serviceAccountName=spark</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">ConfigMap</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark-pi-9b7952456a86413b94c70fe2b3f8496c-driver-conf-map</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">"Pod"</span></span><br><span class="line"><span class="attr">apiVersion:</span> <span class="string">"v1"</span></span><br><span class="line"><span class="attr">metadata:</span> </span><br><span class="line">  <span class="attr">name:</span> <span class="string">"spark-pi-9b7952456a86413b94c70fe2b3f8496c-driver"</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">"default"</span></span><br><span class="line">  <span class="attr">labels:</span> </span><br><span class="line">    <span class="attr">spark-app-selector:</span> <span class="string">"spark-9b7952456a86413b94c70fe2b3f8496c"</span></span><br><span class="line">    <span class="attr">spark-role:</span> <span class="string">"driver"</span></span><br><span class="line"><span class="attr">spec:</span> </span><br><span class="line">  <span class="attr">volumes:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"spark-local-dir-1"</span></span><br><span class="line">    <span class="attr">emptyDir:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"spark-conf-volume"</span></span><br><span class="line">    <span class="attr">configMap:</span> </span><br><span class="line">      <span class="attr">name:</span> <span class="string">"spark-pi-9b7952456a86413b94c70fe2b3f8496c-driver-conf-map"</span></span><br><span class="line">      <span class="attr">defaultMode:</span> <span class="number">420</span></span><br><span class="line">  <span class="attr">containers:</span> </span><br><span class="line">  <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"spark-kubernetes-driver"</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">"spark:2.4.4"</span></span><br><span class="line">    <span class="attr">args:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="string">"driver"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"--properties-file"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"/opt/spark/conf/spark.properties"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"--class"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"org.apache.spark.examples.SparkPi"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">"spark-internal"</span></span><br><span class="line">    <span class="attr">ports:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"driver-rpc-port"</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">7078</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">"TCP"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"blockmanager"</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">7079</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">"TCP"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"spark-ui"</span></span><br><span class="line">      <span class="attr">containerPort:</span> <span class="number">4040</span></span><br><span class="line">      <span class="attr">protocol:</span> <span class="string">"TCP"</span></span><br><span class="line">    <span class="attr">env:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"SPARK_DRIVER_BIND_ADDRESS"</span></span><br><span class="line">      <span class="attr">valueFrom:</span> </span><br><span class="line">        <span class="attr">fieldRef:</span> </span><br><span class="line">          <span class="attr">apiVersion:</span> <span class="string">"v1"</span></span><br><span class="line">          <span class="attr">fieldPath:</span> <span class="string">"status.podIP"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"SPARK_LOCAL_DIRS"</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">"/var/data/spark-9b7952456a86413b94c70fe2b3f8496c"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"SPARK_CONF_DIR"</span></span><br><span class="line">      <span class="attr">value:</span> <span class="string">"/opt/spark/conf"</span></span><br><span class="line">    <span class="attr">resources:</span> </span><br><span class="line">      <span class="attr">limits:</span> </span><br><span class="line">        <span class="attr">memory:</span> <span class="string">"1408Mi"</span></span><br><span class="line">      <span class="attr">requests:</span> </span><br><span class="line">        <span class="attr">cpu:</span> <span class="string">"1"</span></span><br><span class="line">        <span class="attr">memory:</span> <span class="string">"1408Mi"</span></span><br><span class="line">    <span class="attr">imagePullPolicy:</span> <span class="string">"IfNotPresent"</span></span><br><span class="line">    <span class="attr">volumeMounts:</span> </span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"spark-conf-volume"</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">"/opt/spark/conf"</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">name:</span> <span class="string">"spark-local-dir-1"</span></span><br><span class="line">      <span class="attr">mountPath:</span> <span class="string">"/var/data/spark-9b7952456a86413b94c70fe2b3f8496c"</span>  </span><br><span class="line">  <span class="attr">restartPolicy:</span> <span class="string">"Never"</span></span><br><span class="line">  <span class="attr">serviceAccountName:</span> <span class="string">"spark"</span></span><br></pre></td></tr></table></figure><p>直接使用<code>kubectl create -f</code>创建即可拉起应用。</p><h2 id="spark-operator提交应用"><a href="#spark-operator提交应用" class="headerlink" title="spark operator提交应用"></a>spark operator提交应用</h2><p>通过yaml或者脚本提交应用毕竟比较复杂，实际使用起来不太方便。<a href="https://github.com/GoogleCloudPlatform/spark-on-k8s-operator" target="_blank" rel="noopener">Spark Operator</a> 就是为了解决在Kubernetes集群部署并维护Spark应用而开发的，Spark Operator是经典的CRD + Controller，即Kubernetes Operator的实现，定义了如下两种资源类型的spark应用，具体使用方式可以参考<a href="https://github.com/GoogleCloudPlatform/spark-on-k8s-operator/tree/master/examples" target="_blank" rel="noopener">社区案例</a>。</p><ul><li><p><strong>SparkApplication</strong>：单次spark应用的运行定义。</p></li><li><p><strong>ScheduledSparkApplication</strong>：SparkApplication的升级，带有自定义时间调度策略的作业提交，比如cron表达式或者语义化的周期定义表达式。</p></li></ul><h3 id="安装sparkoperator"><a href="#安装sparkoperator" class="headerlink" title="安装sparkoperator"></a>安装sparkoperator</h3><p>社区推荐使用helm3进行安装：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">helm repo add incubator http://storage.googleapis.com/kubernetes-charts-incubator</span><br><span class="line">helm install incubator/sparkoperator --namespace spark-operator</span><br></pre></td></tr></table></figure><h3 id="提交spark应用"><a href="#提交spark应用" class="headerlink" title="提交spark应用"></a>提交spark应用</h3><p>安装完成后，使用如下yaml定义应用：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">apiVersion:</span> <span class="string">"sparkoperator.k8s.io/v1beta2"</span></span><br><span class="line"><span class="attr">kind:</span> <span class="string">SparkApplication</span></span><br><span class="line"><span class="attr">metadata:</span></span><br><span class="line">  <span class="attr">name:</span> <span class="string">spark-pi</span></span><br><span class="line">  <span class="attr">namespace:</span> <span class="string">default</span></span><br><span class="line"><span class="attr">spec:</span></span><br><span class="line">  <span class="attr">type:</span> <span class="string">Scala</span></span><br><span class="line">  <span class="attr">mode:</span> <span class="string">cluster</span></span><br><span class="line">  <span class="attr">image:</span> <span class="string">"spark:2.4.4"</span></span><br><span class="line">  <span class="attr">imagePullPolicy:</span> <span class="string">IfNotPresent</span></span><br><span class="line">  <span class="attr">mainClass:</span> <span class="string">org.apache.spark.examples.SparkPi</span></span><br><span class="line">  <span class="attr">mainApplicationFile:</span> <span class="string">"local:///opt/spark/examples/jars/spark-examples_2.11-2.4.4.jar"</span></span><br><span class="line">  <span class="attr">sparkVersion:</span> <span class="string">"2.4.4"</span></span><br><span class="line">  <span class="attr">restartPolicy:</span></span><br><span class="line">    <span class="attr">type:</span> <span class="string">Never</span></span><br><span class="line">  <span class="attr">driver:</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="number">2.4</span><span class="number">.4</span></span><br><span class="line">    <span class="attr">serviceAccount:</span> <span class="string">spark</span></span><br><span class="line">  <span class="attr">executor:</span></span><br><span class="line">    <span class="attr">cores:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">instances:</span> <span class="number">1</span></span><br><span class="line">    <span class="attr">memory:</span> <span class="string">"512m"</span></span><br><span class="line">    <span class="attr">labels:</span></span><br><span class="line">      <span class="attr">version:</span> <span class="number">2.4</span><span class="number">.4</span></span><br></pre></td></tr></table></figure><p>使用命令<code>kubectl apply -f</code>以后，自动拉起<code>driver pod</code>和<code>executor pod</code>来启动应用。</p><h2 id="问题处理"><a href="#问题处理" class="headerlink" title="问题处理"></a>问题处理</h2><ol><li><p>如果提交时，出现下列异常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">20/05/05 07:42:50 WARN WatchConnectionManager: Exec Failure: HTTP 403, Status: 403 - </span><br><span class="line">java.net.ProtocolException: Expected HTTP 101 response but was <span class="string">'403 Forbidden'</span></span><br><span class="line">at okhttp3.internal.ws.RealWebSocket.checkResponse(RealWebSocket.java:216)</span><br><span class="line">at okhttp3.internal.ws.RealWebSocket<span class="variable">$2</span>.onResponse(RealWebSocket.java:183)</span><br><span class="line">at okhttp3.RealCall<span class="variable">$AsyncCall</span>.execute(RealCall.java:141)</span><br><span class="line">at okhttp3.internal.NamedRunnable.run(NamedRunnable.java:32)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)</span><br><span class="line">at java.util.concurrent.ThreadPoolExecutor<span class="variable">$Worker</span>.run(ThreadPoolExecutor.java:624)</span><br><span class="line">at java.lang.Thread.run(Thread.java:748)</span><br><span class="line">20/05/05 07:42:50 WARN ExecutorPodsWatchSnapshotSource: Kubernetes client has been closed (this is expected <span class="keyword">if</span> the application is shutting down.)</span><br><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"kubernetes-dispatcher-0"</span> 20/05/05 07:42:50 ERROR SparkContext: Error initializing SparkContext.</span><br><span class="line">io.fabric8.kubernetes.client.KubernetesClientException:</span><br></pre></td></tr></table></figure><p>可能是由于kubernetes-client的jar包版本比较老，EKS安全补丁导致的kubernetes-client无法使用，更新spark根目录jars中的如下三个jar包即可。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubernetes-client-xxxxxxx.jar</span><br><span class="line">kubernetes-model-xxx.jar</span><br><span class="line">kubernetes-model-common-xxx.jar</span><br></pre></td></tr></table></figure><p>删除旧版本，然后下载4.4.2版本即可。示例：</p><p>wget <a href="https://repo1.maven.org/maven2/io/fabric8/kubernetes-model/4.4.2/kubernetes-model-4.4.2.jar" target="_blank" rel="noopener">https://repo1.maven.org/maven2/io/fabric8/kubernetes-model/4.4.2/kubernetes-model-4.4.2.jar</a></p><p>然后重新build镜像，使用新的镜像重新提交任务即可。</p></li><li><p>使用单主机kubernetes集群测试时，主机至少要有4核CPU，否则<code>executor pod</code>会因为CPU资源不足而被挂起调度。</p></li><li><p>如果提交时出现如下异常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">Exception <span class="keyword">in</span> thread <span class="string">"main"</span> io.fabric8.kubernetes.client.KubernetesClientException: Operation: [create]  <span class="keyword">for</span> kind: [Pod]  with name: [null]  <span class="keyword">in</span> namespace: [default]  failed.</span><br><span class="line">        at io.fabric8.kubernetes.client.KubernetesClientException.launderThrowable(KubernetesClientException.java:64)</span><br><span class="line">        at io.fabric8.kubernetes.client.KubernetesClientException.launderThrowable(KubernetesClientException.java:72)</span><br><span class="line">        at io.fabric8.kubernetes.client.dsl.base.BaseOperation.create(BaseOperation.java:364)</span><br><span class="line">        at org.apache.spark.deploy.k8s.submit.Client$<span class="variable">$anonfun</span><span class="variable">$run</span><span class="variable">$2</span>.apply(KubernetesClientApplication.scala:141)</span><br><span class="line">        at org.apache.spark.deploy.k8s.submit.Client$<span class="variable">$anonfun</span><span class="variable">$run</span><span class="variable">$2</span>.apply(KubernetesClientApplication.scala:140)</span><br><span class="line">        at org.apache.spark.util.Utils$.tryWithResource(Utils.scala:2543)</span><br><span class="line">        at org.apache.spark.deploy.k8s.submit.Client.run(KubernetesClientApplication.scala:140)</span><br><span class="line">        at org.apache.spark.deploy.k8s.submit.KubernetesClientApplication$<span class="variable">$anonfun</span><span class="variable">$run</span><span class="variable">$5</span>.apply(KubernetesClientApplication.scala:250)</span><br><span class="line">        at org.apache.spark.deploy.k8s.submit.KubernetesClientApplication$<span class="variable">$anonfun</span><span class="variable">$run</span><span class="variable">$5</span>.apply(KubernetesClientApplication.scala:241)</span><br><span class="line">        at org.apache.spark.util.Utils$.tryWithResource(Utils.scala:2543)</span><br><span class="line">        at org.apache.spark.deploy.k8s.submit.KubernetesClientApplication.run(KubernetesClientApplication.scala:241)</span><br><span class="line">        at org.apache.spark.deploy.k8s.submit.KubernetesClientApplication.start(KubernetesClientApplication.scala:204)</span><br><span class="line">        at org.apache.spark.deploy.SparkSubmit.org<span class="variable">$apache</span><span class="variable">$spark</span><span class="variable">$deploy</span><span class="variable">$SparkSubmit</span>$<span class="variable">$runMain</span>(SparkSubmit.scala:845)</span><br><span class="line">        at org.apache.spark.deploy.SparkSubmit.doRunMain<span class="variable">$1</span>(SparkSubmit.scala:161)</span><br><span class="line">        at org.apache.spark.deploy.SparkSubmit.submit(SparkSubmit.scala:184)</span><br><span class="line">        at org.apache.spark.deploy.SparkSubmit.doSubmit(SparkSubmit.scala:86)</span><br><span class="line">        at org.apache.spark.deploy.SparkSubmit$<span class="variable">$anon</span><span class="variable">$2</span>.doSubmit(SparkSubmit.scala:920)</span><br><span class="line">        at org.apache.spark.deploy.SparkSubmit$.main(SparkSubmit.scala:929)</span><br><span class="line">        at org.apache.spark.deploy.SparkSubmit.main(SparkSubmit.scala)</span><br><span class="line">Caused by: java.net.SocketException: Broken pipe (Write failed)</span><br><span class="line">        at java.net.SocketOutputStream.socketWrite0(Native Method)</span><br></pre></td></tr></table></figure><p>应该是因为kubernetes-client的版本不兼容kubernetes环境的版本，可参考kubernetes-client 包的<a href="https://github.com/fabric8io/kubernetes-client/blob/master/README.md#compatibility-matrix" target="_blank" rel="noopener">版本支持矩阵</a>。升级kubernetes-client或者降级kubernetes环境版本即可，也可以如上面的例子，打开kubernetes的insecure端口，使用http进行接口调用。</p></li><li><p>提交时不在kubernetes集群中，可能会出现如下异常：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">19/05/14 10:38:52 WARN client.Config: Error reading service account token from: [/var/run/secrets/kubernetes.io/serviceaccount/token]. Ignoring.</span><br><span class="line">19/05/14 10:38:53 WARN internal.WatchConnectionManager: Exec Failure</span><br><span class="line">javax.net.ssl.SSLHandshakeException: sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target</span><br><span class="line">at sun.security.ssl.Alerts.getSSLException(Alerts.java:192)</span><br><span class="line">at sun.security.ssl.SSLSocketImpl.fatal(SSLSocketImpl.java:1949)</span><br><span class="line">at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:302)</span><br><span class="line">at sun.security.ssl.Handshaker.fatalSE(Handshaker.java:296)</span><br><span class="line">at sun.security.ssl.ClientHandshaker.serverCertificate(ClientHandshaker.java:1509)</span><br><span class="line">at sun.security.ssl.ClientHandshaker.processMessage(ClientHandshaker.java:216)</span><br><span class="line">at sun.security.ssl.Handshaker.processLoop(Handshaker.java:979)</span><br></pre></td></tr></table></figure><p>这是由于使用https时，访问kubernetes apiserver时，没有对应ca证书导致的，增加设置加载即可。</p><p><code>&quot;spark.kubernetes.authenticate.caCertFile&quot;:&quot;target/classes/ca.crt&quot;</code></p><p>并且需要设置token来进行权限设置。</p><p><code>&quot;spark.kubernetes.authenticate.oauthToken&quot;:&quot;XXXXX&quot;</code></p><p>token可以通过命令<code>kubectl describe secret $(kubectl get secrets |grep spark|awk &#39;{print $1}&#39;)</code>来查看spark serviceaccount的详情进行查看，示例如下:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  ~ kubectl describe secret $(kubectl get secrets |grep spark|awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">Name:         spark-token-t76wt</span><br><span class="line">Namespace:    default</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: spark</span><br><span class="line">              kubernetes.io/service-account.uid: 47ff655c-2cba-43d4-b36a-479d38077bcd</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">namespace:  7 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6Im5NMW5hNU9MSklvYTdEY3E2b1NFTk0xWFhnRndWUlcyYWRnU21KN0k1SlUifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJkZWZhdWx0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZWNyZXQubmFtZSI6InNwYXJrLXRva2VuLXQ3Nnd0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6InNwYXJrIiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQudWlkIjoiNDdmZjY1NWMtMmNiYS00M2Q0LWIzNmEtNDc5ZDM4MDc3YmNkIiwic3ViIjoic3lzdGVtOnNlcnZpY2VhY2NvdW50OmRlZmF1bHQ6c3BhcmsifQ.MomW8YtkFVKFrE5pixDrPfS7idou09m67_JrBPVzt7CNX-O26iK0fstxsFf6qyf8mHuE3absXWFOrnwKrgI8xMdkCuBJqDd0-BMVbvyt0lWW9elTETdAlmM8sDZO2R3rrCcQK8RX97ZqkBUNiI8Wmym0kUj4Co0QYmDwkp3fZ1LHdlHMmAHXEJsDPaD0aTOrBVBTqjjLObzQ3NUveAZZb-zeQLklbEMIg0nceZTRdedq2x5IqmSLTS7w2bBlzg3Mdqc-GrOnjF3mkfpAGDStgPjwKM5XxhB4hg3o0NEt2i2NGCrGELrKEDpcEkFk5h1P_CG7LXZljXHeMle70mz0Fg</span><br><span class="line">ca.crt:     1025 bytes</span><br></pre></td></tr></table></figure></li></ol><h1 id="spark应用jar分发"><a href="#spark应用jar分发" class="headerlink" title="spark应用jar分发"></a>spark应用jar分发</h1><p>测试过程中，我们可以直接使用本地或者打包到镜像中应用jar包，但部署得到生产集群环境时，必须考虑分发方案的问题，主要有以下几种方式：</p><ul><li>打包到镜像中：基于社区Dockerfile，将新的应用打包到镜像中，然后通过配置<code>spark.kubernetes.executor.container.image</code>指定应用所使用的的镜像，然后再提交应用时，即可使用镜像本地文件的方式来启动应用。</li><li>提交到HDFS集群：采用传统方式，使用HDFS集群，新的应用打包后提交到HDFS集群中，提交应用时，通过HDFS文件地址启动应用。</li><li>提交到HTTP/FTP服务：采用传统方式，提交到HTTP/FTP等文件网络服务上，提交应用时，通过URL指示应用jar包地址来启动应用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kubernetes </tag>
            
            <tag> spark </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kubernetes-dashboard部署demo</title>
      <link href="/93953441.html"/>
      <url>/93953441.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><code>kubernetes-dashboard</code>是社区提供的集群管理面板，可以给用户提供一个可视化的 Web 界面来查看当前集群的各种信息。用户可以用 Kubernetes Dashboard 部署容器化的应用、监控应用的状态、执行故障排查任务以及管理 Kubernetes 各种资源。</p><h2 id="社区项目"><a href="#社区项目" class="headerlink" title="社区项目"></a>社区项目</h2><p>官方参考文档：<br><a href="https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/" target="_blank" rel="noopener">https://kubernetes.io/docs/tasks/access-application-cluster/web-ui-dashboard/</a></p><p>github项目地址：<br><a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard</a></p><h1 id="部署kubernetes-dashboard"><a href="#部署kubernetes-dashboard" class="headerlink" title="部署kubernetes-dashboard"></a>部署kubernetes-dashboard</h1><p>采用目前的最新版本<code>2.0.0</code>，在集群中执行如下指令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kubectl apply -f https://raw.githubusercontent.com/kubernetes/dashboard/v2.0.0/aio/deploy/recommended.yaml</span><br></pre></td></tr></table></figure><p>创建的资源都在<code>kubernetes-dashboard</code>命名空间下。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">➜  dashboard kubectl -n kubernetes-dashboard get pods</span><br><span class="line">NAME                                         READY   STATUS              RESTARTS   AGE</span><br><span class="line">dashboard-metrics-scraper-6b4884c9d5-8zvhc   0/1     ContainerCreating   0          29s</span><br><span class="line">kubernetes-dashboard-7b544877d5-tfwcv        0/1     ContainerCreating   0          29s</span><br><span class="line">➜  dashboard kubectl -n kubernetes-dashboard get services</span><br><span class="line">NAME                        TYPE        CLUSTER-IP       EXTERNAL-IP   PORT(S)    AGE</span><br><span class="line">dashboard-metrics-scraper   ClusterIP   10.109.228.132   &lt;none&gt;        8000/TCP   34s</span><br><span class="line">kubernetes-dashboard        ClusterIP   10.101.167.26    &lt;none&gt;        443/TCP    34s</span><br><span class="line">➜  dashboard kubectl -n kubernetes-dashboard get deployments</span><br><span class="line">NAME                        READY   UP-TO-DATE   AVAILABLE   AGE</span><br><span class="line">dashboard-metrics-scraper   0/1     1            0           38s</span><br><span class="line">kubernetes-dashboard        0/1     1            0           38s</span><br></pre></td></tr></table></figure><p>默认<code>kubernetes-dashboard</code>不对集群外暴露服务，需要通过<code>NodePort</code>或者<code>Ingress</code>将其映射到集群外。使用<code>NodePort</code>方式比较简单，执行下列命令，开放端口到<code>32443</code>上。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">kubectl  patch svc kubernetes-dashboard -n kubernetes-dashboard \</span><br><span class="line">-p <span class="string">'&#123;"spec":&#123;"type":"NodePort","ports":[&#123;"port":443,"targetPort":8443,"nodePort":32443&#125;]&#125;&#125;'</span></span><br></pre></td></tr></table></figure><p>查看<code>kubernetes-dashboard</code>服务状态</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">➜  dashboard kubectl -n kubernetes-dashboard describe service kubernetes-dashboard </span><br><span class="line">Name:                     kubernetes-dashboard</span><br><span class="line">Namespace:                kubernetes-dashboard</span><br><span class="line">Labels:                   k8s-app=kubernetes-dashboard</span><br><span class="line">Annotations:              kubectl.kubernetes.io/last-applied-configuration:</span><br><span class="line">                            &#123;"apiVersion":"v1","kind":"Service","metadata":&#123;"annotations":&#123;&#125;,"labels":&#123;"k8s-app":"kubernetes-dashboard"&#125;,"name":"kubernetes-dashboard"...</span><br><span class="line">Selector:                 k8s-app=kubernetes-dashboard</span><br><span class="line">Type:                     NodePort</span><br><span class="line">IP:                       10.101.167.26</span><br><span class="line">Port:                     &lt;unset&gt;  443/TCP</span><br><span class="line">TargetPort:               8443/TCP</span><br><span class="line">NodePort:                 &lt;unset&gt;  32443/TCP</span><br><span class="line">Endpoints:                10.244.0.152:8443</span><br><span class="line">Session Affinity:         None</span><br><span class="line">External Traffic Policy:  Cluster</span><br><span class="line">Events:                   &lt;none&gt;</span><br></pre></td></tr></table></figure><p>当<code>kubernetes-dashboard</code>服务的<code>Endpoints</code>中有可用IP时，表示服务可用。访问任意集群主机的32443端口即可看到界面。注意必须以<code>https</code>访问，并且由于证书是自签发证书，如果出现如下界面，选择<strong><em>继续访问</em></strong>即可。</p><p><img src="/93953441/image-20200430103809485.png" alt="image-20200430103809485"></p><p>界面如下图所示。</p><p><img src="/93953441/image-20200430103913449.png" alt="image-20200430103913449"></p><h1 id="访问UI"><a href="#访问UI" class="headerlink" title="访问UI"></a>访问UI</h1><p>访问时，可以使用token或者kubeconfig文件进行授权，可以参考社区文档：</p><p><a href="https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md" target="_blank" rel="noopener">https://github.com/kubernetes/dashboard/blob/master/docs/user/access-control/creating-sample-user.md</a></p><p>kubeconfig方式比较简单，选择使用kubectl生成的配置文件即可。</p><p>如果要以token方式访问，通过命令创建文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">cat &gt; dashboard-adminuser.yaml &lt;&lt; EOF</span><br><span class="line">apiVersion: v1</span><br><span class="line">kind: ServiceAccount</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard</span><br><span class="line"></span><br><span class="line">---</span><br><span class="line">apiVersion: rbac.authorization.k8s.io/v1</span><br><span class="line">kind: ClusterRoleBinding</span><br><span class="line">metadata:</span><br><span class="line">  name: admin-user</span><br><span class="line">roleRef:</span><br><span class="line">  apiGroup: rbac.authorization.k8s.io</span><br><span class="line">  kind: ClusterRole</span><br><span class="line">  name: cluster-admin</span><br><span class="line">subjects:</span><br><span class="line">- kind: ServiceAccount</span><br><span class="line">  name: admin-user</span><br><span class="line">  namespace: kubernetes-dashboard  </span><br><span class="line">EOF</span><br></pre></td></tr></table></figure><p>其内容表示，在<code>kubernetes-dashboard</code>命名空间内，创建一个<code>admin-user</code>的<code>ServiceAccount</code>，并授予它集群<code>cluster-admin</code>的集群角色。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">➜  dashboard kubectl apply -f dashboard-adminuser.yaml                            </span><br><span class="line">serviceaccount/admin-user created</span><br><span class="line">clusterrolebinding.rbac.authorization.k8s.io/admin-user created</span><br></pre></td></tr></table></figure><ul><li><code>cluster-admin</code>是集群自带的管理员角色，具备几乎所有集群内资源的操作权限，实际生产环境中，需要视情况，按RBAC规范创建分级的角色。</li></ul><p>使用命令查看<code>admin-user</code>的登陆token，输出如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">➜  dashboard kubectl -n kubernetes-dashboard describe secret $(kubectl -n kubernetes-dashboard get secret | grep admin-user-token | awk <span class="string">'&#123;print $1&#125;'</span>)</span><br><span class="line">Name:         admin-user-token-5zch4</span><br><span class="line">Namespace:    kubernetes-dashboard</span><br><span class="line">Labels:       &lt;none&gt;</span><br><span class="line">Annotations:  kubernetes.io/service-account.name: admin-user</span><br><span class="line">              kubernetes.io/service-account.uid: 8ccc5464-e3f6-4b86-bfb7-213a2c3e5259</span><br><span class="line"></span><br><span class="line">Type:  kubernetes.io/service-account-token</span><br><span class="line"></span><br><span class="line">Data</span><br><span class="line">====</span><br><span class="line">ca.crt:     1025 bytes</span><br><span class="line">namespace:  20 bytes</span><br><span class="line">token:      eyJhbGciOiJSUzI1NiIsImtpZCI6Im5NMW5hNU9MSklvYTdEY3E2b1NFTk0xWFhnRndWUlcyYWRnU21KN0k1SlUifQ.eyJpc3MiOiJrdWJlcm5ldGVzL3NlcnZpY2VhY2NvdW50Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9uYW1lc3BhY2UiOiJrdWJlcm5ldGVzLWRhc2hib2FyZCIsImt1YmVybmV0ZXMuaW8vc2VydmljZWFjY291bnQvc2VjcmV0Lm5hbWUiOiJhZG1pbi11c2VyLXRva2VuLTV6Y2g0Iiwia3ViZXJuZXRlcy5pby9zZXJ2aWNlYWNjb3VudC9zZXJ2aWNlLWFjY291bnQubmFtZSI6ImFkbWluLXVzZXIiLCJrdWJlcm5ldGVzLmlvL3NlcnZpY2VhY2NvdW50L3NlcnZpY2UtYWNjb3VudC51aWQiOiI4Y2NjNTQ2NC1lM2Y2LTRiODYtYmZiNy0yMTNhMmMzZTUyNTkiLCJzdWIiOiJzeXN0ZW06c2VydmljZWFjY291bnQ6a3ViZXJuZXRlcy1kYXNoYm9hcmQ6YWRtaW4tdXNlciJ9.VHCC0WRBgZFS38xMjgfg0cFfFTpBwiO1LDoVz5Va_Bvk9fN37AUM3dzjSNVBXsAX37hnNZZ2gbdbYCzFF_HPz6aGXkZD6b0uzHeIarMKviyacYDEOzvsMVOpPCtxTz3FgEG-0lqsH1PPpAXu8qJcjFq88G24DUNW9BWMepXQ0vglJYnSv1JkRg0KaQHLgqusTaiZvn1HijQqA_heg0sVY6GrierbD3088VHAFyL6UY24Z6nlKgrCmSQasde0yRpKn8y6cwwIOJd9GLVdeI00QFs7205PicgfsNyGJKK4WiC4IfqC0GVaViG02yn_H-A29PrvEzANIX01HrTWReHHrA</span><br></pre></td></tr></table></figure><p>将命令输出的token复制到UI的登陆输入框，即可登陆进入界面，如下图所示：</p><p><img src="/93953441/image-20200430104850362.png" alt="image-20200430104850362"></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> kubernetes </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>electron集成element-ui指南</title>
      <link href="/1903cc94.html"/>
      <url>/1903cc94.html</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><h2 id="electron"><a href="#electron" class="headerlink" title="electron"></a>electron</h2><p><code>electron</code> 是一个使用 JavaScript, HTML 和 CSS 等 Web 技术创建跨平台桌面应用程序的框架，简化加速应用开发速度，成为很多开发者常用的开发工具。</p><h2 id="electron-vue"><a href="#electron-vue" class="headerlink" title="electron-vue"></a>electron-vue</h2><p><code>electron-vue</code> 将 <code>electron</code> 和 <code>vue</code> 快速集成起来，充分利用 <code>vue-cli</code> 作为脚手架工具，加上拥有 <code>vue-loader</code> 的 <code>webpack</code>、<code>electron-packager</code> 或是 <code>electron-builder</code> ，以及一些最常用的插件，如 <code>vue-router</code> 、<code>vuex</code> 等等组件的默认集成，帮助快速开发跨平台的桌面应用。</p><h2 id="element-ui"><a href="#element-ui" class="headerlink" title="element-ui"></a>element-ui</h2><h1 id="集成过程"><a href="#集成过程" class="headerlink" title="集成过程"></a>集成过程</h1><blockquote><p>*<em>一定要是用 <code>yarn</code> *</em>作为包依赖管理工具，否则很可能在发布二进制发布包时失败。</p></blockquote><h2 id="脚手架项目"><a href="#脚手架项目" class="headerlink" title="脚手架项目"></a>脚手架项目</h2><p>执行以下命令，创建根据脚手架项目，创建自己的工程</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装 vue-cli 和 脚手架样板代码</span></span><br><span class="line">npm install -g vue-cli</span><br><span class="line">vue init simulatedgreg/electron-vue my-project</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装依赖并运行你的程序</span></span><br><span class="line"><span class="built_in">cd</span> my-project</span><br><span class="line">yarn</span><br><span class="line">yarn run dev</span><br></pre></td></tr></table></figure><h2 id="安装-element-ui"><a href="#安装-element-ui" class="headerlink" title="安装 element-ui"></a>安装 <code>element-ui</code></h2><p>通过以下命令安装依赖：<br><code>yarn install element-ui -S</code></p><p>修改 <code>my-project/src/renderer/main.js</code> 文件，增加以下内容，来引入 <code>element-ui</code>：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// element-ui</span></span><br><span class="line"><span class="keyword">import</span> ElementUI <span class="keyword">from</span> <span class="string">'element-ui'</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line">Vue.use(ElementUI)</span><br></pre></td></tr></table></figure><p>然后就可以在你的<code>vue</code>页面中，添加 <code>element-ui</code> 的各种组件了。</p><h1 id="集成中的问题解决"><a href="#集成中的问题解决" class="headerlink" title="集成中的问题解决"></a>集成中的问题解决</h1><ol><li><p><code>el-table</code> 等组件不能正常显示，这是因为<code>render进程</code>将 <code>element-ui</code> 视为外部组件编译了，导致部分组件无法正常显示，高度异常。将其加入白名单即可。<br>修改文件 <code>my-project/electron-vue/webpack.renderer.config.js</code> ，在 <code>whiteListedModules</code> 中增加 <code>element-ui</code>即可，如下所示：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> whiteListedModules = [<span class="string">'vue'</span>,<span class="string">'element-ui'</span>]</span><br></pre></td></tr></table></figure></li><li><p>打包时</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> electron </tag>
            
            <tag> element-ui </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的manjaro环境配置</title>
      <link href="/b28c3341.html"/>
      <url>/b28c3341.html</url>
      
        <content type="html"><![CDATA[<h1 id="软件源设置"><a href="#软件源设置" class="headerlink" title="软件源设置"></a>软件源设置</h1><p>通过命令<code>pacman-mirrors -c China -m rank</code>，系统更新使用国内镜像源，选择速度最快的。</p><p>修改<code>/etc/pacman.conf</code>，增加如下配置，使用archlinuxcn的中的部分软件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archlinuxcn&#x2F;$arch</span><br></pre></td></tr></table></figure><p>执行<code>pacman -Sy &amp;&amp; pacman -S archlinuxcn-keyring</code>。</p><p>执行<code>pacman -Syyu</code>更新系统。</p><h2 id="yay安装源"><a href="#yay安装源" class="headerlink" title="yay安装源"></a>yay安装源</h2><p>执行<code>pacman -S yay vim</code>，yay工具用于从AUR上安装软件。</p><p>执行以下命令修改 aururl :<br><code>yay --aururl &quot;https://aur.tuna.tsinghua.edu.cn&quot; --save</code><br>修改的配置文件位于 <code>~/.config/yay/config.json</code> 。</p><h1 id="系统设置"><a href="#系统设置" class="headerlink" title="系统设置"></a>系统设置</h1><h2 id="家目录"><a href="#家目录" class="headerlink" title="家目录"></a>家目录</h2><p>修改家目录为英文，便于terminal操作。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">echo '</span><br><span class="line">XDG_DESKTOP_DIR="$HOME/Desktop"</span><br><span class="line">XDG_DOWNLOAD_DIR="$HOME/Downloads"</span><br><span class="line">XDG_TEMPLATES_DIR="$HOME/Templates"</span><br><span class="line">XDG_PUBLICSHARE_DIR="$HOME/Public"</span><br><span class="line">XDG_DOCUMENTS_DIR="$HOME/Documents"</span><br><span class="line">XDG_MUSIC_DIR="$HOME/Music"</span><br><span class="line">XDG_PICTURES_DIR="$HOME/Pictures"</span><br><span class="line">XDG_VIDEOS_DIR="$HOME/Videos"</span><br><span class="line">' &gt;$HOME/.config/user-dirs.dirs</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cd $HOME</span><br><span class="line">mv 公共 Public</span><br><span class="line">mv 模板 Templates</span><br><span class="line">mv 视频 Videos</span><br><span class="line">mv 图片 Pictures</span><br><span class="line">mv 文档 Documents</span><br><span class="line">mv 下载 Downloads</span><br><span class="line">mv 音乐 Music</span><br><span class="line">mv 桌面 Desktop</span><br></pre></td></tr></table></figure><h2 id="输入法"><a href="#输入法" class="headerlink" title="输入法"></a>输入法</h2><p>使用搜狗输入法，目前在linux上还没有更好用的。<br><code>sudo pacman -S fcitx-im fcitx-configtool fcitx-sogoupinyin</code><br>如果有提示选择安装的软件包，直接回车确认即可。</p><p><code>fcitx-qt4</code>已经从<code>fcitx-im</code>包中移除了，导致输入法在IDEA等环境中无法正常切换输入，手动从AUR上下载安装。<br>执行命令<code>yay fcitx-qt4</code>，选择<code>aur/fcitx-qt4</code>包进行安装。</p><blockquote><p>也可以直接安装：<code>sudo pacman -U https://arch-archive.tuna.tsinghua.edu.cn/2019/04-29/community/os/x86_64/fcitx-qt4-4.2.9.6-1-x86_64.pkg.tar.xz</code></p></blockquote><p>设置输入法相关环境变量。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">echo '</span><br><span class="line">export GTK_IM_MODULE=fcitx</span><br><span class="line">export QT_IM_MODULE=fcitx</span><br><span class="line">export XMODIFIERS="@im=fcitx"</span><br><span class="line">' &gt; $HOME/.xprofile</span><br></pre></td></tr></table></figure><h2 id="常用软件"><a href="#常用软件" class="headerlink" title="常用软件"></a>常用软件</h2><p>执行命令安装常用软件：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pacman -S google-chrome typora zssh docker docker-compose jdk netcat jq postman-bin bleachbit sqlite3 yay lantern-bin  wps-office ttf-wps-fonts net-tools code git</span><br></pre></td></tr></table></figure><blockquote><p>安装完docker后，为避免执行docker命令需要sudo，通过<code>sudo gpasswd -a fengjj docker</code>增加用户权限。</p></blockquote><p>工具说明</p><ul><li>lantern-bin：免费的翻墙代理</li><li>net-tools：增加ifconfig、route、netstat等网络诊断工具命令</li><li>code：visual studio code</li></ul><p><strong>完成操作后建议重启系统</strong></p><h2 id="oh-my-zsh配置"><a href="#oh-my-zsh配置" class="headerlink" title="oh-my-zsh配置"></a>oh-my-zsh配置</h2><p>使用高效率的<code>oh-my-zsh</code>作为命令行工具。<br><code>sh -c &quot;$(curl -fsSL https://raw.github.com/ohmyzsh/ohmyzsh/master/tools/install.sh)&quot;</code></p><p>安装插件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-syntax-highlighting.git $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-syntax-highlighting</span><br><span class="line"></span><br><span class="line">git clone https:&#x2F;&#x2F;github.com&#x2F;zsh-users&#x2F;zsh-autosuggestions $&#123;ZSH_CUSTOM:-~&#x2F;.oh-my-zsh&#x2F;custom&#125;&#x2F;plugins&#x2F;zsh-autosuggestions</span><br></pre></td></tr></table></figure><p>修改$HOME/.zshrc，增加插件列表如下：<br><code>plugins=(git zsh-autosuggestions zsh-syntax-highlighting)</code></p><h2 id="IM通信"><a href="#IM通信" class="headerlink" title="IM通信"></a>IM通信</h2><ol><li>微信<br>使用<code>deepin</code>基于<code>deepin-wine</code>封装的实现。<br>安装：<br><code>yay deepin-wechat</code><br>修复闪退bug，修改<code>/opt/deepinwine/apps/Deepin-WeChat/run.sh</code>文件：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 注释这一句</span></span><br><span class="line">/opt/deepinwine/tools/run.sh $BOTTLENAME $APPVER "$1" "$2" "$3"</span><br><span class="line"><span class="meta">#</span><span class="bash"> 添加这一句</span></span><br><span class="line">env WINEPREFIX="$HOME/.deepinwine/Deepin-WeChat" wine "c:\\Program Files\\Tencent\\WeChat\\WeChat.exe" &amp;</span><br></pre></td></tr></table></figure>升级wechat版本：<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rm -rf ~/.deepinwine/Deepin-WeChat/drive_c/Program\ Files/Tencent/WeChat/*</span><br><span class="line">cp ~/.wine/drive_c/Program\ Files/Tencent/WeChat/* ～/.deepinwine/Deepin-WeChat/drive_c/Program\ Files/Tencent/WeChat/</span><br><span class="line">cd  ~/.deepinwine/Deepin-WeChat/</span><br><span class="line">7z d ./files.7z drive_c/Program\ Files/Tencent/WeChat/</span><br><span class="line">7z a ./files.7z drive_c/Program\ Files/Tencent/WeChat/</span><br><span class="line">sudo cp ./files.7z /opt/deepinwine/apps/Deepin-WeChat/files.7z</span><br></pre></td></tr></table></figure></li><li>QQ/TIM<br>同样使用<code>deepin</code>封装的实现，基本支持windows上对应软件的所有功能<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> TIM</span></span><br><span class="line">yaourt -S deepin-wine-tim</span><br><span class="line"><span class="meta">#</span><span class="bash"> QQ</span></span><br><span class="line">yaourt -S deepin-qq-im</span><br></pre></td></tr></table></figure></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> manjaro </tag>
            
            <tag> 系统设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统和常用软件的镜像设置</title>
      <link href="/ba2b6a0e.html"/>
      <url>/ba2b6a0e.html</url>
      
        <content type="html"><![CDATA[<h1 id="各种操作系统使用镜像源"><a href="#各种操作系统使用镜像源" class="headerlink" title="各种操作系统使用镜像源"></a>各种操作系统使用镜像源</h1><h2 id="ubuntu-16-04-使用阿里云镜像源"><a href="#ubuntu-16-04-使用阿里云镜像源" class="headerlink" title="ubuntu 16.04 使用阿里云镜像源"></a>ubuntu 16.04 使用阿里云镜像源</h2><p>修改<code>/etc/apt/sources.list</code>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial main</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial main</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates main</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates main</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial universe</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial universe</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates universe</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-updates universe</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security main</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security main</span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security universe</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; xenial-security universe</span><br></pre></td></tr></table></figure><h2 id="ubuntu-18-04-使用阿里云镜像源"><a href="#ubuntu-18-04-使用阿里云镜像源" class="headerlink" title="ubuntu 18.04 使用阿里云镜像源"></a>ubuntu 18.04 使用阿里云镜像源</h2><p>修改<code>/etc/apt/sources.list</code>内容如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-security main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-updates main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-proposed main restricted universe multiverse</span><br><span class="line"></span><br><span class="line">deb http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br><span class="line">deb-src http:&#x2F;&#x2F;mirrors.aliyun.com&#x2F;ubuntu&#x2F; bionic-backports main restricted universe multiverse</span><br></pre></td></tr></table></figure><h2 id="manjaro-使用中科大aur源"><a href="#manjaro-使用中科大aur源" class="headerlink" title="manjaro 使用中科大aur源"></a>manjaro 使用中科大aur源</h2><p>通过命令<code>pacman-mirrors -c China -m rank</code>，系统更新使用国内镜像源，选择速度最快的。</p><p>修改<code>/etc/pacman.conf</code>，增加如下配置，使用archlinuxcn的中的部分软件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[archlinuxcn]</span><br><span class="line">Server &#x3D; https:&#x2F;&#x2F;mirrors.ustc.edu.cn&#x2F;archlinuxcn&#x2F;$arch</span><br></pre></td></tr></table></figure><p>执行<code>pacman -Sy &amp;&amp; pacman -S archlinuxcn-keyring</code>。</p><h1 id="软件镜像源设置"><a href="#软件镜像源设置" class="headerlink" title="软件镜像源设置"></a>软件镜像源设置</h1><h2 id="npm使用淘宝源"><a href="#npm使用淘宝源" class="headerlink" title="npm使用淘宝源"></a>npm使用淘宝源</h2><p>推荐使用cnpm来进行安装使用。<br><code>npm install -g cnpm --registry=https://registry.npm.taobao.org</code></p><p>也可通过定义给npm定义别名来使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">alias cnpm="npm --registry=https://registry.npm.taobao.org \</span><br><span class="line">--cache=$HOME/.npm/.cache/cnpm \</span><br><span class="line">--disturl=https://npm.taobao.org/dist \</span><br><span class="line">--userconfig=$HOME/.cnpmrc"</span><br></pre></td></tr></table></figure><h2 id="yarn使用淘宝源"><a href="#yarn使用淘宝源" class="headerlink" title="yarn使用淘宝源"></a>yarn使用淘宝源</h2><p>使用<code>npm install -i yarn</code>，安装yarn后，通过下列两条命令设置使用淘宝源来安装工程依赖。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yarn config set registry https://registry.npm.taobao.org -g</span><br><span class="line">yarn config set sass_binary_site http://cdn.npm.taobao.org/dist/node-sass -g</span><br></pre></td></tr></table></figure><h2 id="yay使用清华大学AUR镜像源"><a href="#yay使用清华大学AUR镜像源" class="headerlink" title="yay使用清华大学AUR镜像源"></a>yay使用清华大学AUR镜像源</h2><p>执行以下命令修改 aururl :<br><code>yay --aururl &quot;https://aur.tuna.tsinghua.edu.cn&quot; --save</code><br>修改的配置文件位于 <code>~/.config/yay/config.json</code> 。</p><h2 id="yaourt使用清华大学AUR镜像源"><a href="#yaourt使用清华大学AUR镜像源" class="headerlink" title="yaourt使用清华大学AUR镜像源"></a>yaourt使用清华大学AUR镜像源</h2><p>修改 <code>/etc/yaourtrc</code> ，去掉 <code># AURURL</code> 的注释，修改为</p><p><code>AURURL=&quot;https://aur.tuna.tsinghua.edu.cn&quot;</code></p><h2 id="maven"><a href="#maven" class="headerlink" title="maven"></a>maven</h2><p>修改<code>~/.m2/settings.xml</code>，增加如下配置，使用阿里云镜像源</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version="1.0" encoding="UTF-8"?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span> <span class="attr">xmlns</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">    <span class="attr">xsi:schemaLocation</span>=<span class="string">"http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">mirrors</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mirror</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">id</span>&gt;</span>nexus-aliyun<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">mirrorOf</span>&gt;</span>central<span class="tag">&lt;/<span class="name">mirrorOf</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">name</span>&gt;</span>Nexus aliyun<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">url</span>&gt;</span>http://maven.aliyun.com/nexus/content/groups/public/<span class="tag">&lt;/<span class="name">url</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">mirror</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mirrors</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="golang-modules使用代理"><a href="#golang-modules使用代理" class="headerlink" title="golang modules使用代理"></a>golang modules使用代理</h2><p>执行命令行，配置go modules的代理，不使用代理则无效，可以通过<code>fastgit.org</code>等github的代理，手动clone方式，加快GOPATH依赖的下载</p><p><code>go env -w GOPROXY=https://goproxy.cn,direct</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> 操作系统设置 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ansible入门（一）</title>
      <link href="/979cd505.html"/>
      <url>/979cd505.html</url>
      
        <content type="html"><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>可以参考官方文档，直接使用pip进行安装。</p><h2 id="管理机要求"><a href="#管理机要求" class="headerlink" title="管理机要求"></a>管理机要求</h2><h2 id="托管节点要求"><a href="#托管节点要求" class="headerlink" title="托管节点要求"></a>托管节点要求</h2><ol><li>最好配置使用ssh密钥方式登录，需要提前配置</li></ol><h1 id="第一条命令"><a href="#第一条命令" class="headerlink" title="第一条命令"></a>第一条命令</h1><p>默认使用/etc/ansible/hosts中的主机作为操作对象，示例命令<br><code>ansible all -m setup</code><br>可以获取所有主机的配置信息。</p><blockquote><p>如果一个主机同时在多个分组出现，ansible会自动进行去重</p></blockquote><h1 id="模块"><a href="#模块" class="headerlink" title="模块"></a>模块</h1><p>执行任务的单元，可以使用python、shell脚本或者其他语言进行实现。<br>可使用<code>ansible-doc -s setup</code>查询模块帮助文档</p><h2 id="常用模块"><a href="#常用模块" class="headerlink" title="常用模块"></a>常用模块</h2><p>所有模块参见<a href="https://docs.ansible.com/ansible/latest/modules/modules_by_category.html" target="_blank" rel="noopener">Module Index — Ansible Documentation</a></p><h3 id="ping"><a href="#ping" class="headerlink" title="ping"></a>ping</h3><p>用于检测主机是否可达。命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ansible all -m ping</span></span><br><span class="line">ubuntu1 | SUCCESS =&gt; &#123;</span><br><span class="line">    "ansible_facts": &#123;</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python"</span><br><span class="line">    &#125;, </span><br><span class="line">    "changed": false, </span><br><span class="line">    "ping": "pong"</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h3><p>用于检测托管机器的配置，可以获取CPU、内存、网卡、虚拟化等若干配置，可以使用filter参数过滤单项输出或者使用gather_subnet过滤指定集合输出。命令示例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ansible all -m setup -a <span class="string">'filter=ansible_nodename'</span></span></span><br><span class="line">ubuntu1 | SUCCESS =&gt; &#123;</span><br><span class="line">    "ansible_facts": &#123;</span><br><span class="line">        "ansible_nodename": "ubuntu1", </span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python"</span><br><span class="line">    &#125;, </span><br><span class="line">    "changed": false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="command"><a href="#command" class="headerlink" title="command"></a>command</h3><p>默认模块，用于在托管机器上执行一条指令。<strong>不支持管道符和&amp;&amp;符号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">creates：一个文件名，当该文件存在，则该命令不执行</span><br><span class="line"></span><br><span class="line">free_form：要执行的linux指令</span><br><span class="line"></span><br><span class="line">chdir：在执行指令之前，先切换到该目录</span><br><span class="line"></span><br><span class="line">removes：一个文件名，当该文件不存在，则该选项不执行</span><br><span class="line"></span><br><span class="line">executable：切换shell来执行指令，该执行路径必须是一个绝对路径</span><br></pre></td></tr></table></figure><p>示例命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># ansible all -m command -a &#39;date&#39;</span><br><span class="line">ubuntu1 | CHANGED | rc&#x3D;0 &gt;&gt;</span><br><span class="line">Sat Oct 12 11:31:51 CST 2019</span><br></pre></td></tr></table></figure><h3 id="cron"><a href="#cron" class="headerlink" title="cron"></a>cron</h3><p>用于在托管主机上创建或者删除定时任务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">backup：对远程主机上的原任务计划内容修改之前做备份 </span><br><span class="line">cron_file：如果指定该选项，则用该文件替换远程主机上的cron.d目录下的用户的任务计划 </span><br><span class="line">day：日（1-31，*，*&#x2F;2,……） </span><br><span class="line">hour：小时（0-23，*，*&#x2F;2，……）  </span><br><span class="line">minute：分钟（0-59，*，*&#x2F;2，……） </span><br><span class="line">month：月（1-12，*，*&#x2F;2，……） </span><br><span class="line">weekday：周（0-7，*，……）</span><br><span class="line">job：要执行的任务，依赖于state&#x3D;present </span><br><span class="line">name：该任务的描述 </span><br><span class="line">special_time：指定什么时候执行，参数：reboot,yearly,annually,monthly,weekly,daily,hourly </span><br><span class="line">state：确认该任务计划是创建present还是删除absent</span><br><span class="line">user：以哪个用户的身份执行</span><br></pre></td></tr></table></figure><p>示例命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ansible db -m cron -a <span class="string">'minute="*/10" job="/bin/echo hello" name="test cron job" state="present"'</span></span></span><br><span class="line">ubuntu1 | CHANGED =&gt; &#123;</span><br><span class="line">    "ansible_facts": &#123;</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python"</span><br><span class="line">    &#125;, </span><br><span class="line">    "changed": true, </span><br><span class="line">    "envs": [], </span><br><span class="line">    "jobs": [</span><br><span class="line">        "test cron job"</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">#</span><span class="bash"> ansible all -a <span class="string">"crontab -l"</span></span></span><br><span class="line">ubuntu1 | CHANGED | rc=0 &gt;&gt;</span><br><span class="line"><span class="meta">#</span><span class="bash">Ansible: <span class="built_in">test</span> cron job</span></span><br><span class="line">*/10 * * * * /bin/echo hello</span><br></pre></td></tr></table></figure><h3 id="copy"><a href="#copy" class="headerlink" title="copy"></a>copy</h3><p>向托管主机复制传输文件，与file模块类似</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">backup：在覆盖之前将原文件备份，备份文件包含时间信息。有两个选项：yes|no </span><br><span class="line">content：用于替代&quot;src&quot;,可以直接设定指定文件的值 </span><br><span class="line">dest：必选项。要将源文件复制到的远程主机的绝对路径，如果源文件是一个目录，那么该路径也必须是个目录 </span><br><span class="line">directory_mode：递归的设定目录的权限，默认为系统默认权限</span><br><span class="line">force：如果目标主机包含该文件，但内容不同，如果设置为yes，则强制覆盖，如果为no，则只有当目标主机的目标位置不存在该文件时，才复制。默认为yes</span><br><span class="line">others：所有的file模块里的选项都可以在这里使用</span><br><span class="line">src：要复制到远程主机的文件在本地的地址，可以是绝对路径，也可以是相对路径。如果路径是一个目录，它将递归复制。在这种情况下，如果路径使用&quot;&#x2F;&quot;来结尾，则只复制目录里的内容，如果没有使用&quot;&#x2F;&quot;来结尾，则包含目录在内的整个内容全部复制，类似于rsync。</span><br></pre></td></tr></table></figure><p>命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ansible all -m copy -a <span class="string">'src=/etc/hosts dest=/tmp/ mode=640 backup=no'</span></span></span><br><span class="line">ubuntu1 | CHANGED =&gt; &#123;</span><br><span class="line">    "ansible_facts": &#123;</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python"</span><br><span class="line">    &#125;, </span><br><span class="line">    "changed": true, </span><br><span class="line">    "checksum": "a7005b8efc34b6a8cda3790a4e0861ef53f0c136", </span><br><span class="line">    "dest": "/tmp/hosts", </span><br><span class="line">    "gid": 1000, </span><br><span class="line">    "group": "fengjj", </span><br><span class="line">    "mode": "0640", </span><br><span class="line">    "owner": "fengjj", </span><br><span class="line">    "path": "/tmp/hosts", </span><br><span class="line">    "size": 292, </span><br><span class="line">    "state": "file", </span><br><span class="line">    "uid": 1000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="file"><a href="#file" class="headerlink" title="file"></a>file</h3><p>操作设置托管主机上的文件，文件权限、创建目录等操作</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">force：需要在两种情况下强制创建软链接，一种是源文件不存在但之后会建立的情况下；另一种是目标软链接已存在,需要先取消之前的软链，然后创建新的软链，有两个选项：yes|no </span><br><span class="line">group：定义文件&#x2F;目录的属组 </span><br><span class="line">mode：定义文件&#x2F;目录的权限</span><br><span class="line">owner：定义文件&#x2F;目录的属主</span><br><span class="line">path：必选项，定义文件&#x2F;目录的路径</span><br><span class="line">recurse：递归的设置文件的属性，只对目录有效</span><br><span class="line">src：要被链接的源文件的路径，只应用于state&#x3D;link的情况</span><br><span class="line">dest：被链接到的路径，只应用于state&#x3D;link的情况 </span><br><span class="line">state：  directory：如果目录不存在，创建目录 file：即使文件不存在，也不会被创建 link：创建软链接 hard：创建硬链接 touch：如果文件不存在，则会创建一个新的文件，如果文件或目录已存在，则更新其最后修改时间 absent：删除目录、文件或者取消链接文件</span><br></pre></td></tr></table></figure><p>命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ansible all -m file -a <span class="string">"src=/etc/fstab dest=/tmp/fstab state=link"</span></span></span><br><span class="line">ubuntu1 | CHANGED =&gt; &#123;</span><br><span class="line">    "ansible_facts": &#123;</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python"</span><br><span class="line">    &#125;, </span><br><span class="line">    "changed": true, </span><br><span class="line">    "dest": "/tmp/fstab", </span><br><span class="line">    "gid": 1000, </span><br><span class="line">    "group": "fengjj", </span><br><span class="line">    "mode": "0777", </span><br><span class="line">    "owner": "fengjj", </span><br><span class="line">    "size": 10, </span><br><span class="line">    "src": "/etc/fstab", </span><br><span class="line">    "state": "link", </span><br><span class="line">    "uid": 1000</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="yum"><a href="#yum" class="headerlink" title="yum"></a>yum</h3><p>在RHEL系的操作系统的托管机上安装卸载软件，在Debian系则使用apt模块，参数基本一样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">config_file：yum的配置文件 </span><br><span class="line">disable_gpg_check：关闭gpg_check </span><br><span class="line">disablerepo：不启用某个源 </span><br><span class="line">enablerepo：启用某个源</span><br><span class="line">name：要进行操作的软件包的名字，也可以传递一个url或者一个本地的rpm包的路径 </span><br><span class="line">state：状态（present、installed安装，removed、absent卸载，latest最新）</span><br></pre></td></tr></table></figure><p>命令示例</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ansible all -m yum -a <span class="string">'name=zsh state=latest'</span></span></span><br><span class="line">ubuntu1 | FAILED! =&gt; &#123;</span><br><span class="line">    "ansible_facts": &#123;</span><br><span class="line">        "discovered_interpreter_python": "/usr/bin/python"</span><br><span class="line">    &#125;, </span><br><span class="line">    "changed": false, </span><br><span class="line">    "cmd": "apt-get update", </span><br><span class="line">    "msg": "W: chmod 0700 of directory /var/lib/apt/lists/partial failed - SetupAPTPartialDirectory (1: Operation not permitted)\nE: Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied)\nE: Unable to lock directory /var/lib/apt/lists/\nW: Problem unlinking the file /var/cache/apt/pkgcache.bin - RemoveCaches (13: Permission denied)\nW: Problem unlinking the file /var/cache/apt/srcpkgcache.bin - RemoveCaches (13: Permission denied)", </span><br><span class="line">    "rc": 100, </span><br><span class="line">    "stderr": "W: chmod 0700 of directory /var/lib/apt/lists/partial failed - SetupAPTPartialDirectory (1: Operation not permitted)\nE: Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied)\nE: Unable to lock directory /var/lib/apt/lists/\nW: Problem unlinking the file /var/cache/apt/pkgcache.bin - RemoveCaches (13: Permission denied)\nW: Problem unlinking the file /var/cache/apt/srcpkgcache.bin - RemoveCaches (13: Permission denied)\n", </span><br><span class="line">    "stderr_lines": [</span><br><span class="line">        "W: chmod 0700 of directory /var/lib/apt/lists/partial failed - SetupAPTPartialDirectory (1: Operation not permitted)", </span><br><span class="line">        "E: Could not open lock file /var/lib/apt/lists/lock - open (13: Permission denied)", </span><br><span class="line">        "E: Unable to lock directory /var/lib/apt/lists/", </span><br><span class="line">        "W: Problem unlinking the file /var/cache/apt/pkgcache.bin - RemoveCaches (13: Permission denied)", </span><br><span class="line">        "W: Problem unlinking the file /var/cache/apt/srcpkgcache.bin - RemoveCaches (13: Permission denied)"</span><br><span class="line">    ], </span><br><span class="line">    "stdout": "Reading package lists...\n", </span><br><span class="line">    "stdout_lines": [</span><br><span class="line">        "Reading package lists..."</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h3><p>在托管主机上执行复杂指令或者执行脚本，<strong>支持管道符号和&amp;&amp;符号</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chdir # 执行之前，先cd到指定目录在执行命令</span><br><span class="line"></span><br><span class="line">creates # 一个文件名，当这个文件存在，则该命令不执行</span><br><span class="line"></span><br><span class="line">executable # 切换shell来执行命令，需要使用命令的绝对路径</span><br><span class="line"></span><br><span class="line">free_form&#x3D; # 执行的命令</span><br><span class="line"></span><br><span class="line">removes # 一个文件名，这个文件不存在，则该命令不执行</span><br></pre></td></tr></table></figure><p>示例命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># ansible all -m shell -a &#39;ps -ef|grep node&#39;</span><br><span class="line">ubuntu1 | CHANGED | rc&#x3D;0 &gt;&gt;</span><br><span class="line">fengjj    8913  1761 38 14:29 pts&#x2F;1    00:00:00 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;home&#x2F;fengjj&#x2F;.local&#x2F;bin&#x2F;ansible all -m shell -a ps -ef|grep node</span><br><span class="line">fengjj    8918  8913  6 14:29 pts&#x2F;1    00:00:00 &#x2F;usr&#x2F;bin&#x2F;python &#x2F;home&#x2F;fengjj&#x2F;.local&#x2F;bin&#x2F;ansible all -m shell -a ps -ef|grep node</span><br><span class="line">fengjj    8982  8981  0 14:29 pts&#x2F;2    00:00:00 &#x2F;bin&#x2F;sh -c ps -ef|grep node</span><br><span class="line">fengjj    8984  8982  0 14:29 pts&#x2F;2    00:00:00 grep node</span><br></pre></td></tr></table></figure><h3 id="script"><a href="#script" class="headerlink" title="script"></a>script</h3><p>在托管主机上，先复制后执行<strong>管理机上的指定脚本</strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">chdir # 执行之前，先cd到指定目录在执行脚本</span><br><span class="line"></span><br><span class="line">creates # 一个文件名，当这个文件存在，则不传输并执行脚本</span><br><span class="line"></span><br><span class="line">executable # 切换shell来执行命令，需要使用脚本的绝对路径</span><br><span class="line"></span><br><span class="line">free_form&#x3D; # 执行的脚本路径</span><br><span class="line"></span><br><span class="line">removes # 一个文件名，这个文件不存在，则该传输并执行脚本</span><br></pre></td></tr></table></figure><blockquote><p>脚本将会传递到<br>命令示例</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> ansible all -m script -a <span class="string">"/home/fengjj/test.sh"</span></span></span><br><span class="line">ubuntu1 | CHANGED =&gt; &#123;</span><br><span class="line">    "changed": true, </span><br><span class="line">    "rc": 0, </span><br><span class="line">    "stderr": "Shared connection to ubuntu1 closed.\r\n", </span><br><span class="line">    "stderr_lines": [</span><br><span class="line">        "Shared connection to ubuntu1 closed."</span><br><span class="line">    ], </span><br><span class="line">    "stdout": "123123123\r\n", </span><br><span class="line">    "stdout_lines": [</span><br><span class="line">        "123123123"</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><p>管理托管主机上的服务，支持设置/取消开机启动、重启、启动、关闭服务。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arguments：给命令行提供一些选项 </span><br><span class="line">enabled：是否开机启动 yes|no</span><br><span class="line">name：必选项，服务名称 </span><br><span class="line">pattern：定义一个模式，如果通过status指令来查看服务的状态时，没有响应，就会通过ps指令在进程中根据该模式进行查找，如果匹配到，则认为该服务依然在运行</span><br><span class="line">runlevel：运行级别</span><br><span class="line">sleep：如果执行了restarted，在则stop和start之间沉睡几秒钟</span><br><span class="line">state：对当前服务执行启动，停止、重启、重新加载等操作（started,stopped,restarted,reloaded）</span><br></pre></td></tr></table></figure><p>命令示例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ansible all -m service -a &#39;name&#x3D;docker enabled&#x3D;yes&#39;</span><br></pre></td></tr></table></figure><h1 id="主机文件"><a href="#主机文件" class="headerlink" title="主机文件"></a>主机文件</h1><p>主机允许分组，或者不分组，其格式类似ini文件。示例如下所示</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">mail.example.com</span><br><span class="line"></span><br><span class="line"><span class="section">[webservers]</span></span><br><span class="line">foo.example.com</span><br><span class="line">bar.example.com</span><br><span class="line"></span><br><span class="line"><span class="section">[dbservers]</span></span><br><span class="line">one.example.com</span><br><span class="line">two.example.com</span><br><span class="line">three.example.com</span><br></pre></td></tr></table></figure><p>如果端口号不是22，则需要在每行声明端口号，或者指定IP连接，类似下面的格式<br><code>jumper ansible_ssh_port=5555 ansible_ssh_host=192.168.1.50</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> ansible </tag>
            
            <tag> 分布式环境部署 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu上快速安装kubernetes</title>
      <link href="/dd0d3a5a.html"/>
      <url>/dd0d3a5a.html</url>
      
        <content type="html"><![CDATA[<h1 id="ubuntu-16-04-使用阿里源安装k8s"><a href="#ubuntu-16-04-使用阿里源安装k8s" class="headerlink" title="ubuntu 16.04 使用阿里源安装k8s"></a>ubuntu 16.04 使用阿里源安装k8s</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">apt-get update &amp;&amp; apt-get install -y apt-transport-https</span><br><span class="line"></span><br><span class="line">curl https://mirrors.aliyun.com/kubernetes/apt/doc/apt-key.gpg | apt-key add - </span><br><span class="line"></span><br><span class="line">cat &lt;&lt;EOF &gt;/etc/apt/sources.list.d/kubernetes.list</span><br><span class="line">deb https://mirrors.aliyun.com/kubernetes/apt/ kubernetes-xenial main</span><br><span class="line">EOF</span><br><span class="line"></span><br><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">apt-get install -y kubelet kubeadm kubectl</span><br></pre></td></tr></table></figure><p>然后使用kubeadm安装集群即可，初始化集群时也可以使用阿里云镜像源，加快环境搭建，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">kubeadm init \</span><br><span class="line">    --apiserver-advertise-address=192.168.137.100 \</span><br><span class="line">    --image-repository registry.aliyuncs.com/google_containers \</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> k8s </tag>
            
            <tag> 操作系统设置 </tag>
            
            <tag> kubernetes </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu上快速安装docker</title>
      <link href="/b85e1da6.html"/>
      <url>/b85e1da6.html</url>
      
        <content type="html"><![CDATA[<h1 id="使用阿里云镜像源安装docker"><a href="#使用阿里云镜像源安装docker" class="headerlink" title="使用阿里云镜像源安装docker"></a>使用阿里云镜像源安装docker</h1><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash"> step 1: 安装必要的一些系统工具</span></span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get -y install apt-transport-https ca-certificates curl software-properties-common</span><br><span class="line"><span class="meta">#</span><span class="bash"> step 2: 安装GPG证书</span></span><br><span class="line">curl -fsSL http://mirrors.aliyun.com/docker-ce/linux/ubuntu/gpg | sudo apt-key add -</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 3: 写入软件源信息</span></span><br><span class="line">sudo add-apt-repository "deb [arch=amd64] http://mirrors.aliyun.com/docker-ce/linux/ubuntu $(lsb_release -cs) stable"</span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 4: 更新并安装 Docker-CE</span></span><br><span class="line">sudo apt-get -y update</span><br><span class="line">sudo apt-get -y install docker-ce</span><br><span class="line"> </span><br><span class="line"><span class="meta">#</span><span class="bash"> 安装指定版本的Docker-CE:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 1: 查找Docker-CE的版本:</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> apt-cache madison docker-ce</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce | 17.03.1~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="meta">#</span><span class="bash">   docker-ce | 17.03.0~ce-0~ubuntu-xenial | http://mirrors.aliyun.com/docker-ce/linux/ubuntu xenial/stable amd64 Packages</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> Step 2: 安装指定版本的Docker-CE: (VERSION 例如上面的 17.03.1~ce-0~ubuntu-xenial)</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> sudo apt-get -y install docker-ce</span></span><br></pre></td></tr></table></figure><h2 id="配置镜像加速"><a href="#配置镜像加速" class="headerlink" title="配置镜像加速"></a>配置镜像加速</h2><p>修改<code>/lib/systemd/system/docker.service</code>，在<code>dockerd</code>启动参数后追加如下参数：<br><code>--registry-mirror https://76meodca.mirror.aliyuncs.com</code></p><p>或者修改<code>/etc/docker/daemon.json</code>文件，内容如下</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="attr">"registry-mirrors"</span>: [</span><br><span class="line">        <span class="string">"https://76meodca.mirror.aliyuncs.com"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后执行<code>systemctl daemon-reload&amp;&amp;systemctl restart docker</code>来启用</p><h2 id="安装docker-compose"><a href="#安装docker-compose" class="headerlink" title="安装docker-compose"></a>安装docker-compose</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl -L https://get.daocloud.io/docker/compose/releases/download/1.24.0/docker-compose-`uname -s`-`uname -m` &gt; /usr/local/bin/docker-compose</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> 操作系统设置 </tag>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>go语言最佳实践——函数传参</title>
      <link href="/34be23be.html"/>
      <url>/34be23be.html</url>
      
        <content type="html"><![CDATA[<h1 id="不定个数-可选参数：尽量使用结构体传参"><a href="#不定个数-可选参数：尽量使用结构体传参" class="headerlink" title="不定个数/可选参数：尽量使用结构体传参"></a>不定个数/可选参数：尽量使用结构体传参</h1><ul><li>如果函数参数特别多，尽量使用结构体进行封装，提高代码可读性</li><li>如果函数参数中存在可选参数，尽量使用结构体进行封装，判断和使用比较方便</li></ul><p>例如：</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Process</span><span class="params">(item <span class="keyword">string</span>,allowEmpty,allowBlank,args <span class="keyword">interface</span>&#123;&#125;)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure><p>可以改为使用结构体传参，简化使用方式</p><figure class="highlight golang"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Options &#123;</span><br><span class="line">  AllowEmpty <span class="keyword">bool</span></span><br><span class="line">  AllowBlank <span class="keyword">bool</span></span><br><span class="line">  args <span class="keyword">interface</span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">Process</span><span class="params">(item <span class="keyword">string</span>,options Options)</span></span>&#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> 最佳实践 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>多阶段构建创建最小golang docker镜像</title>
      <link href="/a799a893.html"/>
      <url>/a799a893.html</url>
      
        <content type="html"><![CDATA[<h1 id="多阶段构建压缩golang镜像"><a href="#多阶段构建压缩golang镜像" class="headerlink" title="多阶段构建压缩golang镜像"></a>多阶段构建压缩golang镜像</h1><p>参考下列Dockerfile，分阶段构建镜像，减少无用依赖。</p><figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># BUILD 阶段</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">FROM</span> golang:<span class="number">1.10</span> AS build</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置我们应用程序的工作目录</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /go/src/github.com/scboffspring/blog-multistage-go</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 添加所有需要编译的应用代码</span></span><br><span class="line"><span class="keyword">ADD</span><span class="bash"> . .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 编译一个静态的go应用（在二进制构建中包含C语言依赖库）,把所有依赖打包到生成的二进制文件中</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo .</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置我们应用程序的启动命令</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"./blog-multistage-go"</span>]</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="comment"># CERTS Stage</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="keyword">FROM</span> alpine:latest as certs</span><br><span class="line"></span><br><span class="line"><span class="comment"># Install the CA certificates</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> apk --update add ca-certificates</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># PRODUCTION STAGE</span></span><br><span class="line"><span class="comment"># </span></span><br><span class="line"><span class="keyword">FROM</span> scratch AS prod</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 从certs阶段拷贝CA证书</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=certs /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/ca-certificates.crt</span></span><br><span class="line"><span class="comment"># 从buil阶段拷贝二进制文件</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> --from=build /go/src/github.com/scboffspring/blog-multistage-go/blog-multistage-go .</span></span><br><span class="line"><span class="keyword">CMD</span><span class="bash"> [<span class="string">"./blog-multistage-go"</span>]</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于fabric-sdk-go的交易流程源码分析</title>
      <link href="/f22bd6d5.html"/>
      <url>/f22bd6d5.html</url>
      
        <content type="html"><![CDATA[<h1 id="0-概述"><a href="#0-概述" class="headerlink" title="0 概述"></a>0 概述</h1><p>以<code>fabric-sdk-go</code>的使用为例，基于<code>1.1.0</code>版本的fabric代码，对社区文档的交易流程<a href="https://hyperledger-fabric.readthedocs.io/en/release-1.2/txflow.html?highlight=transaction%20flow" target="_blank" rel="noopener">Transaction Flow</a>进行分析，理解其工作原理。</p><h1 id="1-客户端发送背书请求"><a href="#1-客户端发送背书请求" class="headerlink" title="1 客户端发送背书请求"></a>1 客户端发送背书请求</h1><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//NewExecuteHandler returns query handler with EndorseTxHandler, EndorsementValidationHandler &amp; CommitTxHandler Chained</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewExecuteHandler</span><span class="params">(next ...Handler)</span> <span class="title">Handler</span></span> &#123;</span><br><span class="line">    <span class="comment">//选择背书节点，并像这些节点发送请求获取背书响应</span></span><br><span class="line"><span class="keyword">return</span> NewSelectAndEndorseHandler(</span><br><span class="line">        <span class="comment">//验证所有的背书响应</span></span><br><span class="line">NewEndorsementValidationHandler(</span><br><span class="line">            <span class="comment">//验证背书响应的签名               提交交易到orderer</span></span><br><span class="line">NewSignatureValidationHandler(NewCommitHandler(next...)),</span><br><span class="line">),</span><br><span class="line">)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>sdk采用职责链模式，设计整个交互流程，阅读还比较清晰</p></blockquote><h2 id="选择背书节点"><a href="#选择背书节点" class="headerlink" title="选择背书节点"></a>选择背书节点</h2><blockquote><p>不同的sdk实现逻辑不同，可以手动通过调用配置指定背书节点，也可以通过背书策略，由sdk或者fabric的discovery service生成背书节点</p></blockquote><p><code>fabric-sdk-go</code>的选择逻辑</p><ul><li><p>如果指定了调用目标节点，则直接使用</p></li><li><p>auto：根据通道的Capability配置选择，如果是1.1，使用static策略，如果是1.2使用dynamic策略</p></li><li><p>static：使用配置文件中的所有背书节点</p></li><li><p>dynamic：调用<code>lscc</code>中的<code>getccdata</code>获取到合约的背书策略后，由sdk根据背书策略，在配置的背书节点中选择符合条件的最小集合。</p></li><li><p>fabric：使用service discovery新特性，查询到合约背书需要的最小节点集合</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">getEndorsers</span><span class="params">(requestContext *RequestContext, clientContext *ClientContext, opts ...options.Opt)</span> <span class="params">([]*fab.ChaincodeCall, []fab.Peer, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> selectionOpts []options.Opt</span><br><span class="line">selectionOpts = <span class="built_in">append</span>(selectionOpts, opts...)</span><br><span class="line"><span class="keyword">if</span> requestContext.SelectionFilter != <span class="literal">nil</span> &#123;</span><br><span class="line">selectionOpts = <span class="built_in">append</span>(selectionOpts, selectopts.WithPeerFilter(requestContext.SelectionFilter))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ccCalls := newInvocationChain(requestContext)</span><br><span class="line">    <span class="comment">//根据策略，为合约选择背书节点</span></span><br><span class="line">peers, err := clientContext.Selection.GetEndorsersForChaincode(newInvocationChain(requestContext), selectionOpts...)</span><br><span class="line"><span class="keyword">return</span> ccCalls, peers, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="生成背书请求并发送到背书节点"><a href="#生成背书请求并发送到背书节点" class="headerlink" title="生成背书请求并发送到背书节点"></a>生成背书请求并发送到背书节点</h2><p>请求头内容TransactionHeader数据模型</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TransactionHeader:</span></span><br><span class="line">  <span class="attr">id:</span> <span class="string">交易ID</span>  <span class="comment">#由客户端生成，根据安全随机数、组织身份+证书通过hash算法生成</span></span><br><span class="line">  <span class="attr">creator:</span> <span class="string">调用者身份</span> <span class="comment">#组织ID</span></span><br><span class="line">    <span class="attr">Mspid:</span> <span class="string">组织MSPID</span></span><br><span class="line">    <span class="attr">IdBytes:</span> <span class="string">调用者证书</span></span><br><span class="line">  <span class="attr">nonce:</span> <span class="string">生成交易ID的安全随机数</span></span><br><span class="line">  <span class="attr">channelID:</span> <span class="string">通道名称</span></span><br></pre></td></tr></table></figure><p>背书请求TransactionProposal数据模型</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Header:</span></span><br><span class="line">  <span class="attr">ChannelHeader:</span></span><br><span class="line">    <span class="attr">Type:</span> <span class="string">HeaderType_ENDORSER_TRANSACTION</span> <span class="comment">#背书交易</span></span><br><span class="line">    <span class="attr">TxId:</span> <span class="string">交易ID</span></span><br><span class="line">    <span class="attr">Timestamp:</span> <span class="string">客户端UTC时间戳</span></span><br><span class="line">    <span class="attr">ChannelId:</span> <span class="string">通道名称</span></span><br><span class="line">    <span class="attr">Extension:</span> </span><br><span class="line">      <span class="attr">ChaincodeId:</span> <span class="string">合约名称</span></span><br><span class="line">      <span class="attr">PayloadVisibility:</span> <span class="string">交易数据可见性</span>  <span class="comment">#可以看到交易/交易数据的hash/不可看到交易三种case</span></span><br><span class="line">    <span class="attr">Epoch:</span> <span class="number">0</span>  <span class="comment">#目前默认都是0</span></span><br><span class="line">  <span class="attr">SignatureHeader:</span></span><br><span class="line">    <span class="attr">Nonce:</span> <span class="string">生成交易ID的安全随机数</span></span><br><span class="line">    <span class="attr">Creator:</span> <span class="string">调用者身份</span>  <span class="comment">#从交易请求头中获取</span></span><br><span class="line">      <span class="attr">Mspid:</span> <span class="string">组织MSP</span></span><br><span class="line">      <span class="attr">IdBytes:</span> <span class="string">调用者证书</span></span><br><span class="line"><span class="attr">Payload:</span></span><br><span class="line">  <span class="attr">ChaincodeProposalPayload:</span></span><br><span class="line">    <span class="attr">Input:</span> </span><br><span class="line">      <span class="attr">ChaincodeInvocationSpec:</span></span><br><span class="line">        <span class="attr">ChaincodeSpec:</span></span><br><span class="line">          <span class="attr">Type:</span> <span class="string">调用合约的语言类型</span>  <span class="comment">#?需要确认golang、node、java</span></span><br><span class="line">          <span class="attr">ChainCodeID:</span></span><br><span class="line">            <span class="attr">Name:</span> <span class="string">合约名称</span></span><br><span class="line">          <span class="attr">Input:</span> <span class="string">参数列表</span> <span class="comment">#例如["invoke","a","b","1"]</span></span><br><span class="line">    <span class="attr">TransientMap:</span> <span class="string">交易过程中的瞬态参数map</span></span><br></pre></td></tr></table></figure><p>发送前，对请求对象使用调用者私钥进行签名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// signProposal creates a SignedProposal based on the current context.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">signProposal</span><span class="params">(ctx contextApi.Client, proposal *pb.Proposal)</span> <span class="params">(*pb.SignedProposal, error)</span></span> &#123;</span><br><span class="line">proposalBytes, err := proto.Marshal(proposal)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">"mashal proposal failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signingMgr := ctx.SigningManager()</span><br><span class="line"><span class="keyword">if</span> signingMgr == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.New(<span class="string">"signing manager is nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signature, err := signingMgr.Sign(proposalBytes, ctx.PrivateKey())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.WithMessage(err, <span class="string">"sign failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> &amp;pb.SignedProposal&#123;ProposalBytes: proposalBytes, Signature: signature&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="发送请求到背书节点"><a href="#发送请求到背书节点" class="headerlink" title="发送请求到背书节点"></a>发送请求到背书节点</h2><p>通过<strong>gprc调用</strong>protobuf格式的交易请求</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *endorserClient)</span> <span class="title">ProcessProposal</span><span class="params">(ctx context.Context, in *SignedProposal, opts ...grpc.CallOption)</span> <span class="params">(*ProposalResponse, error)</span></span> &#123;</span><br><span class="line">out := <span class="built_in">new</span>(ProposalResponse)</span><br><span class="line">err := grpc.Invoke(ctx, <span class="string">"/protos.Endorser/ProcessProposal"</span>, in, out, c.cc, opts...)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> out, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2-背书节点生成背书响应"><a href="#2-背书节点生成背书响应" class="headerlink" title="2 背书节点生成背书响应"></a>2 背书节点生成背书响应</h1><h2 id="peer节点启动时，启动背书gpc服务"><a href="#peer节点启动时，启动背书gpc服务" class="headerlink" title="peer节点启动时，启动背书gpc服务"></a>peer节点启动时，启动背书gpc服务</h2><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// NewEndorserServer creates and returns a new Endorser server instance.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">NewEndorserServer</span><span class="params">(privDist privateDataDistributor, s Support)</span> <span class="title">pb</span>.<span class="title">EndorserServer</span></span> &#123;</span><br><span class="line">e := &amp;Endorser&#123;</span><br><span class="line">distributePrivateData: privDist,</span><br><span class="line">s: s,</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> e</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Server API for Endorser service</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> EndorserServer <span class="keyword">interface</span> &#123;</span><br><span class="line">ProcessProposal(context.Context, *SignedProposal) (*ProposalResponse, error)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">RegisterEndorserServer</span><span class="params">(s *grpc.Server, srv EndorserServer)</span></span> &#123;</span><br><span class="line">s.RegisterService(&amp;_Endorser_serviceDesc, srv)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> _<span class="title">Endorser_ProcessProposal_Handler</span><span class="params">(srv <span class="keyword">interface</span>&#123;&#125;, ctx context.Context, dec <span class="keyword">func</span>(<span class="keyword">interface</span>&#123;&#125;)</span> <span class="title">error</span>, <span class="title">interceptor</span> <span class="title">grpc</span>.<span class="title">UnaryServerInterceptor</span>) <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line">in := <span class="built_in">new</span>(SignedProposal)</span><br><span class="line"><span class="keyword">if</span> err := dec(in); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> interceptor == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> srv.(EndorserServer).ProcessProposal(ctx, in)</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//注册背书grpc API</span></span><br><span class="line">info := &amp;grpc.UnaryServerInfo&#123;</span><br><span class="line">Server:     srv,</span><br><span class="line">FullMethod: <span class="string">"/protos.Endorser/ProcessProposal"</span>,</span><br><span class="line">&#125;</span><br><span class="line">handler := <span class="function"><span class="keyword">func</span><span class="params">(ctx context.Context, req <span class="keyword">interface</span>&#123;&#125;)</span> <span class="params">(<span class="keyword">interface</span>&#123;&#125;, error)</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> srv.(EndorserServer).ProcessProposal(ctx, req.(*SignedProposal))</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> interceptor(ctx, in, info, handler)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="背书节点模拟交易"><a href="#背书节点模拟交易" class="headerlink" title="背书节点模拟交易"></a>背书节点模拟交易</h2><p>背书节点，通过调用系统智能合约<code>escc</code>进行背书</p><p>其主要流程：</p><ul><li><p>检查请求消息的合法性</p><ul><li>请求类型只允许HeaderType_ENDORSER_TRANSACTION、HeaderType_CONFIG_UPDATE、HeaderType_CONFIG、HeaderType_PEER_RESOURCE_UPDATE这四种</li><li>带有正常的请求者身份证书和组织信息</li><li>验证请求者证书和签名是合法的证书</li><li>peer使用相同的once、txid和请求者身份，重新生成txid，应当与请求中的txid完全一样，验证两者使用相同算法。</li><li>请求中包含合约名称和payloadvisibility</li><li>如果调用的是<strong>系统智能合约(lscc、csss、qscc、escc、vscc)</strong>，则检查请求者身份必须在通道的writers acl中</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//0 -- check and validate</span></span><br><span class="line">vr, err := e.preProcess(signedProp)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">resp := vr.resp</span><br><span class="line"><span class="keyword">return</span> resp, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li><li><p>使用TxSimulator，<strong>调用交易请求中的智能合约</strong>，产生读写集</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//call specified chaincode (system or user)</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(e *Endorser)</span> <span class="title">callChaincode</span><span class="params">(ctxt context.Context, chainID <span class="keyword">string</span>, version <span class="keyword">string</span>, txid <span class="keyword">string</span>, signedProp *pb.SignedProposal, prop *pb.Proposal, cis *pb.ChaincodeInvocationSpec, cid *pb.ChaincodeID, txsim ledger.TxSimulator)</span> <span class="params">(*pb.Response, *pb.ChaincodeEvent, error)</span></span> &#123;</span><br><span class="line">endorserLogger.Debugf(<span class="string">"[%s][%s] Entry chaincode: %s version: %s"</span>, chainID, shorttxid(txid), cid, version)</span><br><span class="line"><span class="keyword">defer</span> endorserLogger.Debugf(<span class="string">"[%s][%s] Exit"</span>, chainID, shorttxid(txid))</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"><span class="keyword">var</span> res *pb.Response</span><br><span class="line"><span class="keyword">var</span> ccevent *pb.ChaincodeEvent</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> txsim != <span class="literal">nil</span> &#123;</span><br><span class="line">ctxt = context.WithValue(ctxt, chaincode.TXSimulatorKey, txsim)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//is this a system chaincode</span></span><br><span class="line">scc := e.s.IsSysCC(cid.Name)</span><br><span class="line"></span><br><span class="line">res, ccevent, err = e.s.Execute(ctxt, chainID, cid.Name, version, txid, scc, signedProp, prop, cis)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, <span class="literal">nil</span>, err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//per doc anything &lt; 400 can be sent as TX.</span></span><br><span class="line"><span class="comment">//fabric errors will always be &gt;= 400 (ie, unambiguous errors )</span></span><br><span class="line"><span class="comment">//"lscc" will respond with status 200 or 500 (ie, unambiguous OK or ERROR)</span></span><br><span class="line"><span class="keyword">if</span> res.Status &gt;= shim.ERRORTHRESHOLD &#123;</span><br><span class="line"><span class="keyword">return</span> res, <span class="literal">nil</span>, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//...其他非关键code</span></span><br><span class="line"><span class="keyword">return</span> res, ccevent, err</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h2 id="对交易结果背书"><a href="#对交易结果背书" class="headerlink" title="对交易结果背书"></a>对交易结果背书</h2><ul><li>对系统智能合约的发起的交易请求使用自带的<code>escc</code>系统智能合约</li><li>智能合约在初始化时，可以指定背书使用的系统智能合约，默认也使用<code>escc</code>系统智能合约</li><li>1.2.0以前，背书通过<code>escc</code>系统智能合约进行背书，在1.2.0以后，背书过程变为可插拔的实现，因此可以直接通过调用进行背书，但其背书流程是一样的</li><li>背书流程：使用节点本地证书和私钥，对模拟交易响应进行签名，表示完成背书</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> pResp *pb.ProposalResponse</span><br><span class="line"><span class="comment">//TODO till we implement global ESCC, CSCC for system chaincodes</span></span><br><span class="line"><span class="comment">//chainless proposals (such as CSCC) don't have to be endorsed</span></span><br><span class="line"><span class="keyword">if</span> chainID == <span class="string">""</span> &#123;</span><br><span class="line">pResp = &amp;pb.ProposalResponse&#123;Response: res&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">pResp, err = e.endorseProposal(ctx, chainID, txid, signedProp, prop, res, simulationResult, ccevent, hdrExt.PayloadVisibility, hdrExt.ChaincodeId, txsim, cd)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> &amp;pb.ProposalResponse&#123;Response: &amp;pb.Response&#123;Status: <span class="number">500</span>, Message: err.Error()&#125;&#125;, err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> pResp != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> res.Status &gt;= shim.ERRORTHRESHOLD &#123;</span><br><span class="line">endorserLogger.Debugf(<span class="string">"[%s][%s] endorseProposal() resulted in chaincode %s error for txid: %s"</span>, chainID, shorttxid(txid), hdrExt.ChaincodeId, txid)</span><br><span class="line"><span class="keyword">return</span> pResp, &amp;chaincodeError&#123;res.Status, res.Message&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="3-客户端验证背书响应"><a href="#3-客户端验证背书响应" class="headerlink" title="3 客户端验证背书响应"></a>3 客户端验证背书响应</h1><p>背书响应TransactionProposalResponse的数据模型</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TransactionProposalResponse:</span></span><br><span class="line">  <span class="attr">Endorser:</span> <span class="string">背书节点</span> <span class="comment">#例如，grpcs://<span class="doctag">XXX:</span>7051</span></span><br><span class="line">  <span class="attr">Status:</span> <span class="string">背书状态码</span></span><br><span class="line">  <span class="attr">ChaincodeStatus:</span> <span class="string">合约执行状态</span></span><br><span class="line">  <span class="attr">ProposalResponse:</span></span><br><span class="line">    <span class="attr">Payload:</span></span><br><span class="line">      <span class="attr">ProposalHash:</span> <span class="string">背书请求的hash</span> <span class="comment">#关联请求和响应</span></span><br><span class="line">      <span class="attr">Extension:</span></span><br><span class="line">        <span class="attr">Results:</span> <span class="comment">#背书响应产生的读写集</span></span><br><span class="line">        <span class="attr">Events:</span> <span class="string">背书响应产生的事件</span></span><br><span class="line">        <span class="attr">Response:</span></span><br><span class="line">          <span class="attr">Status:</span> <span class="string">合约响应状态</span></span><br><span class="line">          <span class="attr">Message:</span> <span class="string">合约异常时的消息</span></span><br><span class="line">          <span class="attr">Payload:</span> <span class="string">合约产生的输出</span></span><br><span class="line">        <span class="attr">ChaincodeId:</span> <span class="string">产生响应的合约信息</span>  <span class="comment">#记账节点根据此信息检查版本一致</span></span><br><span class="line">          <span class="attr">Name:</span> <span class="string">合约名称</span></span><br><span class="line">          <span class="attr">Version:</span> <span class="string">合约版本</span></span><br><span class="line">          <span class="attr">Path:</span> <span class="string">合约路径</span></span><br><span class="line">    <span class="attr">Version:</span> <span class="string">背书节点产生的版本依赖</span> <span class="comment">#?用途存疑</span></span><br><span class="line">    <span class="attr">Timestamp:</span> <span class="string">背书响应生成UTC时间戳</span></span><br><span class="line">    <span class="attr">Response:</span></span><br><span class="line">      <span class="attr">Status:</span> <span class="string">背书节点响应状态码</span></span><br><span class="line">      <span class="attr">Message:</span> <span class="string">背书节点产生的响应消息</span></span><br><span class="line">      <span class="attr">Payload:</span> <span class="string">背书节点产生的响应</span></span><br><span class="line">    <span class="attr">Endorsement:</span> </span><br><span class="line">      <span class="attr">Endorser:</span> <span class="comment">#背书节点身份</span></span><br><span class="line">        <span class="attr">Mspid:</span> <span class="string">组织MSP</span></span><br><span class="line">        <span class="attr">IdBytes:</span> <span class="string">节点证书</span></span><br><span class="line">      <span class="attr">Signature:</span> <span class="string">背书结果签名</span> <span class="comment">#背书节点使用自己私钥对响应做签名</span></span><br><span class="line">        <span class="comment">#?具体结构</span></span><br></pre></td></tr></table></figure><h2 id="验证背书结果的一致性"><a href="#验证背书结果的一致性" class="headerlink" title="验证背书结果的一致性"></a>验证背书结果的一致性</h2><p>客户端需要验证背书成功并且所有背书节点的结果是一致的</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(f *EndorsementValidationHandler)</span> <span class="title">validate</span><span class="params">(txProposalResponse []*fab.TransactionProposalResponse)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> a1 *pb.ProposalResponse</span><br><span class="line"><span class="keyword">for</span> n, r := <span class="keyword">range</span> txProposalResponse &#123;</span><br><span class="line">response := r.ProposalResponse.GetResponse()</span><br><span class="line">        <span class="comment">//所有背书都成功</span></span><br><span class="line"><span class="keyword">if</span> response.Status &lt; <span class="keyword">int32</span>(common.Status_SUCCESS) || response.Status &gt;= <span class="keyword">int32</span>(common.Status_BAD_REQUEST) &#123;</span><br><span class="line"><span class="keyword">return</span> status.NewFromProposalResponse(r.ProposalResponse, r.Endorser)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> n == <span class="number">0</span> &#123;</span><br><span class="line">a1 = r.ProposalResponse</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//所有节点的背书结果都一致</span></span><br><span class="line"><span class="keyword">if</span> !bytes.Equal(a1.Payload, r.ProposalResponse.Payload) ||</span><br><span class="line">!bytes.Equal(a1.GetResponse().Payload, response.Payload) &#123;</span><br><span class="line"><span class="keyword">return</span> status.New(status.EndorserClientStatus, status.EndorsementMismatch.ToInt32(),</span><br><span class="line"><span class="string">"ProposalResponsePayloads do not match"</span>, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="检查背书响应签名"><a href="#检查背书响应签名" class="headerlink" title="检查背书响应签名"></a>检查背书响应签名</h2><p>检查所有响应中的签名和证书</p><ol><li><p>证书满足以下条件：</p><ul><li><p>证书在有效期内</p></li><li><p>背书者的证书，可以获取到ca链，且ca链上的证书也都在有效期</p></li><li><p>根据配置，还需要检查证书的OU，必须包含client、peer或者orderer等有效ou</p></li></ul></li><li><p>签名检查</p><p>根据响应的Signature和响应Payload，结合响应提供的背书证书，进行验签</p></li></ol><h1 id="4-客户端向orderer申请生成交易"><a href="#4-客户端向orderer申请生成交易" class="headerlink" title="4 客户端向orderer申请生成交易"></a>4 客户端向orderer申请生成交易</h1><p>客户端生成交易对象，并向orderer请求</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *CommitTxHandler)</span> <span class="title">Handle</span><span class="params">(requestContext *RequestContext, clientContext *ClientContext)</span></span> &#123;</span><br><span class="line">txnID := requestContext.Response.TransactionID</span><br><span class="line"></span><br><span class="line"><span class="comment">//Register Tx event</span></span><br><span class="line">reg, statusNotifier, err := clientContext.EventService.RegisterTxStatusEvent(<span class="keyword">string</span>(txnID)) <span class="comment">// <span class="doctag">TODO:</span> Change func to use TransactionID instead of string</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">requestContext.Error = errors.Wrap(err, <span class="string">"error registering for TxStatus event"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> clientContext.EventService.Unregister(reg)</span><br><span class="line"></span><br><span class="line">    <span class="comment">//生成交易对象，并请求获取响应</span></span><br><span class="line">_, err = createAndSendTransaction(clientContext.Transactor, requestContext.Response.Proposal, requestContext.Response.Responses)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">requestContext.Error = errors.Wrap(err, <span class="string">"CreateAndSendTransaction failed"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过eventhub监听区块交易</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> txStatus := &lt;-statusNotifier:</span><br><span class="line">        <span class="comment">//交易是否有效</span></span><br><span class="line">requestContext.Response.TxValidationCode = txStatus.TxValidationCode</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> txStatus.TxValidationCode != pb.TxValidationCode_VALID &#123;</span><br><span class="line">requestContext.Error = status.New(status.EventServerStatus, <span class="keyword">int32</span>(txStatus.TxValidationCode),</span><br><span class="line"><span class="string">"received invalid transaction"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">        <span class="comment">//交易超时：未通过network-config.yaml超时时间的，默认3分钟</span></span><br><span class="line">        <span class="comment">//参考fabric-sdk-go/pkg/fab/endpointconfig.go</span></span><br><span class="line"><span class="keyword">case</span> &lt;-requestContext.Ctx.Done():</span><br><span class="line">requestContext.Error = status.New(status.ClientStatus, status.Timeout.ToInt32(),</span><br><span class="line"><span class="string">"Execute didn't receive block event"</span>, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//Delegate to next step if any</span></span><br><span class="line"><span class="keyword">if</span> c.next != <span class="literal">nil</span> &#123;</span><br><span class="line">c.next.Handle(requestContext, clientContext)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>请求的Transaction对象数据模型</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Transaction:</span></span><br><span class="line">  <span class="attr">Transaction:</span></span><br><span class="line">    <span class="attr">Actions:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">TransactionAction:</span></span><br><span class="line">        <span class="attr">Header:</span> <span class="comment">#背书请求Header中的SignatureHeader</span></span><br><span class="line">        <span class="attr">Payload:</span></span><br><span class="line">          <span class="attr">ChaincodeProposalPayload:</span></span><br><span class="line">            <span class="attr">ProposalResponsePayload:</span></span><br><span class="line">              <span class="attr">ChaincodeProposalPayload:</span></span><br><span class="line">                <span class="attr">Input:</span> <span class="comment">#背书请求中的合约调用Input</span></span><br><span class="line">                <span class="attr">TransientMap:</span> <span class="string">nil</span> <span class="comment">#有意置空，对orderer屏蔽信息</span></span><br><span class="line">            <span class="attr">Endorsements:</span> <span class="comment">#所有背书响应的Endorsement列表</span></span><br><span class="line">          <span class="attr">Action:</span></span><br><span class="line">  <span class="attr">Proposal:</span> <span class="string">背书请求对象</span> <span class="comment">#客户端发送的背书请求对象</span></span><br></pre></td></tr></table></figure><p>发送前，使用调用者私钥对请求进行签名</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// signPayload signs payload</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">signPayload</span><span class="params">(ctx contextApi.Client, payload *common.Payload)</span> <span class="params">(*fab.SignedEnvelope, error)</span></span> &#123;</span><br><span class="line">payloadBytes, err := proto.Marshal(payload)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.WithMessage(err, <span class="string">"marshaling of payload failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">signingMgr := ctx.SigningManager()</span><br><span class="line">signature, err := signingMgr.Sign(payloadBytes, ctx.PrivateKey())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.WithMessage(err, <span class="string">"signing of payload failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> &amp;fab.SignedEnvelope&#123;Payload: payloadBytes, Signature: signature&#125;, <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>随机选择一个orderer节点发送请求，请求时，使用<strong>grpc广播</strong>，通过<strong>双向流方式</strong>，实现交易</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// SendBroadcast Send the created transaction to Orderer.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(o *Orderer)</span> <span class="title">SendBroadcast</span><span class="params">(ctx reqContext.Context, envelope *fab.SignedEnvelope)</span> <span class="params">(*common.Status, error)</span></span> &#123;</span><br><span class="line">conn, err := o.conn(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rpcStatus, ok := grpcstatus.FromError(err)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.WithMessage(status.NewFromGRPCStatus(rpcStatus), <span class="string">"connection failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, status.New(status.OrdererClientStatus, status.ConnectionFailed.ToInt32(), err.Error(), <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> o.releaseConn(ctx, conn)</span><br><span class="line"></span><br><span class="line">broadcastClient, err := ab.NewAtomicBroadcastClient(conn).Broadcast(ctx)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">rpcStatus, ok := grpcstatus.FromError(err)</span><br><span class="line"><span class="keyword">if</span> ok &#123;</span><br><span class="line">err = status.NewFromGRPCStatus(rpcStatus)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">"NewAtomicBroadcastClient failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">responses := <span class="built_in">make</span>(<span class="keyword">chan</span> common.Status)</span><br><span class="line">errs := <span class="built_in">make</span>(<span class="keyword">chan</span> error, <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> broadcastStream(broadcastClient, responses, errs)</span><br><span class="line"></span><br><span class="line">err = broadcastClient.Send(&amp;common.Envelope&#123;</span><br><span class="line">Payload:   envelope.Payload,</span><br><span class="line">Signature: envelope.Signature,</span><br><span class="line">&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span>, errors.Wrap(err, <span class="string">"failed to send envelope to orderer"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err = broadcastClient.CloseSend(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Debugf(<span class="string">"unable to close broadcast client [%s]"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> wrapStreamStatusRPC(responses, errs)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="5-orderer产生区块并记账"><a href="#5-orderer产生区块并记账" class="headerlink" title="5 orderer产生区块并记账"></a>5 orderer产生区块并记账</h1><h2 id="orderer启动时，启动grpc广播服务"><a href="#orderer启动时，启动grpc广播服务" class="headerlink" title="orderer启动时，启动grpc广播服务"></a>orderer启动时，启动grpc广播服务</h2><p>代码在<code>fabric/orderer/common/server/main.go</code>中</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">server := NewServer(manager, signer, &amp;conf.Debug, conf.General.Authentication.TimeWindow, mutualTLS)</span><br><span class="line"></span><br><span class="line"><span class="keyword">switch</span> cmd &#123;</span><br><span class="line"><span class="keyword">case</span> start.FullCommand(): <span class="comment">// "start" command</span></span><br><span class="line">logger.Infof(<span class="string">"Starting %s"</span>, metadata.GetVersionInfo())</span><br><span class="line">initializeProfilingService(conf)</span><br><span class="line">ab.RegisterAtomicBroadcastServer(grpcServer.Server(), server)</span><br><span class="line">logger.Info(<span class="string">"Beginning to serve requests"</span>)</span><br><span class="line">grpcServer.Start()</span><br><span class="line"><span class="keyword">case</span> benchmark.FullCommand(): <span class="comment">// "benchmark" command</span></span><br><span class="line">logger.Info(<span class="string">"Starting orderer in benchmark mode"</span>)</span><br><span class="line">benchmarkServer := performance.GetBenchmarkServer()</span><br><span class="line">benchmarkServer.RegisterService(server)</span><br><span class="line">benchmarkServer.Start()</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="orderer排序"><a href="#orderer排序" class="headerlink" title="orderer排序"></a>orderer排序</h2><p>orderer接收消息，</p><blockquote><p>代码路径<code>fabric/orderer/common/broadcast/broadcast.go</code></p></blockquote><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Handle starts a service thread for a given gRPC connection and services the broadcast connection</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bh *handlerImpl)</span> <span class="title">Handle</span><span class="params">(srv ab.AtomicBroadcast_BroadcastServer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">addr := util.ExtractRemoteAddress(srv.Context())</span><br><span class="line">logger.Debugf(<span class="string">"Starting new broadcast loop for %s"</span>, addr)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">//双向流模式，从客户端接收消息</span></span><br><span class="line">msg, err := srv.Recv()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">logger.Debugf(<span class="string">"Received EOF from %s, hangup"</span>, addr)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warningf(<span class="string">"Error reading from %s: %s"</span>, addr, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//判断消息类型，由对应通道处理消息</span></span><br><span class="line">chdr, isConfig, processor, err := bh.sm.BroadcastChannelSupport(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">channelID := <span class="string">"&lt;malformed_header&gt;"</span></span><br><span class="line"><span class="keyword">if</span> chdr != <span class="literal">nil</span> &#123;</span><br><span class="line">channelID = chdr.ChannelId</span><br><span class="line">&#125;</span><br><span class="line">logger.Warningf(<span class="string">"[channel: %s] Could not get message processor for serving %s: %s"</span>, channelID, addr, err)</span><br><span class="line"><span class="keyword">return</span> srv.Send(&amp;ab.BroadcastResponse&#123;Status: cb.Status_BAD_REQUEST, Info: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err = processor.WaitReady(); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warningf(<span class="string">"[channel: %s] Rejecting broadcast of message from %s with SERVICE_UNAVAILABLE: rejected by Consenter: %s"</span>, chdr.ChannelId, addr, err)</span><br><span class="line"><span class="keyword">return</span> srv.Send(&amp;ab.BroadcastResponse&#123;Status: cb.Status_SERVICE_UNAVAILABLE, Info: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> !isConfig &#123;</span><br><span class="line">logger.Debugf(<span class="string">"[channel: %s] Broadcast is processing normal message from %s with txid '%s' of type %s"</span>, chdr.ChannelId, addr, chdr.TxId, cb.HeaderType_name[chdr.Type])</span><br><span class="line"></span><br><span class="line">configSeq, err := processor.ProcessNormalMsg(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warningf(<span class="string">"[channel: %s] Rejecting broadcast of normal message from %s because of error: %s"</span>, chdr.ChannelId, addr, err)</span><br><span class="line"><span class="keyword">return</span> srv.Send(&amp;ab.BroadcastResponse&#123;Status: ClassifyError(err), Info: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//对请求进行排序</span></span><br><span class="line">err = processor.Order(msg, configSeq)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warningf(<span class="string">"[channel: %s] Rejecting broadcast of normal message from %s with SERVICE_UNAVAILABLE: rejected by Order: %s"</span>, chdr.ChannelId, addr, err)</span><br><span class="line"><span class="keyword">return</span> srv.Send(&amp;ab.BroadcastResponse&#123;Status: cb.Status_SERVICE_UNAVAILABLE, Info: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">// isConfig</span></span><br><span class="line">logger.Debugf(<span class="string">"[channel: %s] Broadcast is processing config update message from %s"</span>, chdr.ChannelId, addr)</span><br><span class="line"></span><br><span class="line">config, configSeq, err := processor.ProcessConfigUpdateMsg(msg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warningf(<span class="string">"[channel: %s] Rejecting broadcast of config message from %s because of error: %s"</span>, chdr.ChannelId, addr, err)</span><br><span class="line"><span class="keyword">return</span> srv.Send(&amp;ab.BroadcastResponse&#123;Status: ClassifyError(err), Info: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">err = processor.Configure(config, configSeq)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warningf(<span class="string">"[channel: %s] Rejecting broadcast of config message from %s with SERVICE_UNAVAILABLE: rejected by Configure: %s"</span>, chdr.ChannelId, addr, err)</span><br><span class="line"><span class="keyword">return</span> srv.Send(&amp;ab.BroadcastResponse&#123;Status: cb.Status_SERVICE_UNAVAILABLE, Info: err.Error()&#125;)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger.Debugf(<span class="string">"[channel: %s] Broadcast has successfully enqueued message of type %s from %s"</span>, chdr.ChannelId, cb.HeaderType_name[chdr.Type], addr)</span><br><span class="line"></span><br><span class="line">err = srv.Send(&amp;ab.BroadcastResponse&#123;Status: cb.Status_SUCCESS&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warningf(<span class="string">"[channel: %s] Error sending to %s: %s"</span>, chdr.ChannelId, addr, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="solo共识"><a href="#solo共识" class="headerlink" title="solo共识"></a>solo共识</h3><p>代码路径<code>fabric/orderer/consensus/solo/consensus.go</code></p><p>solo共识通过单一chan来作为排序的途径，按进入chan的顺序作为消息的顺序。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Order accepts normal messages for ordering</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ch *chain)</span> <span class="title">Order</span><span class="params">(env *cb.Envelope, configSeq <span class="keyword">uint64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> ch.sendChan &lt;- &amp;message&#123;</span><br><span class="line">configSeq: configSeq,</span><br><span class="line">normalMsg: env,</span><br><span class="line">&#125;:</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line"><span class="keyword">case</span> &lt;-ch.exitChan:</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"Exiting"</span>)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>orderer服务启动时，会不断从chan中获取消息，按批次写入区块通知排序外逻辑。</p><ul><li>如果消息总个数达到<code>MaxMessageCount</code>，产生区块</li><li>当前消息大小超过<code>PreferredMaxBytes</code>，则与之前的消息分离，产生两个区块</li><li>如果消息总大小超过<code>PreferredMaxBytes</code>，产生一个区块</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ch *chain)</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> timer &lt;-<span class="keyword">chan</span> time.Time</span><br><span class="line"><span class="keyword">var</span> err error</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">seq := ch.support.Sequence()</span><br><span class="line">err = <span class="literal">nil</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="keyword">case</span> msg := &lt;-ch.sendChan:</span><br><span class="line"><span class="keyword">if</span> msg.configMsg == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="comment">// NormalMsg</span></span><br><span class="line"><span class="keyword">if</span> msg.configSeq &lt; seq &#123;</span><br><span class="line">_, err = ch.support.ProcessNormalMsg(msg.normalMsg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warningf(<span class="string">"Discarding bad normal message: %s"</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//按当前消息大小决定是否打包为区块</span></span><br><span class="line">batches, _ := ch.support.BlockCutter().Ordered(msg.normalMsg)</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(batches) == <span class="number">0</span> &amp;&amp; timer == <span class="literal">nil</span> &#123;</span><br><span class="line">timer = time.After(ch.support.SharedConfig().BatchTimeout())</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> _, batch := <span class="keyword">range</span> batches &#123;</span><br><span class="line">                    <span class="comment">//写入区块到chan</span></span><br><span class="line">block := ch.support.CreateNextBlock(batch)</span><br><span class="line">ch.support.WriteBlock(block, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(batches) &gt; <span class="number">0</span> &#123;</span><br><span class="line">timer = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// ConfigMsg</span></span><br><span class="line"><span class="keyword">if</span> msg.configSeq &lt; seq &#123;</span><br><span class="line">msg.configMsg, _, err = ch.support.ProcessConfigMsg(msg.configMsg)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warningf(<span class="string">"Discarding bad config message: %s"</span>, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//如果是配置消息，则立即打包交易为区块</span></span><br><span class="line">batch := ch.support.BlockCutter().Cut()</span><br><span class="line"><span class="keyword">if</span> batch != <span class="literal">nil</span> &#123;</span><br><span class="line">block := ch.support.CreateNextBlock(batch)</span><br><span class="line">ch.support.WriteBlock(block, <span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">block := ch.support.CreateNextBlock([]*cb.Envelope&#123;msg.configMsg&#125;)</span><br><span class="line">ch.support.WriteConfigBlock(block, <span class="literal">nil</span>)</span><br><span class="line">timer = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> &lt;-timer:</span><br><span class="line"><span class="comment">//clear the timer</span></span><br><span class="line">timer = <span class="literal">nil</span></span><br><span class="line"></span><br><span class="line">batch := ch.support.BlockCutter().Cut()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(batch) == <span class="number">0</span> &#123;</span><br><span class="line">logger.Warningf(<span class="string">"Batch timer expired with no pending requests, this might indicate a bug"</span>)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">logger.Debugf(<span class="string">"Batch timer expired, creating block"</span>)</span><br><span class="line">block := ch.support.CreateNextBlock(batch)</span><br><span class="line">ch.support.WriteBlock(block, <span class="literal">nil</span>)</span><br><span class="line"><span class="keyword">case</span> &lt;-ch.exitChan:</span><br><span class="line">logger.Debugf(<span class="string">"Exiting"</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="kafka共识"><a href="#kafka共识" class="headerlink" title="kafka共识"></a>kafka共识</h3><p>代码路径<code>fabric/orderer/consensus/kafka/chain.go</code></p><ul><li><p>如果消息为配置消息，则立即打包消息为区块，不再管大小的问题</p></li><li><p>将收到的请求封装为 Kafka 消息，通过 Produce 接口发送到 Kakfa 集群对应的 topic 分区中。下列分块条件满足一个则发送分块消息给kafka：</p><ul><li>当前消息数达到 <code>MaxMessageCount</code>，默认为10 </li><li>当前批次总消息尺寸过大<code>AbsoluteMaxBytes</code>，默认为10MB，要求kafka配置<code>message.max.bytes</code>和<code>replica.fetch.max.bytes</code>要比这个值大</li><li>单个消息大小超过<code>PreferredMaxBytes</code>，默认为512KB</li><li>超时时间达到 <code>BatchTimeout</code>，默认2s。</li></ul></li><li><p>Kafka 集群维护多个 topic 分区（即channel对应的topic）。Kakfa 通过共识算法来确保写入到分区后的消息的一致性。一旦写入分区，任何 Orderer 节点看到的都是相同的消息队列。</p></li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Implements the consensus.Chain interface. Called by Broadcast().</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(chain *chainImpl)</span> <span class="title">Order</span><span class="params">(env *cb.Envelope, configSeq <span class="keyword">uint64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> chain.order(env, configSeq, <span class="keyword">int64</span>(<span class="number">0</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(chain *chainImpl)</span> <span class="title">order</span><span class="params">(env *cb.Envelope, configSeq <span class="keyword">uint64</span>, originalOffset <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">marshaledEnv, err := utils.Marshal(env)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"cannot enqueue, unable to marshal envelope because = %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> !chain.enqueue(newNormalMessage(marshaledEnv, configSeq, originalOffset)) &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"cannot enqueue"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>orderer 节点在创建通道后，对通道对应的 Kafka 分区进行数据监听，不断从 Kafka 拉取（Consume）新的交易消息，并对消息进行处理，收到分块消息后，将消息打包为区块。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fabric/orderer/consensus/kafka/chain.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(chain *chainImpl)</span> <span class="title">processTimeToCut</span><span class="params">(ttcMessage *ab.KafkaMessageTimeToCut, receivedOffset <span class="keyword">int64</span>)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">ttcNumber := ttcMessage.GetBlockNumber()</span><br><span class="line">logger.Debugf(<span class="string">"[channel: %s] It's a time-to-cut message for block %d"</span>, chain.ChainID(), ttcNumber)</span><br><span class="line"><span class="keyword">if</span> ttcNumber == chain.lastCutBlockNumber+<span class="number">1</span> &#123;</span><br><span class="line">chain.timer = <span class="literal">nil</span></span><br><span class="line">logger.Debugf(<span class="string">"[channel: %s] Nil'd the timer"</span>, chain.ChainID())</span><br><span class="line">batch := chain.BlockCutter().Cut()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(batch) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"got right time-to-cut message (for block %d),"</span>+</span><br><span class="line"><span class="string">" no pending requests though; this might indicate a bug"</span>, chain.lastCutBlockNumber+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">block := chain.CreateNextBlock(batch)</span><br><span class="line">metadata := utils.MarshalOrPanic(&amp;ab.KafkaMetadata&#123;</span><br><span class="line">LastOffsetPersisted:         receivedOffset,</span><br><span class="line">LastOriginalOffsetProcessed: chain.lastOriginalOffsetProcessed,</span><br><span class="line">&#125;)</span><br><span class="line">        <span class="comment">//写入区块到chan中，被排序外业务接收</span></span><br><span class="line">chain.WriteBlock(block, metadata)</span><br><span class="line">chain.lastCutBlockNumber++</span><br><span class="line">logger.Debugf(<span class="string">"[channel: %s] Proper time-to-cut received, just cut block %d"</span>, chain.ChainID(), chain.lastCutBlockNumber)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> ttcNumber &gt; chain.lastCutBlockNumber+<span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> fmt.Errorf(<span class="string">"got larger time-to-cut message (%d) than allowed/expected (%d)"</span>+</span><br><span class="line"><span class="string">" - this might indicate a bug"</span>, ttcNumber, chain.lastCutBlockNumber+<span class="number">1</span>)</span><br><span class="line">&#125;</span><br><span class="line">logger.Debugf(<span class="string">"[channel: %s] Ignoring stale time-to-cut-message for block %d"</span>, chain.ChainID(), ttcNumber)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="orderer写入区块到本地账本"><a href="#orderer写入区块到本地账本" class="headerlink" title="orderer写入区块到本地账本"></a>orderer写入区块到本地账本</h2><p>orderer服务同时，从共识算法中消费消息，写入区块到本地账本</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fabric/orderer/common/multichannel/blockwriter.go</span></span><br><span class="line"><span class="comment">// WriteBlock should be invoked for blocks which contain normal transactions.</span></span><br><span class="line"><span class="comment">// It sets the target block as the pending next block, and returns before it is committed.</span></span><br><span class="line"><span class="comment">// Before returning, it acquires the committing lock, and spawns a go routine which will</span></span><br><span class="line"><span class="comment">// annotate the block with metadata and signatures, and write the block to the ledger</span></span><br><span class="line"><span class="comment">// then release the lock.  This allows the calling thread to begin assembling the next block</span></span><br><span class="line"><span class="comment">// before the commit phase is complete.</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bw *BlockWriter)</span> <span class="title">WriteBlock</span><span class="params">(block *cb.Block, encodedMetadataValue []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line">bw.committingBlock.Lock()</span><br><span class="line">bw.lastBlock = block</span><br><span class="line"></span><br><span class="line"><span class="keyword">go</span> <span class="function"><span class="keyword">func</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> bw.committingBlock.Unlock()</span><br><span class="line">bw.commitBlock(encodedMetadataValue)</span><br><span class="line">&#125;()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// commitBlock should only ever be invoked with the bw.committingBlock held</span></span><br><span class="line"><span class="comment">// this ensures that the encoded config sequence numbers stay in sync</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(bw *BlockWriter)</span> <span class="title">commitBlock</span><span class="params">(encodedMetadataValue []<span class="keyword">byte</span>)</span></span> &#123;</span><br><span class="line"><span class="comment">// Set the orderer-related metadata field</span></span><br><span class="line"><span class="keyword">if</span> encodedMetadataValue != <span class="literal">nil</span> &#123;</span><br><span class="line">bw.lastBlock.Metadata.Metadata[cb.BlockMetadataIndex_ORDERER] = utils.MarshalOrPanic(&amp;cb.Metadata&#123;Value: encodedMetadataValue&#125;)</span><br><span class="line">&#125;</span><br><span class="line">bw.addBlockSignature(bw.lastBlock)</span><br><span class="line">bw.addLastConfigSignature(bw.lastBlock)</span><br><span class="line"></span><br><span class="line">err := bw.support.Append(bw.lastBlock)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Panicf(<span class="string">"[channel: %s] Could not append block: %s"</span>, bw.support.ChainID(), err)</span><br><span class="line">&#125;</span><br><span class="line">logger.Debugf(<span class="string">"[channel: %s] Wrote block %d"</span>, bw.support.ChainID(), bw.lastBlock.GetHeader().Number)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="6-peer索取新区块记入本地账本"><a href="#6-peer索取新区块记入本地账本" class="headerlink" title="6 peer索取新区块记入本地账本"></a>6 peer索取新区块记入本地账本</h1><h2 id="leader-peer发送deliver消息"><a href="#leader-peer发送deliver消息" class="headerlink" title="leader peer发送deliver消息"></a>leader peer发送deliver消息</h2><p>peer节点再加入通道后，会在peer和orderer之间通过<strong>grpc双向流模式建立连接</strong>，然后发送<code>deliver</code>消息到orderer上读取账本。</p><p>peer节点启动服务时，根据本地账本的通道配置中的orderer地址和leader配置，向orderer发送<code>delivery</code>消息，索要新的区块。</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fabric/core/peer/peer.go</span></span><br><span class="line"><span class="comment">// createChain creates a new chain object and insert it into the chains</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">createChain</span><span class="params">(cid <span class="keyword">string</span>, ledger ledger.PeerLedger, cb *common.Block)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">chanConf, err := retrievePersistedChannelConfig(ledger)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> bundle *channelconfig.Bundle</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> chanConf != <span class="literal">nil</span> &#123;</span><br><span class="line">bundle, err = channelconfig.NewBundle(cid, chanConf)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="comment">// Config was only stored in the statedb starting with v1.1 binaries</span></span><br><span class="line"><span class="comment">// so if the config is not found there, extract it manually from the config block</span></span><br><span class="line">envelopeConfig, err := utils.ExtractEnvelope(cb, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">bundle, err = channelconfig.NewBundleFromEnvelope(envelopeConfig)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">capabilitiesSupportedOrPanic(bundle)</span><br><span class="line"></span><br><span class="line">channelconfig.LogSanityChecks(bundle)</span><br><span class="line"></span><br><span class="line">gossipEventer := service.GetGossipService().NewConfigEventer()</span><br><span class="line"></span><br><span class="line">gossipCallbackWrapper := <span class="function"><span class="keyword">func</span><span class="params">(bundle *resourcesconfig.Bundle)</span></span> &#123;</span><br><span class="line">ac, ok := bundle.ChannelConfig().ApplicationConfig()</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line"><span class="comment">// TODO, handle a missing ApplicationConfig more gracefully</span></span><br><span class="line">ac = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">gossipEventer.ProcessConfigUpdate(&amp;gossipSupport&#123;</span><br><span class="line">Validator:   bundle.ChannelConfig().ConfigtxValidator(),</span><br><span class="line">Application: ac,</span><br><span class="line">Channel:     bundle.ChannelConfig().ChannelConfig(),</span><br><span class="line">&#125;)</span><br><span class="line">service.GetGossipService().SuspectPeers(<span class="function"><span class="keyword">func</span><span class="params">(identity api.PeerIdentityType)</span> <span class="title">bool</span></span> &#123;</span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> this is a place-holder that would somehow make the MSP layer suspect</span></span><br><span class="line"><span class="comment">// that a given certificate is revoked, or its intermediate CA is revoked.</span></span><br><span class="line"><span class="comment">// In the meantime, before we have such an ability, we return true in order</span></span><br><span class="line"><span class="comment">// to suspect ALL identities in order to validate all of them.</span></span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span></span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">trustedRootsCallbackWrapper := <span class="function"><span class="keyword">func</span><span class="params">(bundle *resourcesconfig.Bundle)</span></span> &#123;</span><br><span class="line">updateTrustedRoots(bundle.ChannelConfig())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">mspCallback := <span class="function"><span class="keyword">func</span><span class="params">(bundle *resourcesconfig.Bundle)</span></span> &#123;</span><br><span class="line"><span class="comment">// TODO remove once all references to mspmgmt are gone from peer code</span></span><br><span class="line">mspmgmt.XXXSetMSPManager(cid, bundle.ChannelConfig().MSPManager())</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ac, ok := bundle.ApplicationConfig()</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">ac = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">cs := &amp;chainSupport&#123;</span><br><span class="line">Application: ac, <span class="comment">// TODO, refactor as this is accessible through Manager</span></span><br><span class="line">ledger:      ledger,</span><br><span class="line">fileLedger:  fileledger.NewFileLedger(fileLedgerBlockStore&#123;ledger&#125;),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">peerSingletonCallback := <span class="function"><span class="keyword">func</span><span class="params">(bundle *resourcesconfig.Bundle)</span></span> &#123;</span><br><span class="line">ac, ok := bundle.ChannelConfig().ApplicationConfig()</span><br><span class="line"><span class="keyword">if</span> !ok &#123;</span><br><span class="line">ac = <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line">cs.Application = ac</span><br><span class="line">cs.Resources = bundle.ChannelConfig()</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">resConf := &amp;common.Config&#123;ChannelGroup: &amp;common.ConfigGroup&#123;&#125;&#125;</span><br><span class="line"><span class="keyword">if</span> ac != <span class="literal">nil</span> &amp;&amp; ac.Capabilities().ResourcesTree() &#123;</span><br><span class="line">iResConf, err := retrievePersistedResourceConfig(ledger)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> iResConf != <span class="literal">nil</span> &#123;</span><br><span class="line">resConf = iResConf</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">rBundle, err := resourcesconfig.NewBundle(cid, resConf, bundle)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">cs.bundleSource = resourcesconfig.NewBundleSource(</span><br><span class="line">rBundle,</span><br><span class="line">gossipCallbackWrapper,</span><br><span class="line">trustedRootsCallbackWrapper,</span><br><span class="line">mspCallback,</span><br><span class="line">peerSingletonCallback,</span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">vcs := <span class="keyword">struct</span> &#123;</span><br><span class="line">*chainSupport</span><br><span class="line">*semaphore.Weighted</span><br><span class="line">Support</span><br><span class="line">&#125;&#123;cs, validationWorkersSemaphore, GetSupport()&#125;</span><br><span class="line">validator := txvalidator.NewTxValidator(vcs)</span><br><span class="line">c := committer.NewLedgerCommitterReactive(ledger, <span class="function"><span class="keyword">func</span><span class="params">(block *common.Block)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">chainID, err := utils.GetChainIDFromBlock(block)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> SetCurrConfigBlock(block, chainID)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">ordererAddresses := bundle.ChannelConfig().OrdererAddresses()</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(ordererAddresses) == <span class="number">0</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"No ordering service endpoint provided in configuration block"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// <span class="doctag">TODO:</span> does someone need to call Close() on the transientStoreFactory at shutdown of the peer?</span></span><br><span class="line">store, err := transientStoreFactory.OpenStore(bundle.ConfigtxValidator().ChainID())</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrapf(err, <span class="string">"Failed opening transient store for %s"</span>, bundle.ConfigtxValidator().ChainID())</span><br><span class="line">&#125;</span><br><span class="line">simpleCollectionStore := privdata.NewSimpleCollectionStore(&amp;collectionSupport&#123;</span><br><span class="line">PeerLedger: ledger,</span><br><span class="line">&#125;)</span><br><span class="line">service.GetGossipService().InitializeChannel(bundle.ConfigtxValidator().ChainID(), ordererAddresses, service.Support&#123;</span><br><span class="line">Validator: validator,</span><br><span class="line">Committer: c,</span><br><span class="line">Store:     store,</span><br><span class="line">Cs:        simpleCollectionStore,</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">chains.Lock()</span><br><span class="line"><span class="keyword">defer</span> chains.Unlock()</span><br><span class="line">chains.list[cid] = &amp;chain&#123;</span><br><span class="line">cs:        cs,</span><br><span class="line">cb:        cb,</span><br><span class="line">committer: c,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="orderer处理deliver消息返回区块"><a href="#orderer处理deliver消息返回区块" class="headerlink" title="orderer处理deliver消息返回区块"></a>orderer处理deliver消息返回区块</h2><p>接收delivery消息，并读取本地通道账本，产生区块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// Handle used to handle incoming deliver requests</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(ds *deliverHandler)</span> <span class="title">Handle</span><span class="params">(srv *DeliverServer)</span> <span class="title">error</span></span> &#123;</span><br><span class="line">addr := util.ExtractRemoteAddress(srv.Context())</span><br><span class="line">logger.Debugf(<span class="string">"Starting new deliver loop for %s"</span>, addr)</span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">logger.Debugf(<span class="string">"Attempting to read seek info message from %s"</span>, addr)</span><br><span class="line">        <span class="comment">//接收消息</span></span><br><span class="line">envelope, err := srv.Recv()</span><br><span class="line"><span class="keyword">if</span> err == io.EOF &#123;</span><br><span class="line">logger.Debugf(<span class="string">"Received EOF from %s, hangup"</span>, addr)</span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warningf(<span class="string">"Error reading from %s: %s"</span>, addr, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从本地的通道账本中读取开始读取区块，返回给peer</span></span><br><span class="line"><span class="keyword">if</span> err := ds.deliverBlocks(srv, envelope); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">logger.Debugf(<span class="string">"Waiting for new SeekInfo from %s"</span>, addr)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="leader-peer收到区块并gossip分发"><a href="#leader-peer收到区块并gossip分发" class="headerlink" title="leader peer收到区块并gossip分发"></a>leader peer收到区块并gossip分发</h2><p>从orderer服务收到区块后，通过gossip分发到其他peer</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fabric/core/deliverservice/blocksprovider/blocksprovider.go</span></span><br><span class="line"><span class="comment">// DeliverBlocks used to pull out blocks from the ordering service to</span></span><br><span class="line"><span class="comment">// distributed them across peers</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(b *blocksProviderImpl)</span> <span class="title">DeliverBlocks</span><span class="params">()</span></span> &#123;</span><br><span class="line">errorStatusCounter := <span class="number">0</span></span><br><span class="line">statusCounter := <span class="number">0</span></span><br><span class="line"><span class="keyword">defer</span> b.client.Close()</span><br><span class="line"><span class="keyword">for</span> !b.isDone() &#123;</span><br><span class="line">msg, err := b.client.Recv()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warningf(<span class="string">"[%s] Receive error: %s"</span>, b.chainID, err.Error())</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">switch</span> t := msg.Type.(<span class="keyword">type</span>) &#123;</span><br><span class="line"><span class="keyword">case</span> *orderer.DeliverResponse_Status:</span><br><span class="line"><span class="keyword">if</span> t.Status == common.Status_SUCCESS &#123;</span><br><span class="line">logger.Warningf(<span class="string">"[%s] ERROR! Received success for a seek that should never complete"</span>, b.chainID)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> t.Status == common.Status_BAD_REQUEST || t.Status == common.Status_FORBIDDEN &#123;</span><br><span class="line">logger.Errorf(<span class="string">"[%s] Got error %v"</span>, b.chainID, t)</span><br><span class="line">errorStatusCounter++</span><br><span class="line"><span class="keyword">if</span> errorStatusCounter &gt; b.wrongStatusThreshold &#123;</span><br><span class="line">logger.Criticalf(<span class="string">"[%s] Wrong statuses threshold passed, stopping block provider"</span>, b.chainID)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">errorStatusCounter = <span class="number">0</span></span><br><span class="line">logger.Warningf(<span class="string">"[%s] Got error %v"</span>, b.chainID, t)</span><br><span class="line">&#125;</span><br><span class="line">maxDelay := <span class="keyword">float64</span>(maxRetryDelay)</span><br><span class="line">currDelay := <span class="keyword">float64</span>(time.Duration(math.Pow(<span class="number">2</span>, <span class="keyword">float64</span>(statusCounter))) * <span class="number">100</span> * time.Millisecond)</span><br><span class="line">time.Sleep(time.Duration(math.Min(maxDelay, currDelay)))</span><br><span class="line"><span class="keyword">if</span> currDelay &lt; maxDelay &#123;</span><br><span class="line">statusCounter++</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> t.Status == common.Status_BAD_REQUEST &#123;</span><br><span class="line">b.client.Disconnect(<span class="literal">false</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">b.client.Disconnect(<span class="literal">true</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line"><span class="keyword">case</span> *orderer.DeliverResponse_Block:</span><br><span class="line">errorStatusCounter = <span class="number">0</span></span><br><span class="line">statusCounter = <span class="number">0</span></span><br><span class="line">seqNum := t.Block.Header.Number</span><br><span class="line"></span><br><span class="line">            <span class="comment">//验证区块</span></span><br><span class="line">marshaledBlock, err := proto.Marshal(t.Block)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Errorf(<span class="string">"[%s] Error serializing block with sequence number %d, due to %s"</span>, b.chainID, seqNum, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> err := b.mcs.VerifyBlock(gossipcommon.ChainID(b.chainID), seqNum, marshaledBlock); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Errorf(<span class="string">"[%s] Error verifying block with sequnce number %d, due to %s"</span>, b.chainID, seqNum, err)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">            <span class="comment">//分发到同一通道的其他peer</span></span><br><span class="line">numberOfPeers := <span class="built_in">len</span>(b.gossip.PeersOfChannel(gossipcommon.ChainID(b.chainID)))</span><br><span class="line"><span class="comment">// Create payload with a block received</span></span><br><span class="line">payload := createPayload(seqNum, marshaledBlock)</span><br><span class="line"><span class="comment">// Use payload to create gossip message</span></span><br><span class="line">gossipMsg := createGossipMsg(b.chainID, payload)</span><br><span class="line"></span><br><span class="line">logger.Debugf(<span class="string">"[%s] Adding payload locally, buffer seqNum = [%d], peers number [%d]"</span>, b.chainID, seqNum, numberOfPeers)</span><br><span class="line"><span class="comment">// Add payload to local state payloads buffer</span></span><br><span class="line"><span class="keyword">if</span> err := b.gossip.AddPayload(b.chainID, payload); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warning(<span class="string">"Failed adding payload of"</span>, seqNum, <span class="string">"because:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Gossip messages with other nodes</span></span><br><span class="line">logger.Debugf(<span class="string">"[%s] Gossiping block [%d], peers number [%d]"</span>, b.chainID, seqNum, numberOfPeers)</span><br><span class="line">b.gossip.Gossip(gossipMsg)</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">logger.Warningf(<span class="string">"[%s] Received unknown: "</span>, b.chainID, t)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="committing-peer存储账本到本地账本"><a href="#committing-peer存储账本到本地账本" class="headerlink" title="committing peer存储账本到本地账本"></a>committing peer存储账本到本地账本</h2><p>节点启动gossip服务，从leader peer接收到区块消息后，开始提交区块</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//fabric/gossip/state/state.go</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(s *GossipStateProviderImpl)</span> <span class="title">deliverPayloads</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> s.done.Done()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">        <span class="comment">//经历一系列代码流转，接收消息从中取出区块内容</span></span><br><span class="line"><span class="keyword">select</span> &#123;</span><br><span class="line"><span class="comment">// Wait for notification that next seq has arrived</span></span><br><span class="line"><span class="keyword">case</span> &lt;-s.payloads.Ready():</span><br><span class="line">logger.Debugf(<span class="string">"Ready to transfer payloads to the ledger, next sequence number is = [%d]"</span>, s.payloads.Next())</span><br><span class="line"><span class="comment">// Collect all subsequent payloads</span></span><br><span class="line"><span class="keyword">for</span> payload := s.payloads.Pop(); payload != <span class="literal">nil</span>; payload = s.payloads.Pop() &#123;</span><br><span class="line">rawBlock := &amp;common.Block&#123;&#125;</span><br><span class="line"><span class="keyword">if</span> err := pb.Unmarshal(payload.Data, rawBlock); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Errorf(<span class="string">"Error getting block with seqNum = %d due to (%+v)...dropping block"</span>, payload.SeqNum, errors.WithStack(err))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> rawBlock.Data == <span class="literal">nil</span> || rawBlock.Header == <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Errorf(<span class="string">"Block with claimed sequence %d has no header (%v) or data (%v)"</span>,</span><br><span class="line">payload.SeqNum, rawBlock.Header, rawBlock.Data)</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">logger.Debug(<span class="string">"New block with claimed sequence number "</span>, payload.SeqNum, <span class="string">" transactions num "</span>, <span class="built_in">len</span>(rawBlock.Data.Data))</span><br><span class="line"></span><br><span class="line"><span class="comment">// Read all private data into slice</span></span><br><span class="line"><span class="keyword">var</span> p util.PvtDataCollections</span><br><span class="line"><span class="keyword">if</span> payload.PrivateData != <span class="literal">nil</span> &#123;</span><br><span class="line">err := p.Unmarshal(payload.PrivateData)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Errorf(<span class="string">"Wasn't able to unmarshal private data for block seqNum = %d due to (%+v)...dropping block"</span>, payload.SeqNum, errors.WithStack(err))</span><br><span class="line"><span class="keyword">continue</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">                <span class="comment">//记账</span></span><br><span class="line"><span class="keyword">if</span> err := s.commitBlock(rawBlock, p); err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">if</span> executionErr, isExecutionErr := err.(*vsccErrors.VSCCExecutionFailureError); isExecutionErr &#123;</span><br><span class="line">logger.Errorf(<span class="string">"Failed executing VSCC due to %v. Aborting chain processing"</span>, executionErr)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">logger.Panicf(<span class="string">"Cannot commit block to the ledger due to %+v"</span>, errors.WithStack(err))</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">case</span> &lt;-s.stopCh:</span><br><span class="line">s.stopCh &lt;- <span class="keyword">struct</span>&#123;&#125;&#123;&#125;</span><br><span class="line">logger.Debug(<span class="string">"State provider has been stopped, finishing to push new blocks."</span>)</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>提交区块进入账本，提交过程中对区块进行校验。</p><ul><li>检查交易格式、证书有效性和数据的签名合法性</li><li>检查交易TxID是否重复</li><li>系统智能合约<code>vscc</code>检查交易有效性和背书策略是否满足</li><li>执行<code>mvcc</code>，检查并发的冲突</li><li>存储区块：无论其中的交易是否有效合法</li><li>更新state db：只根据<strong>有效交易中的读写集</strong>更新</li></ul><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// StoreBlock stores block with private data into the ledger</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(c *coordinator)</span> <span class="title">StoreBlock</span><span class="params">(block *common.Block, privateDataSets util.PvtDataCollections)</span> <span class="title">error</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> block.Data == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"Block data is empty"</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> block.Header == <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.New(<span class="string">"Block header is nil"</span>)</span><br><span class="line">&#125;</span><br><span class="line">logger.Infof(<span class="string">"Received block [%d]"</span>, block.Header.Number)</span><br><span class="line"></span><br><span class="line">logger.Debugf(<span class="string">"Validating block [%d]"</span>, block.Header.Number)</span><br><span class="line">err := c.Validator.Validate(block)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Errorf(<span class="string">"Validation failed: %+v"</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">blockAndPvtData := &amp;ledger.BlockAndPvtData&#123;</span><br><span class="line">Block:        block,</span><br><span class="line">BlockPvtData: <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">uint64</span>]*ledger.TxPvtData),</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ownedRWsets, err := computeOwnedRWsets(block, privateDataSets)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warning(<span class="string">"Failed computing owned RWSets"</span>, err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">privateInfo, err := c.listMissingPrivateData(block, ownedRWsets)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Warning(err)</span><br><span class="line"><span class="keyword">return</span> err</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">retryThresh := viper.GetDuration(<span class="string">"peer.gossip.pvtData.pullRetryThreshold"</span>)</span><br><span class="line"><span class="keyword">var</span> bFetchFromPeers <span class="keyword">bool</span> <span class="comment">// defaults to false</span></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(privateInfo.missingKeys) == <span class="number">0</span> &#123;</span><br><span class="line">logger.Debug(<span class="string">"No missing collection private write sets to fetch from remote peers"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">bFetchFromPeers = <span class="literal">true</span></span><br><span class="line">logger.Debug(<span class="string">"Could not find all collection private write sets in local peer transient store."</span>)</span><br><span class="line">logger.Debug(<span class="string">"Fetching"</span>, <span class="built_in">len</span>(privateInfo.missingKeys), <span class="string">"collection private write sets from remote peers for a maximum duration of"</span>, retryThresh)</span><br><span class="line">&#125;</span><br><span class="line">start := time.Now()</span><br><span class="line">limit := start.Add(retryThresh)</span><br><span class="line"><span class="keyword">for</span> <span class="built_in">len</span>(privateInfo.missingKeys) &gt; <span class="number">0</span> &amp;&amp; time.Now().Before(limit) &#123;</span><br><span class="line">c.fetchFromPeers(block.Header.Number, ownedRWsets, privateInfo)</span><br><span class="line">time.Sleep(pullRetrySleepInterval)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// Only log results if we actually attempted to fetch</span></span><br><span class="line"><span class="keyword">if</span> bFetchFromPeers &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(privateInfo.missingKeys) == <span class="number">0</span> &#123;</span><br><span class="line">logger.Debug(<span class="string">"Fetched all missing collection private write sets from remote peers"</span>)</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">logger.Warning(<span class="string">"Could not fetch all missing collection private write sets from remote peers. Will commit block with missing private write sets:"</span>, privateInfo.missingKeys)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// populate the private RWSets passed to the ledger</span></span><br><span class="line"><span class="keyword">for</span> seqInBlock, nsRWS := <span class="keyword">range</span> ownedRWsets.bySeqsInBlock() &#123;</span><br><span class="line">rwsets := nsRWS.toRWSet()</span><br><span class="line">logger.Debugf(<span class="string">"Added %d namespace private write sets for block [%d], tran [%d]"</span>, <span class="built_in">len</span>(rwsets.NsPvtRwset), block.Header.Number, seqInBlock)</span><br><span class="line">blockAndPvtData.BlockPvtData[seqInBlock] = &amp;ledger.TxPvtData&#123;</span><br><span class="line">SeqInBlock: seqInBlock,</span><br><span class="line">WriteSet:   rwsets,</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// populate missing RWSets to be passed to the ledger</span></span><br><span class="line"><span class="keyword">for</span> missingRWS := <span class="keyword">range</span> privateInfo.missingKeys &#123;</span><br><span class="line">blockAndPvtData.Missing = <span class="built_in">append</span>(blockAndPvtData.Missing, ledger.MissingPrivateData&#123;</span><br><span class="line">TxId:       missingRWS.txID,</span><br><span class="line">Namespace:  missingRWS.namespace,</span><br><span class="line">Collection: missingRWS.collection,</span><br><span class="line">SeqInBlock: <span class="keyword">int</span>(missingRWS.seqInBlock),</span><br><span class="line">&#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// commit block and private data</span></span><br><span class="line">err = c.CommitWithPvtData(blockAndPvtData)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> errors.Wrap(err, <span class="string">"commit failed"</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(blockAndPvtData.BlockPvtData) &gt; <span class="number">0</span> &#123;</span><br><span class="line"><span class="comment">// Finally, purge all transactions in block - valid or not valid.</span></span><br><span class="line"><span class="keyword">if</span> err := c.PurgeByTxids(privateInfo.txns); err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Error(<span class="string">"Purging transactions"</span>, privateInfo.txns, <span class="string">"failed:"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">seq := block.Header.Number</span><br><span class="line"><span class="keyword">if</span> seq%c.transientBlockRetention == <span class="number">0</span> &amp;&amp; seq &gt; c.transientBlockRetention &#123;</span><br><span class="line">err := c.PurgeByHeight(seq - c.transientBlockRetention)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">logger.Error(<span class="string">"Failed purging data from transient store at block"</span>, seq, <span class="string">":"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="literal">nil</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最终，当区块存储到账本后，peer通过eventhub，发布区块相关的所有事件。</p><h1 id="7-客户端收到交易事件"><a href="#7-客户端收到交易事件" class="headerlink" title="7 客户端收到交易事件"></a>7 客户端收到交易事件</h1><p>客户端收到orderer节点响应TransactionResponse。</p><p>TransactionResponse数据模型：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">TransactionResponse:</span></span><br><span class="line">  <span class="attr">Odererer:</span> <span class="string">产生响应的orderer节点</span> <span class="comment">#例如grpcs://XYYYY:7050</span></span><br></pre></td></tr></table></figure><p>根据交易ID，从创建peer的eventhub来监听交易事件，获取交易结果，或者一直等待到区块生成请求超时。</p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>账本数据结构介绍</title>
      <link href="/3760b86f.html"/>
      <url>/3760b86f.html</url>
      
        <content type="html"><![CDATA[<h1 id="账本逻辑结构"><a href="#账本逻辑结构" class="headerlink" title="账本逻辑结构"></a>账本逻辑结构</h1><p>账本逻辑结构如下图所示：</p><p><img src="/3760b86f/1537520800750.png" alt="1537520800750"></p><ul><li><p>history index：用于支持按key查询其数据历史，保存区块时，自动刷新；</p></li><li><p>block index：区块索引，用于按区块编号、交易ID等信息，查询区块在文件系统中的偏移量、大小等信息的数据库，保存区块时，自动刷新</p></li><li><p>state database：保存当前key，value最新值的数据库，节点背书时，根据state database中的值进行背书。</p></li><li><p>每个区块包含若干交易，根据交易，交易中包含读写集，包含对key的读取和写入信息，最终更新到文件系统中的区块上，和state database中。</p></li></ul><h1 id="账本物理结构"><a href="#账本物理结构" class="headerlink" title="账本物理结构"></a>账本物理结构</h1><p>在peer节点上，账本以目录形式存在，其结构示例如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">.</span><br><span class="line">├── chains</span><br><span class="line">│   ├── chains</span><br><span class="line">│   │   └── channel1</span><br><span class="line">│   │       └── blockfile_000000</span><br><span class="line">│   └── index</span><br><span class="line">│       ├── 000001.log</span><br><span class="line">│       ├── CURRENT</span><br><span class="line">│       ├── LOCK</span><br><span class="line">│       ├── LOG</span><br><span class="line">│       └── MANIFEST-000000</span><br><span class="line">├── historyLeveldb</span><br><span class="line">│   ├── 000001.log</span><br><span class="line">│   ├── CURRENT</span><br><span class="line">│   ├── LOCK</span><br><span class="line">│   ├── LOG</span><br><span class="line">│   └── MANIFEST-000000</span><br><span class="line">├── ledgerProvider</span><br><span class="line">│   ├── 000001.log</span><br><span class="line">│   ├── CURRENT</span><br><span class="line">│   ├── LOCK</span><br><span class="line">│   ├── LOG</span><br><span class="line">│   └── MANIFEST-000000</span><br><span class="line">├── pvtdataStore</span><br><span class="line">│   ├── 000001.log</span><br><span class="line">│   ├── CURRENT</span><br><span class="line">│   ├── LOCK</span><br><span class="line">│   ├── LOG</span><br><span class="line">│   └── MANIFEST-000000</span><br><span class="line">└── stateLeveldb</span><br><span class="line">    ├── 000001.log</span><br><span class="line">    ├── CURRENT</span><br><span class="line">    ├── LOCK</span><br><span class="line">    ├── LOG</span><br><span class="line">    └── MANIFEST-000000</span><br></pre></td></tr></table></figure><ul><li>chains目录为原始账本和账本的索引数据库</li><li>historyLeveldb目录为key的历史数据索引数据库，只能是leveldb</li><li>ledgerProvider目录为peer已加入的通道列表的数据库，只能是leveldb</li><li>pvtdataStore目录为private collection data的明文值的数据库，只能是leveldb</li><li>stateLeveldb目录为当前状态的数据库，可以选择内置的leveldb或者使用外置的couchdb</li></ul><h2 id="原始账本"><a href="#原始账本" class="headerlink" title="原始账本"></a>原始账本</h2><p>原始账本使用文件进行存储，fabric也直接使用标准库来操作读写文件，区块按文件存储在文件中。区块文件以blockfile_XXXXXX的方式，依次递增。</p><p>每个通道都有单独的账本文件路径，但共享同一个索引数据库。</p><h3 id="index-db"><a href="#index-db" class="headerlink" title="index db"></a>index db</h3><p>由于区块的原始记录在文件中，查询时如果遍历区块文件，效率会很低，因此fabric默认提供了基于leveldb的索引数据库，可以根据区块查到对应的区块所在的区块文件和索引位置。目前fabric提供根据下列属性查询区块文件位置的索引：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">blockHash--------&gt;</span><span class="bash">(区块文件后缀编号,区块数据开始偏移量,区块数据字节长度)</span></span><br><span class="line"><span class="meta">blockNum---------&gt;</span><span class="bash">(区块文件后缀编号,区块数据开始偏移量,区块数据字节长度)</span></span><br><span class="line"><span class="meta">txId----------&gt;</span><span class="bash">(区块文件后缀编号,交易数据开始偏移量,交易数据字节长度)</span></span><br><span class="line"><span class="meta">#</span><span class="bash">用于查询key历史的的索引</span></span><br><span class="line"><span class="meta">blockNumTxNo-----&gt;</span><span class="bash">(区块文件后缀编号,交易数据开始偏移量,交易数据字节长度)</span></span><br><span class="line"><span class="meta">txId---------&gt;</span><span class="bash">(区块文件后缀编号,区块数据开始偏移量,区块数据字节长度)</span></span><br><span class="line"><span class="meta">txId---------&gt;</span><span class="bash">(交易验证结果，是否有效)</span></span><br></pre></td></tr></table></figure><p>不同的索引，在索引数据库中以前缀字母区分，代码片段</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">blockNumIdxKeyPrefix           = <span class="string">'n'</span></span><br><span class="line">blockHashIdxKeyPrefix          = <span class="string">'h'</span></span><br><span class="line">txIDIdxKeyPrefix               = <span class="string">'t'</span></span><br><span class="line">blockNumTranNumIdxKeyPrefix    = <span class="string">'a'</span></span><br><span class="line">blockTxIDIdxKeyPrefix          = <span class="string">'b'</span></span><br><span class="line">txValidationResultIdxKeyPrefix = <span class="string">'v'</span></span><br></pre></td></tr></table></figure><p>某个交易ID对应数据记录的值如下，格式为<code>&lt;channel_name&gt;.&lt;prefix&gt;&lt;key&gt;</code>：</p><p><img src="/3760b86f/1537518146929.png" alt="1537518146929"></p><h2 id="state-db"><a href="#state-db" class="headerlink" title="state db"></a>state db</h2><p>state db在节点上用于保存当前状态（key/value键值对），提供了一个便于使用并且响应快速的访问数据的途径。<strong>同时，peer节点在背书时，也是根据statedb中的值来进行背书的</strong>。state db中的数据，可以根据原始账本推算出来。</p><blockquote><p><strong>问题</strong>：如果state db被修改，fabric会不会自动通过定期对账的方式来检查出异常？</p></blockquote><p>默认使用leveldb，可以通过配置启用为couchdb。core.ledger.state.stateDatabase等一系列进行修改。</p><p>本文以leveldb为例，介绍存储在数据库中的数据格式，有助于理解fabric的结构。</p><h3 id="简单键值对"><a href="#简单键值对" class="headerlink" title="简单键值对"></a>简单键值对</h3><p>实际上在state leveldb和history leveldb中，都是以<strong><channel_name>.<chain_code_name>.<real_key></real_key></chain_code_name></channel_name></strong>方式存储，如下所示：</p><p><img src="/3760b86f/1536572361036.png" alt="1536572361036"></p><h3 id="复合键值对"><a href="#复合键值对" class="headerlink" title="复合键值对"></a>复合键值对</h3><p><strong>对复合键来说</strong>，键值由对象类型和若干属性用空字符串拼接而成，如下图所示，但依然按照<strong><channel_name>.<chain_code_name>.<real_key></real_key></chain_code_name></channel_name></strong>的方式存储</p><p>复合键存储的数据</p><p><img src="/3760b86f/composite_key_and_value.png" alt></p><h3 id="private-collection-data的键值对"><a href="#private-collection-data的键值对" class="headerlink" title="private collection data的键值对"></a>private collection data的键值对</h3><p>对可以访问数据的节点，存储数据格式为<channel_name>.<chain_code_name>$$<collection_name>.<real_key></real_key></collection_name></chain_code_name></channel_name></p><p><img src="/3760b86f/1536827890572.png" alt="1536827890572"></p><p>对无法访问数据的节点，存储数据格式key和value都是hash后的值</p><p><img src="/3760b86f/1536828075174.png" alt="1536828075174"></p><h2 id="history-level-db"><a href="#history-level-db" class="headerlink" title="history level db"></a>history level db</h2><p>为了便于对key的历史记录进行查询，peer提供了基于leveldb的history level db数据库。</p><ul><li>不支持使用其他类型数据库</li><li>可以通过配置<code>core.ledger.history.enableHistoryDatabase=false</code>来关闭</li></ul><p>在history leveldb数据库中，将<code>通道名称</code>、<code>合约名称</code>、<code>key</code>、区块编号、交易No的方式（仅针对有效交易），生成复合key，查询时，按<code>通道名称</code>、<code>合约名称</code>、<code>key</code>生成部分复合key，然后做查询，需要遍历结果时，则根据区块编号和交易编号，读取对应区块，获取到对应值。某一行的记录如下所示：</p><p><img src="/3760b86f/1537517518505.png" alt="1537517518505"></p><ul><li></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric </tag>
            
            <tag> 账本 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>智能合约开发指南</title>
      <link href="/6cc685c6.html"/>
      <url>/6cc685c6.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="最简合约"><a href="#最简合约" class="headerlink" title="最简合约"></a>最简合约</h1><p>fabric的智能合约规范需要定义一个struct（结构体的名称不限），然后在该struct上定义Init和Invoke两个函数，定义main函数为启动入口，下面是社区最简单合约的模板，一切合约都需要在此基础上进行扩展：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">"github.com/hyperledger/fabric/core/chaincode/shim"</span></span><br><span class="line"><span class="string">"fmt"</span></span><br><span class="line">pb <span class="string">"github.com/hyperledger/fabric/protos/peer"</span></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line"><span class="keyword">type</span> FoozyCode <span class="keyword">struct</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">err := shim.Start(<span class="built_in">new</span>(FoozyCode))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line">fmt.Printf(<span class="string">"Error starting chain code: %s"</span>, err)</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fuzzy *FoozyCode)</span> <span class="title">Init</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//peer的invoke和query都是调用此方法实现的</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(fuzzy *FoozyCode)</span> <span class="title">Invoke</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"><span class="comment">//shim.Error产生异常响应，通知操作失败</span></span><br><span class="line"><span class="comment">//shim.Error("error test")</span></span><br><span class="line"><span class="comment">//shim.Success产生正常响应，通知操作成功</span></span><br><span class="line"><span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在Invoke和Init中，开发者可以根据需要再进行扩展。同时，shim提供了一系列接口，供开发者调用使用。</p><blockquote><p>由于智能合约本身是无法直接访问账本的，必须通过gprc调用peer来操作账本，因此目前开发者也只能使用shim提供的接口来开发自定义合约。</p></blockquote><h1 id="智能合约接口"><a href="#智能合约接口" class="headerlink" title="智能合约接口"></a>智能合约接口</h1><h2 id="请求参数获取"><a href="#请求参数获取" class="headerlink" title="请求参数获取"></a>请求参数获取</h2><ul><li>GetArgs():<code>[][]byte</code>，调用参数以二维数组方式获取。</li><li>GetStringArgs:<code>[]string</code>，调用参数解析为字符串数组，如果无法转换可能出现乱码</li><li>GetFuntionAndParameters:<code>string,[]string</code>，调用参数解析为字符串数组，以第一个为函数名，后面为参数数组，如果一个参数都没有，则两个都是空值</li><li>GetArgsSlice():<code>[]byte</code>，将调用参数的二维数组强行转换为一维数组</li><li>GetTransient():<code>map[string][]byte,error</code>，比较少用，用于存放调用提案中的瞬态参数，只在背书过程中使用，不会被记入账本，因此通常用来存放密钥等私密信息。</li></ul><h2 id="提取调用者身份"><a href="#提取调用者身份" class="headerlink" title="提取调用者身份"></a>提取调用者身份</h2><ul><li>GetCreator():<code>[]byte,error</code>，获取调用者的身份证书，其内容为证书字符串，可以通过x509类库转换读取证书判断信息。现在fabric提供了cid类库可以直接进行相关操作，它通过golang的protobuf将creator转换为可用的身份信息</li><li>cid.GetID():<code>string,error</code>，获取调用者的身份，实际使用证书的subject和issuer用base64编码生成的字符串</li><li>cid.GetMSPID():<code>string,error</code>，获取调用者的组织msp id</li><li>cid.GetX509Certificate():<code>*x509.Certificate,error</code>，获取调用者的证书，已经完成转换</li><li>cid.GetAttributeValue(att ):<code>value string,error</code>，获取调用者证书上的扩展属性值</li><li>cid.AssertAttributeValue(attName,value ):<code>error</code>，判断调用者证书上的扩展属性值是否匹配指定值</li></ul><p>示例合约函数：</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(code *ExampleChainCode01)</span> <span class="title">getCreator</span><span class="params">(stub shim.ChaincodeStubInterface)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">id, _ := cid.GetID(stub)</span><br><span class="line">mspId, _ := cid.GetMSPID(stub)</span><br><span class="line"><span class="comment">//获取证书上通过fabric-ca增加的额外自定义属性</span></span><br><span class="line"><span class="comment">//cid.GetAttributeValue(stub,"")</span></span><br><span class="line"><span class="comment">//读取整个证书，可用于获取其他属性</span></span><br><span class="line">certs, _ := cid.GetX509Certificate(stub)</span><br><span class="line"><span class="comment">//creator字节码转换为字符串后，可见调用者身份和证书信息，使用protobuf解析后可获取这些身份</span></span><br><span class="line">bs, _ := stub.GetCreator()</span><br><span class="line">fmt.Println(<span class="keyword">string</span>(bs))</span><br><span class="line">data := <span class="built_in">make</span>(<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;)</span><br><span class="line"><span class="comment">//需要base64解码获取cn</span></span><br><span class="line">idBytes, _ := base64.StdEncoding.DecodeString(id)</span><br><span class="line">data[<span class="string">"id"</span>] = <span class="keyword">string</span>(idBytes)</span><br><span class="line">data[<span class="string">"cn"</span>] = certs.Subject.CommonName</span><br><span class="line">data[<span class="string">"msp_id"</span>] = mspId</span><br><span class="line">data[<span class="string">"issuer"</span>] = certs.Issuer</span><br><span class="line">data[<span class="string">"validity_start"</span>] = certs.NotBefore</span><br><span class="line">data[<span class="string">"validity_end"</span>] = certs.NotAfter</span><br><span class="line">data[<span class="string">"subject"</span>] = certs.Subject</span><br><span class="line">dataBytes, _ := json.Marshal(data)</span><br><span class="line"><span class="keyword">return</span> shim.Success(dataBytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例输出</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜ peer chaincode query -C channel1 -n cc1 -c '&#123;"Args":["getCreator"]&#125;'</span><br><span class="line">2018-09-12 09:26:04.690 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2018-09-12 09:26:04.690 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">Query Result: &#123;"cn":"Admin@org1.demo.com","id":"x509::CN=Admin@org1.demo.com,OU=client,L=Xi'An,ST=ShaanXi,C=CN::CN=ca.org1.demo.com,O=org1.demo.com,L=Xi'An,ST=ShaanXi,C=CN","issuer":&#123;"Country":["CN"],"Organization":["org1.demo.com"],"OrganizationalUnit":null,"Locality":["Xi'An"],"Province":["ShaanXi"],"StreetAddress":null,"PostalCode":null,"SerialNumber":"","CommonName":"ca.org1.demo.com","Names":[&#123;"Type":[2,5,4,6],"Value":"CN"&#125;,&#123;"Type":[2,5,4,8],"Value":"ShaanXi"&#125;,&#123;"Type":[2,5,4,7],"Value":"Xi'An"&#125;,&#123;"Type":[2,5,4,10],"Value":"org1.demo.com"&#125;,&#123;"Type":[2,5,4,3],"Value":"ca.org1.demo.com"&#125;],"ExtraNames":null&#125;,"msp_id":"org1","subject":&#123;"Country":["CN"],"Organization":null,"OrganizationalUnit":["client"],"Locality":["Xi'An"],"Province":["ShaanXi"],"StreetAddress":null,"PostalCode":null,"SerialNumber":"","CommonName":"Admin@org1.demo.com","Names":[&#123;"Type":[2,5,4,6],"Value":"CN"&#125;,&#123;"Type":[2,5,4,8],"Value":"ShaanXi"&#125;,&#123;"Type":[2,5,4,7],"Value":"Xi'An"&#125;,&#123;"Type":[2,5,4,11],"Value":"client"&#125;,&#123;"Type":[2,5,4,3],"Value":"Admin@org1.demo.com"&#125;],"ExtraNames":null&#125;,"validity_end":"2028-09-09T01:02:10Z","validity_start":"2018-09-12T01:02:10Z"&#125;</span><br><span class="line">2018-09-12 09:26:04.696 CST [main] main -&gt; INFO 003 Exiting.....</span><br></pre></td></tr></table></figure><h2 id="存取数据"><a href="#存取数据" class="headerlink" title="存取数据"></a>存取数据</h2><ul><li><p>GetState(key string):<code>[]byte,error</code>,如果不存在，则为nil，ni。在同一交易中Put的数据不会被Get最新值。<strong>使用query调用GetState不会产生交易，但是用invoke调用GetState会产生读写集不需要写的交易区块</strong></p></li><li><p>PutState(key string,value []byte):<code>error</code>存入数据，在交易中产生writeset记录，key不能以空字符（0x00）开始，避免与复合key冲突。<strong>任何需要写入数据的方法，使用query调用时，不会产生任何效果，但使用invoke可以调用只包含query的方法</strong></p></li><li><p>DelState(key string):<code>error</code>，删除key对应的key、value，在交易中产生writeset记录，不存在则产生异常。</p></li><li><p>GetStateByRange(start,end string):<code>StateQueryIteratorInterface,error</code>，按key做范围查询，范围一个迭代器，用于遍历结果集，结果按key的字典顺序进行遍历。范围为左开右闭，即最小包括起始值，但不包括终止值。</p><p><em>预设存储了[a:valueXX,a0:a0,a1:a1,b:b]四对键值对</em></p><p>示例智能合约函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(code *ExampleChainCode01)</span> <span class="title">getRange</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(<span class="string">"invalid args length"</span>)</span><br><span class="line">&#125;</span><br><span class="line">start, end := args[<span class="number">0</span>], args[<span class="number">1</span>]</span><br><span class="line"><span class="comment">//左开右闭原则，包含start值，不包含end值</span></span><br><span class="line">result, err := stub.GetStateByRange(start, end)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> result.Close()</span><br><span class="line">data := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> result.HasNext() &#123;</span><br><span class="line">item, err := result.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"key"</span>:   item.Key,</span><br><span class="line"><span class="string">"value"</span>: <span class="keyword">string</span>(item.Value),</span><br><span class="line"><span class="comment">//对简单key，namespace即为合约名称</span></span><br><span class="line"><span class="string">"namespace"</span>: item.Namespace,</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="built_in">append</span>(data, m)</span><br><span class="line">&#125;</span><br><span class="line">dataBytes, _ := json.Marshal(data)</span><br><span class="line"><span class="keyword">return</span> shim.Success(dataBytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例查询输出（左开右闭，不包含key为b的数据记录）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  peer chaincode query -C channel1 -n cc1 -c '&#123;"Args":["rangeQuery","a","b"]&#125;' </span><br><span class="line">2018-09-12 10:06:07.825 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2018-09-12 10:06:07.825 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">Query Result: [&#123;"key":"a","namespace":"cc1","value":"valueXX"&#125;,&#123;"key":"a0","namespace":"cc1","value":"a0"&#125;,&#123;"key":"a1","namespace":"cc1","value":"a1"&#125;]</span><br><span class="line">2018-09-12 10:06:07.832 CST [main] main -&gt; INFO 003 Exiting.....</span><br></pre></td></tr></table></figure></li><li><p>GetHistoryForKey(key string):<code>HistoryQueryIteratorInterface,error</code>，获取key的历史数据，如果key始终不存在，不报错。<strong>如果key已经被删除，可以查询出历史值</strong>。core.yaml中配置项<em>core.ledger.history.enableHistoryDatabase</em>为false时无法查询历史。</p><p>示例智能合约函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(code *ExampleChainCode01)</span> <span class="title">getKeyHistory</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(<span class="string">"invalid args length"</span>)</span><br><span class="line">&#125;</span><br><span class="line">key := args[<span class="number">0</span>]</span><br><span class="line">result, err := stub.GetHistoryForKey(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> result.Close()</span><br><span class="line">data := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> result.HasNext() &#123;</span><br><span class="line">item, err := result.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">m := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"is_delete"</span>: item.IsDelete,</span><br><span class="line"><span class="comment">//时间需要通过time转换为可读时间字符串</span></span><br><span class="line"><span class="string">"timestamp"</span>: time.Unix(item.Timestamp.Seconds, <span class="keyword">int64</span>(item.Timestamp.Nanos)),</span><br><span class="line"><span class="comment">//修改值的交易ID</span></span><br><span class="line"><span class="string">"tx_id"</span>: item.TxId,</span><br><span class="line"><span class="string">"value"</span>: <span class="keyword">string</span>(item.Value),</span><br><span class="line">&#125;</span><br><span class="line">data = <span class="built_in">append</span>(data, m)</span><br><span class="line">&#125;</span><br><span class="line">resultBytes, _ := json.Marshal(data)</span><br><span class="line"><span class="keyword">return</span> shim.Success(resultBytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例查询响应</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  peer chaincode query -C channel1 -n cc1 -c '&#123;"Args":["history","a"]&#125;'                          </span><br><span class="line">2018-09-12 10:11:15.863 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2018-09-12 10:11:15.864 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">Query Result: [&#123;"is_delete":false,"timestamp":"2018-09-12T01:33:09.180084548Z","tx_id":"dec8faf9b693865517a76d3edb02ec01d4de498abdbba7315eeb4157b9cc92ab","value":"valuea"&#125;,&#123;"is_delete":false,"timestamp":"2018-09-12T01:34:55.163499101Z","tx_id":"e41616d9f08fce63d0ee485fbc075c9d92758c377b42cb085412c3a18fe4d5b7","value":"valueXX"&#125;,&#123;"is_delete":true,"timestamp":"2018-09-12T02:11:11.822707793Z","tx_id":"8287fa1d26a3d8d48e8a2eac00f261c7bd2da31bc201d320b682efc448d2380b","value":""&#125;]</span><br><span class="line">2018-09-12 10:11:15.870 CST [main] main -&gt; INFO 003 Exiting.....</span><br></pre></td></tr></table></figure></li></ul><h2 id="使用复合键"><a href="#使用复合键" class="headerlink" title="使用复合键"></a>使用复合键</h2><p>使用复合键存取时，关键时复合键本身的获取，实际上是通过固定程序在复合的多个属性和对应key值之间的字符串拼接和分割处理。</p><ul><li>CreateCompositeKey(objectType string,attrs []string):<code>key string,error</code>，根据对象类型和属性生成复合键，实际上是把objectType和attrs列表用<code>\x00</code>开头，然后用空值<code>U+0000</code>拼接成字符串，这些事为什么简单key不能以空值开头的原因。</li></ul><p>示例智能合约函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(code *ExampleChainCode02)</span> <span class="title">createBoard</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(<span class="string">"not enough args"</span>)</span><br><span class="line">&#125;</span><br><span class="line">owner, color, shape := args[<span class="number">0</span>], args[<span class="number">1</span>], args[<span class="number">2</span>]</span><br><span class="line"><span class="comment">//生成的复合key根据对象类型和属性列表用U+0000拼接成字符串作为key</span></span><br><span class="line">key, err := stub.CreateCompositeKey(<span class="string">"owner_color"</span>, []<span class="keyword">string</span>&#123;owner, color&#125;)</span><br><span class="line"><span class="comment">//预期输出U+0000owner_colorU+0000&lt;owner&gt;U+0000colorU+0000</span></span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">board := <span class="built_in">new</span>(Board)</span><br><span class="line">board.Owner = owner</span><br><span class="line">board.Color = color</span><br><span class="line">board.Shape = shape</span><br><span class="line">boardBytes, _ := json.Marshal(board)</span><br><span class="line">err = stub.PutState(key, boardBytes)</span><br><span class="line"><span class="keyword">return</span> shim.Success([]<span class="keyword">byte</span>(key))</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用合约产生的可以检查产生和复合键值</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">➜  peer chaincode invoke -C channel1 -n cc -c '&#123;"Args":["create","mark","red","square"]&#125;' --tls --cafile $ORDERER_CA</span><br><span class="line">2018-09-12 17:20:50.651 CST [chaincodeCmd] InitCmdFactory -&gt; INFO 001 Get chain(channel1) orderer endpoint: orderer0.demo.com:7050</span><br><span class="line">2018-09-12 17:20:50.656 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default escc</span><br><span class="line">2018-09-12 17:20:50.657 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 003 Using default vscc</span><br><span class="line">2018-09-12 17:20:50.664 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 004 Chaincode invoke successful. result: status:200 payload:"\000owner_color\000mark\000red\000" </span><br><span class="line">2018-09-12 17:20:50.664 CST [main] main -&gt; INFO 005 Exiting.....</span><br></pre></td></tr></table></figure><ul><li><p>SplitCompositeKey(key string):<code>(objectType string,attrs []string,error)</code>，将复合键切割，返回对象类型和属性列表，实际上是把objectType和attrs列表用<code>\x00</code>切割字符串</p></li><li><p>GetStateByPartialCompositeKey(objectType string,partialAttrs []string):<code>StateQueryIteratorInterface,error</code>，按复合键的部分属性查询。实际以这部分属性生成一个临时复合键，用作<strong>前缀匹配</strong>，获取所有匹配到的键值对，<strong>不支持其他方式的匹配，如果要实现，需要启用couchdb，进行复杂查询</strong>。</p><blockquote><p>实际上转换为GetStateByRange查询，起始为临时复合键，终止为临时复合键+U+10FFFF</p></blockquote><p>假设有[“mark”,”red”,”square”]和[“mark”,”green”,”star”]两组数据，二者复合键不同，按mark这个owner单一属性做前缀查询后，可以获取到他的所有数据。</p></li></ul><p>示例智能合约函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(code *ExampleChainCode02)</span> <span class="title">getByOwner</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(<span class="string">"not enough args"</span>)</span><br><span class="line">&#125;</span><br><span class="line">owner := args[<span class="number">0</span>]</span><br><span class="line"><span class="comment">//按对象类型和部分属性生成临时复合键，做前缀查询</span></span><br><span class="line">result, err := stub.GetStateByPartialCompositeKey(<span class="string">"owner_color"</span>, []<span class="keyword">string</span>&#123;owner&#125;)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> result.Close()</span><br><span class="line">boards := <span class="built_in">make</span>([]<span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> result.HasNext() &#123;</span><br><span class="line">item, err := result.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">key := item.Key</span><br><span class="line"><span class="comment">//分割后的复合键，可以按属性顺序读取</span></span><br><span class="line">objectType, args, err := stub.SplitCompositeKey(key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">value := item.Value</span><br><span class="line">board := <span class="built_in">new</span>(Board)</span><br><span class="line">json.Unmarshal(value, board)</span><br><span class="line">data := <span class="keyword">map</span>[<span class="keyword">string</span>]<span class="keyword">interface</span>&#123;&#125;&#123;</span><br><span class="line"><span class="string">"object_type"</span>: objectType,</span><br><span class="line"><span class="string">"owner"</span>:       args[<span class="number">0</span>],</span><br><span class="line"><span class="string">"color"</span>:       args[<span class="number">1</span>],</span><br><span class="line"><span class="string">"shape"</span>:       board.Shape,</span><br><span class="line">&#125;</span><br><span class="line">boards = <span class="built_in">append</span>(boards, data)</span><br><span class="line">&#125;</span><br><span class="line">boardsBytes, _ := json.Marshal(boards)</span><br><span class="line"><span class="keyword">return</span> shim.Success(boardsBytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>调用结果</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">前缀查询能正常产生结果</span></span><br><span class="line">➜  peer chaincode query -C channel1 -n cc -c '&#123;"Args":["getByOwner","mark"]&#125;'                                       </span><br><span class="line">2018-09-12 17:29:12.190 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2018-09-12 17:29:12.190 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">Query Result: [&#123;"color":"green","object_type":"owner_color","owner":"mark","shape":"star"&#125;,&#123;"color":"red","object_type":"owner_color","owner":"mark","shape":"square"&#125;]</span><br><span class="line">2018-09-12 17:29:12.196 CST [main] main -&gt; INFO 003 Exiting.....</span><br><span class="line"><span class="meta">#</span><span class="bash">无法按后缀做查询</span></span><br><span class="line">➜ peer chaincode query -C channel1 -n cc -c '&#123;"Args":["getByOwner","red"]&#125;' </span><br><span class="line">2018-09-12 17:31:50.349 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2018-09-12 17:31:50.349 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">Query Result: []</span><br><span class="line">2018-09-12 17:31:50.354 CST [main] main -&gt; INFO 003 Exiting.....</span><br></pre></td></tr></table></figure><h2 id="链式调用其他合约"><a href="#链式调用其他合约" class="headerlink" title="链式调用其他合约"></a>链式调用其他合约</h2><ul><li><p>InvokeChaincode(chaincodeName string, args <code>[][]byte</code>, channel string) <code>pb.Response</code>：以当前身份调用其他智能合约。如果channel为空值，则在当前通道上调用合约。</p><p>在<strong>当前交易中</strong>调用其他合约，</p><p>以query方式调用时，无论被调用合约是否在同一个通道，无论被调用合约是否包含<code>PutState</code>的操作，都可以正常返回响应，但不会记入账本产生区块。</p><p>以invoke方式调用时，</p><p><strong>被调用合约处于同一通道</strong>时，当前合约把产生的读写集放到当前交易的读写集中，提交到账本上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">调用同一通道的合约，被调用合约生成的读写集，存储到区块中</span></span><br><span class="line">➜  peer chaincode invoke -C channel1 -n cc1 -c  '&#123;"Args":["callCode","channel1","example02","invoke","a","b","10"]&#125;' --tls --cafile $ORDERER_CA</span><br><span class="line">2018-09-12 11:19:12.191 CST [chaincodeCmd] InitCmdFactory -&gt; INFO 001 Get chain(channel1) orderer endpoint: orderer0.demo.com:7050</span><br><span class="line">2018-09-12 11:19:12.195 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default escc</span><br><span class="line">2018-09-12 11:19:12.195 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 003 Using default vscc</span><br><span class="line">2018-09-12 11:19:12.211 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 004 Chaincode invoke successful. result: status:200 payload:"&#123;\"message\":\"\",\"payload\":\"\"&#125;" </span><br><span class="line">2018-09-12 11:19:12.211 CST [main] main -&gt; INFO 005 Exiting.....</span><br><span class="line"><span class="meta">#</span><span class="bash">被调用合约中的数据可以检查到变化</span></span><br><span class="line">➜  peer chaincode query -C channel1 -n example02 -c '&#123;"Args":["query","a"]&#125;'</span><br><span class="line">2018-09-12 11:19:15.552 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2018-09-12 11:19:15.552 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">Query Result: 80</span><br><span class="line">2018-09-12 11:19:15.557 CST [main] main -&gt; INFO 003 Exiting.....</span><br></pre></td></tr></table></figure><p> 如果<strong>被调用合约即为当前通道上的合约自己</strong>，可以正常响应产生结果集，但不会被记入账本。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">合约自己调用自己，可以正常响应</span></span><br><span class="line">➜  peer chaincode invoke -C channel1 -n cc1 -c  '&#123;"Args":["callCode","channel1","cc1","put","a","cc1a"]&#125;' --tls --cafile $ORDERER_CA</span><br><span class="line">2018-09-12 11:42:18.452 CST [chaincodeCmd] InitCmdFactory -&gt; INFO 001 Get chain(channel1) orderer endpoint: orderer0.demo.com:7050</span><br><span class="line">2018-09-12 11:42:18.456 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default escc</span><br><span class="line">2018-09-12 11:42:18.456 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 003 Using default vscc</span><br><span class="line">2018-09-12 11:42:18.466 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 004 Chaincode invoke successful. result: status:200 payload:"&#123;\"message\":\"\",\"payload\":\"\"&#125;" </span><br><span class="line">2018-09-12 11:42:18.466 CST [main] main -&gt; INFO 005 Exiting.....</span><br><span class="line"><span class="meta">#</span><span class="bash">实际并未记入账本，读取不到数据</span></span><br><span class="line">➜  peer chaincode query -C channel1 -n cc1 -c '&#123;"Args":["get","a"]&#125;'</span><br><span class="line">2018-09-12 11:42:53.689 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2018-09-12 11:42:53.689 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">Query Result: </span><br><span class="line">2018-09-12 11:42:53.694 CST [main] main -&gt; INFO 003 Exiting.....</span><br></pre></td></tr></table></figure><p><strong>被调用合约处于不同通道上</strong>时，被调用合约不产生读写集也不记入账本，只产生正常响应，当前合约生成的读写集才会计入到账本上。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">调用另一个通道上的合约，正常产生响应</span></span><br><span class="line">➜  peer chaincode invoke -C channel1 -n cc1 -c  '&#123;"Args":["callCode","channel2","example02","invoke","a","b","10"]&#125;' --tls --cafile $ORDERER_CA</span><br><span class="line">2018-09-12 11:19:12.191 CST [chaincodeCmd] InitCmdFactory -&gt; INFO 001 Get chain(channel1) orderer endpoint: orderer0.demo.com:7050</span><br><span class="line">2018-09-12 11:19:12.195 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default escc</span><br><span class="line">2018-09-12 11:19:12.195 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 003 Using default vscc</span><br><span class="line">2018-09-12 11:19:12.211 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 004 Chaincode invoke successful. result: status:200 payload:"&#123;\"message\":\"\",\"payload\":\"\"&#125;" </span><br><span class="line">2018-09-12 11:19:12.211 CST [main] main -&gt; INFO 005 Exiting.....</span><br><span class="line"><span class="meta">#</span><span class="bash">另一个合约上的数据不会产生变化</span></span><br><span class="line">➜  peer chaincode query -C channel2 -n example02 -c '&#123;"Args":["query","a"]&#125;'</span><br><span class="line">2018-09-12 11:26:14.971 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2018-09-12 11:26:14.971 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">Query Result: 100</span><br><span class="line">2018-09-12 11:26:14.975 CST [main] main -&gt; INFO 003 Exiting.....</span><br></pre></td></tr></table></figure></li></ul><h2 id="自定义事件内容"><a href="#自定义事件内容" class="headerlink" title="自定义事件内容"></a>自定义事件内容</h2><ul><li>SetEvent(name string,payload []byte)：自定义设置事件内容，client最终可以通过eventhub获取到。</li></ul><p>示例智能合约函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(code *ExampleChainCode01)</span> <span class="title">sendEvent</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line">stub.SetEvent(<span class="string">"testEvent"</span>, []<span class="keyword">byte</span>(<span class="string">"this is a test event"</span>))</span><br><span class="line"><span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过invoke调用后，监听区块事件，可读取到消息内容，如下图所示：</p><p><img src="/6cc685c6/custom_events_content.png" alt="自定义事件内容"></p><h2 id="rich-query"><a href="#rich-query" class="headerlink" title="rich query"></a>rich query</h2><p>GetQueryResult(query string):<code>StateQueryIteratorInterface,error</code></p><p>按值做富查询，peer必须使用couchdb作为状态数据库。查询语句不符合语法时，产生错误</p><ul><li>合约代码目录下<code>META-INF/statedb/couchdb/indexes</code>必须包含合约所使用的索引定义文件</li><li>索引按<a href="http://docs.couchdb.org/en/2.1.1/api/database/find.html#db-index" target="_blank" rel="noopener">couchdb规范</a>，以<em>.json方式存放索引定义。*</em>fabric在部署合约时，会自动创建索引。这也是为什么peer访问couchdb时，需要使用管理员的用户名密码的原因**</li><li><strong>如果不定义索引，也可以使用查询，只是效率可能会低一些</strong></li></ul><p>示例索引定义</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;<span class="attr">"index"</span>:&#123;<span class="attr">"fields"</span>:[<span class="string">"docType"</span>,<span class="string">"owner"</span>]&#125;,<span class="attr">"ddoc"</span>:<span class="string">"indexOwnerDoc"</span>, <span class="attr">"name"</span>:<span class="string">"indexOwner"</span>,<span class="attr">"type"</span>:<span class="string">"json"</span>&#125;</span><br></pre></td></tr></table></figure><p>预先构建下面一组数据</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">"mark","red","star"</span><br><span class="line">"mark","blue","star"</span><br><span class="line">"juli","red","star"</span><br><span class="line">"juli","blue","star"</span><br><span class="line"><span class="meta">#</span><span class="bash">使用合约的创建功能</span></span><br><span class="line">peer chaincode invoke -C channel1 -n cc -c '&#123;"Args":["create","mark","green","star"]&#125;' --tls --cafile $ORDERER_CA</span><br></pre></td></tr></table></figure><p>示例查询智能合约</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(code *ExampleChainCode03)</span> <span class="title">getByQuery</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">1</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(<span class="string">"not enough args"</span>)</span><br><span class="line">&#125;</span><br><span class="line">queryString := args[<span class="number">0</span>]</span><br><span class="line">    <span class="comment">//按owner查询时，查询语句queryString := fmt.Sprintf("&#123;\"selector\":&#123;\"docType\":\"%s\",\"owner\":\"%s\"&#125;&#125;", docType, owner)</span></span><br><span class="line">result, err := stub.GetQueryResult(queryString)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">defer</span> result.Close()</span><br><span class="line">boards := <span class="built_in">make</span>([]*Board, <span class="number">0</span>)</span><br><span class="line"><span class="keyword">for</span> result.HasNext() &#123;</span><br><span class="line">item, err := result.Next()</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line">value := item.Value</span><br><span class="line">board := <span class="built_in">new</span>(Board)</span><br><span class="line">json.Unmarshal(value, board)</span><br><span class="line">boards = <span class="built_in">append</span>(boards, board)</span><br><span class="line">&#125;</span><br><span class="line">boardsBytes, _ := json.Marshal(boards)</span><br><span class="line"><span class="keyword">return</span> shim.Success(boardsBytes)</span><br><span class="line"><span class="keyword">return</span> shim.Success(boardsBytes)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例响应</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用索引按owner查询</span></span><br><span class="line">➜  peer chaincode query -C channel1 -n cc -c '&#123;"Args":["getByQuery","&#123;\"selector\":&#123;\"docType\":\"board\",\"owner\":\"mark\"&#125;&#125;"]&#125;'</span><br><span class="line">2018-09-13 11:10:39.079 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2018-09-13 11:10:39.079 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">Query Result: [&#123;"docType":"board","owner":"mark","color":"blue","shape":"star"&#125;,&#123;"docType":"board","owner":"mark","color":"green","shape":"star"&#125;,&#123;"docType":"board","owner":"mark","color":"red","shape":"star"&#125;]</span><br><span class="line">2018-09-13 11:10:39.096 CST [main] main -&gt; INFO 003 Exiting.....</span><br><span class="line"><span class="meta">#</span><span class="bash">不使用索引，按color查询，也可以正常产生结果</span></span><br><span class="line">➜  demo git:(master) peer chaincode query -C channel1 -n cc -c '&#123;"Args":["getByQuery","&#123;\"selector\":&#123;\"color\":\"red\"&#125;&#125;"]&#125;' </span><br><span class="line">2018-09-13 11:11:34.044 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 001 Using default escc</span><br><span class="line">2018-09-13 11:11:34.044 CST [chaincodeCmd] checkChaincodeCmdParams -&gt; INFO 002 Using default vscc</span><br><span class="line">Query Result: [&#123;"docType":"board","owner":"juli","color":"red","shape":"star"&#125;,&#123;"docType":"board","owner":"mark","color":"red","shape":"star"&#125;]</span><br><span class="line">2018-09-13 11:11:34.058 CST [main] main -&gt; INFO 003 Exiting.....</span><br></pre></td></tr></table></figure><h2 id="private-data-collection"><a href="#private-data-collection" class="headerlink" title="private data collection"></a>private data collection</h2><p>private data collection是1.2版本的新增功能，用于在通道中再进行更细粒度的数据隔离。本质上是通过旁路数据库实现的，其结构类似下图所示：</p><p><img src="/6cc685c6/1536820637941.png" alt="1536820637941"></p><ul><li>授权节点通过gossip协议相互传播，将私有数据保存在节点本地的旁路数据库中</li><li>未授权节点无法获取私有数据的值，只能存放私有数据的哈希值，用做背书、排序、记账等等。<strong>orderer服务也不会看到私有数据的值</strong>。</li><li>所有节点，无论授权或者未被授权，都可以保存一份key，value的hash后的键值对</li></ul><h3 id="private-data数据流"><a href="#private-data数据流" class="headerlink" title="private data数据流"></a>private data数据流</h3><p>相对与公开的数据交易流程，private data额外增加了一些步骤</p><ul><li>发送invoke给背书节点（此节点需要能够访问指定的集合），private data放在请求提案的transient field中</li><li>背书节点模拟交易，将private data存储到本地的transient data store中（临时本地存储），通过goosip协议，根据collection policy策略，向其他被授权的节点广播数据，相应peer也存储到本地的transient data store中</li><li>背书节点返回public data给客户端，同时private data的key，value的hash，客户端不会收到私有数据</li><li>Orderer根据private data的hash后的值进行排序，分割区块</li><li>Peer验证时，<strong>统一（包括被授权的节点）</strong>使用hash后的private data进行验证</li><li>Commit期间，检查自己时候有权限拿到private data，先检查transient data store，如果没有的话就从其他peer那里pull。验证提交后，将private data存储到私有数据库中，并从transient store中移除对应key的private data。</li></ul><h3 id="相关接口说明"><a href="#相关接口说明" class="headerlink" title="相关接口说明"></a>相关接口说明</h3><p>对应上述接口，private data collections提供了一系列用于操作私有数据的接口。</p><blockquote><p><strong>不支持对私有数据的key做history查询</strong></p><p><strong>存储私有数据时，key相同而collection不同是两份不同的数据</strong></p></blockquote><p>示例集合配置文件</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"collection1"</span>,</span><br><span class="line">    <span class="attr">"policy"</span>: <span class="string">"OR('org1.member')"</span>,</span><br><span class="line">    <span class="attr">"requiredPeerCount"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"maxPeerCount"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"blockToLive"</span>: <span class="number">1000000</span></span><br><span class="line">  &#125;,</span><br><span class="line">  &#123;</span><br><span class="line">    <span class="attr">"name"</span>: <span class="string">"collection2"</span>,</span><br><span class="line">    <span class="attr">"policy"</span>: <span class="string">"OR('org2.member')"</span>,</span><br><span class="line">    <span class="attr">"requiredPeerCount"</span>: <span class="number">0</span>,</span><br><span class="line">    <span class="attr">"maxPeerCount"</span>: <span class="number">3</span>,</span><br><span class="line">    <span class="attr">"blockToLive"</span>: <span class="number">3</span></span><br><span class="line">  &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>集合collection1只允许org1访问，集合collection2只允许org2访问。</p><ul><li>GetPrivateData(collection, key string)<code>([]byte, error)</code>。读取未被授权的集合数据时，如果对应key不存在，不会产生异常。如果存在则会产生异常，无权访问数据。</li></ul><p>示例智能合约函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(code *ExampleChainCode04)</span> <span class="title">get</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(<span class="string">"not enough args"</span>)</span><br><span class="line">&#125;</span><br><span class="line">collection, key := args[<span class="number">0</span>], args[<span class="number">1</span>]</span><br><span class="line">value, err := stub.GetPrivateData(collection, key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> shim.Success(value)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">已组织org1身份读取授权访问的collection1的key，可以正常读取</span></span><br><span class="line">➜  peer chaincode query -C channel1 -n cc -c '&#123;"Args":["get","collection1","collectiona"]&#125;'</span><br><span class="line">a</span><br><span class="line"><span class="meta">#</span><span class="bash">已组织org1身份读取未授权访问的collection2的key，key不存在，不产生异常</span></span><br><span class="line">➜  peer chaincode query -C channel1 -n cc -c '&#123;"Args":["get","collection2","collectiona"]&#125;'</span><br><span class="line"><span class="meta">#</span><span class="bash">已组织org1身份读取未授权访问的collection2的key，key存在，产生异常</span></span><br><span class="line">➜  peer chaincode query -C channel1 -n cc -c '&#123;"Args":["get","collection2","collectionb"]&#125;'</span><br><span class="line">Error: endorsement failure during query. response: status:500 message:"GET_STATE failed: transaction ID: 80d41259308bc228a3c81e030d87b33f0bf581979622ac149313e45124a79ddc: Private data matching public hash version is not available. Public hash version = &amp;version.Height&#123;BlockNum:0x6, TxNum:0x0&#125;, Private data version = (*version.Height)(nil)"</span><br></pre></td></tr></table></figure><ul><li>PutPrivateData(collection string, key string, value []byte) <code>error</code>。集合不存在时，产生异常。<strong>对当前身份无权访问的集合，向其中放入数据可以正常放入，但无法读取</strong>。</li></ul><p>示例智能合约函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(code *ExampleChainCode04)</span> <span class="title">put</span><span class="params">(stub shim.ChaincodeStubInterface, args []<span class="keyword">string</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">3</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(<span class="string">"not enough args"</span>)</span><br><span class="line">&#125;</span><br><span class="line">collection, key, value := args[<span class="number">0</span>], args[<span class="number">1</span>], args[<span class="number">2</span>]</span><br><span class="line">err := stub.PutPrivateData(collection, key, []<span class="keyword">byte</span>(value))</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">以org1身份向被授权的collection1中放入数据，正常放入</span></span><br><span class="line">➜  peer chaincode invoke -C channel1 -n cc -c '&#123;"Args":["put","collection1","collectiona","a"]&#125;' --tls --cafile $ORDERER_CA</span><br><span class="line">2018-09-13 17:00:51.456 CST [chaincodeCmd] InitCmdFactory -&gt; INFO 001 Retrieved channel (channel1) orderer endpoint: orderer0.demo.com:7050</span><br><span class="line">2018-09-13 17:00:51.520 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 002 Chaincode invoke successful. result: status:200</span><br><span class="line"><span class="meta">#</span><span class="bash">以org1身份向未被授权的collection2中放入数据，放入过程不产生异常</span></span><br><span class="line">➜  peer chaincode invoke -C channel1 -n cc -c '&#123;"Args":["put","collection2","collectionb","b"]&#125;' --tls --cafile $ORDERER_CA</span><br><span class="line">2018-09-13 17:01:02.180 CST [chaincodeCmd] InitCmdFactory -&gt; INFO 001 Retrieved channel (channel1) orderer endpoint: orderer0.demo.com:7050</span><br><span class="line">2018-09-13 17:01:02.278 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 002 Chaincode invoke successful. result: status:200</span><br><span class="line"><span class="meta">#</span><span class="bash">以组织org1身份读取未授权访问的collection2的key，key存在，产生异常</span></span><br><span class="line">➜  peer chaincode query -C channel1 -n cc -c '&#123;"Args":["get","collection2","collectionb"]&#125;'</span><br><span class="line">Error: endorsement failure during query. response: status:500 message:"GET_STATE failed: transaction ID: 80d41259308bc228a3c81e030d87b33f0bf581979622ac149313e45124a79ddc: Private data matching public hash version is not available. Public hash version = &amp;version.Height&#123;BlockNum:0x6, TxNum:0x0&#125;, Private data version = (*version.Height)(nil)" </span><br><span class="line"><span class="meta">#</span><span class="bash">以组织org2身份读取授权访问的collection2的org1组织放入的key，可以正常读取出明文</span></span><br><span class="line">➜  peer chaincode query -C channel1 -n cc -c '&#123;"Args":["get","collection2","collectionb"]&#125;'</span><br><span class="line">b</span><br></pre></td></tr></table></figure><ul><li>DelPrivateData(collection, key string) <code>error</code>：从集合中删除key，无论当前组织是否被授权，都可以正常删除。</li></ul><p>示例智能合约函数</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="params">(code *ExampleChainCode04)</span> <span class="title">delete</span><span class="params">(stub shim.ChaincodeStubInterface, args [] <span class="keyword">string</span>)</span> <span class="title">pb</span>.<span class="title">Response</span></span> &#123;</span><br><span class="line"><span class="keyword">if</span> <span class="built_in">len</span>(args) &lt; <span class="number">2</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(<span class="string">"not enough args"</span>)</span><br><span class="line">&#125;</span><br><span class="line">collection, key := args[<span class="number">0</span>], args[<span class="number">1</span>]</span><br><span class="line">err := stub.DelPrivateData(collection, key)</span><br><span class="line"><span class="keyword">if</span> err != <span class="literal">nil</span> &#123;</span><br><span class="line"><span class="keyword">return</span> shim.Error(err.Error())</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> shim.Success(<span class="literal">nil</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>示例调用</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">以org2身份向授权访问的集合collection2中放入键值对</span></span><br><span class="line">➜  peer chaincode invoke -C channel1 -n cc -c '&#123;"Args":["put","collection2","collectionb","b"]&#125;' --tls --cafile $ORDERER_CA</span><br><span class="line">2018-09-13 17:19:14.577 CST [chaincodeCmd] InitCmdFactory -&gt; INFO 001 Retrieved channel (channel1) orderer endpoint: orderer0.demo.com:7050</span><br><span class="line">2018-09-13 17:19:14.880 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 002 Chaincode invoke successful. result: status:200</span><br><span class="line"><span class="meta">#</span><span class="bash">以org2身份向授权访问的集合collection2中读取key，可正常读取</span></span><br><span class="line">➜  peer chaincode invoke -C channel1 -n cc -c '&#123;"Args":["get","collection2","collectionb","b"]&#125;' --tls --cafile $ORDERER_CA</span><br><span class="line">2018-09-13 17:20:00.498 CST [chaincodeCmd] InitCmdFactory -&gt; INFO 001 Retrieved channel (channel1) orderer endpoint: orderer0.demo.com:7050</span><br><span class="line">2018-09-13 17:20:00.509 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 002 Chaincode invoke successful. result: status:200 payload:"b"</span><br><span class="line"><span class="meta">#</span><span class="bash">以组织org1身份读取未授权访问的collection2的key，key存在，产生异常</span></span><br><span class="line">➜  peer chaincode query -C channel1 -n cc -c '&#123;"Args":["get","collection2","collectionb"]&#125;'</span><br><span class="line">Error: endorsement failure during query. response: status:500 message:"GET_STATE failed: transaction ID: 80d41259308bc228a3c81e030d87b33f0bf581979622ac149313e45124a79ddc: Private data matching public hash version is not available. Public hash version = &amp;version.Height&#123;BlockNum:0x6, TxNum:0x0&#125;, Private data version = (*version.Height)(nil)"</span><br><span class="line"><span class="meta">#</span><span class="bash">以组织org1身份删除未授权访问的collection2的key，正常删除</span></span><br><span class="line">➜  peer chaincode invoke -C channel1 -n cc -c '&#123;"Args":["delete","collection2","collectionb","b"]&#125;' --tls --cafile $ORDERER_CA</span><br><span class="line">2018-09-13 17:20:24.635 CST [chaincodeCmd] InitCmdFactory -&gt; INFO 001 Retrieved channel (channel1) orderer endpoint: orderer0.demo.com:7050</span><br><span class="line">2018-09-13 17:20:24.729 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 002 Chaincode invoke successful. result: status:200</span><br><span class="line"><span class="meta">#</span><span class="bash">以org2身份向授权访问的集合collection2中读取key，已经读取不到了</span></span><br><span class="line">➜  peer chaincode invoke -C channel1 -n cc -c '&#123;"Args":["get","collection2","collectionb","b"]&#125;' --tls --cafile $ORDERER_CA</span><br><span class="line">2018-09-13 17:20:38.078 CST [chaincodeCmd] InitCmdFactory -&gt; INFO 001 Retrieved channel (channel1) orderer endpoint: orderer0.demo.com:7050</span><br><span class="line">2018-09-13 17:20:38.086 CST [chaincodeCmd] chaincodeInvokeOrQuery -&gt; INFO 002 Chaincode invoke successful. result: status:200</span><br></pre></td></tr></table></figure><ul><li>GetPrivateDataByRange(collection, startKey, endKey string) <code>(StateQueryIteratorInterface, error)</code>。类似不使用私有数据的对应方法，只是只能在可授权访问的集合中查询值</li><li>GetPrivateDataByPartialCompositeKey(collection, objectType string, keys []string)<code>(StateQueryIteratorInterface, error)</code>。类似不使用私有数据的对应方法，只是只能在可授权访问的集合中查询值</li><li>GetPrivateDataQueryResult(collection, query string) <code>(StateQueryIteratorInterface, error)</code>。类似不使用私有数据的对应方法，只是只能在可授权访问的集合中查询值</li></ul><h2 id="交易信息获取"><a href="#交易信息获取" class="headerlink" title="交易信息获取"></a>交易信息获取</h2><ul><li><code>GetTxID() string</code>：获取交易ID</li><li><code>GetTxTimestamp() (*timestamp.Timestamp, error)</code>：获取交易时间戳，基于UTC时间</li><li><code>GetChannelID() string</code>：执行合约的通道</li><li><code>GetTransient() (map[string][]byte, error)</code>：进行交易过程中，使用的瞬态参数键值对</li><li><code>GetBinding() ([]byte, error)</code>：获取交易的绑定信息，类似瞬态参数，用于规避重放攻击</li><li><code>GetSignedProposal() (*pb.SignedProposal, error)</code>：获取被签名的交易对象，可以从中获取到交易的签名和背书签名等信息</li></ul><h1 id="参考链接"><a href="#参考链接" class="headerlink" title="参考链接"></a>参考链接</h1><p>智能合约示例代码</p><p><a href="https://github.com/swordboy/fabric_examples/tree/master/cc_example" target="_blank" rel="noopener">https://github.com/swordboy/fabric_examples/tree/master/cc_example</a></p><p>社区private data设计文档</p><p><a href="https://hyperledger-fabric.readthedocs.io/en/release-1.2/private-data-arch.html" target="_blank" rel="noopener">https://hyperledger-fabric.readthedocs.io/en/release-1.2/private-data-arch.html</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric </tag>
            
            <tag> 智能合约 </tag>
            
            <tag> chaincode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一步一步搭建kafka共识的fabric环境</title>
      <link href="/24f83bc7.html"/>
      <url>/24f83bc7.html</url>
      
        <content type="html"><![CDATA[<p>在上一篇<a href="./build_fabric_network_step_by_step.md">一步一步搭建hyperledger环境</a>中，介绍了一步一步使用修改过的社区e2e例子，来搭建fabric多组织多通道的环境，其中的orderer采用solo单节点共识模式，在实际环境中，都应当采用基于kafka的分布式共识模式，提高程序的可靠性和安全性。下面介绍下搭建基于kafka的orderer集群部署的fabric network。</p><h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1 环境准备"></a>1 环境准备</h1><p>参考<a href="./build_fabric_network_step_by_step.md">一步一步搭建hyperledger环境</a>中的环境准备，安装好docker、make等程序，准备好部署</p><h1 id="2-生成公私钥和证书"><a href="#2-生成公私钥和证书" class="headerlink" title="2 生成公私钥和证书"></a>2 生成公私钥和证书</h1><h2 id="2-1-修改crypt-config"><a href="#2-1-修改crypt-config" class="headerlink" title="2.1 修改crypt-config"></a>2.1 修改crypt-config</h2><p>编译<code>cryptogen</code>后，即可生成orderer集群的配置，修改orderer部分的配置如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">OrdererOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Orderer</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">example.com</span></span><br><span class="line">    <span class="comment">#组织内只有一个节点时，通过Specs指定</span></span><br><span class="line">    <span class="attr">Specs:</span></span><br><span class="line">      <span class="comment">#指定orderer集群各节点主机名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer2</span></span><br><span class="line"><span class="attr">PeerOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">org1.example.com</span></span><br><span class="line">    <span class="comment">#组织内由一个或者多个节点时，通过template指定</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="comment">#节点个数，生成的主机名按顺序peer0到peer&#123;Count-1&#125;</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="comment">#生成的除Admin之外的普通用户证书个数</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Org2</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">org2.example.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Org3</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">org3.example.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="2-2-生成公私钥和证书"><a href="#2-2-生成公私钥和证书" class="headerlink" title="2.2 生成公私钥和证书"></a>2.2 生成公私钥和证书</h2><blockquote><p>注意：为避免每次命令输入过长路径，将build/bin追加到<code>PATH</code>环境变量路径中。</p><p><code>export PATH=$PATH:../../build/bin</code></p></blockquote><p>执行下列命令，使用<code>crypto-config.yaml</code>配置生成orderer集群环境中的所有公私钥和证书。</p><p><code>cryptogen generate --config=./crypto-config.yaml</code></p><p>可使用<code>tree cryptogen-config -d</code>命令来检查目录，正常生成了各个orderer节点的证书配置，如下图所示：</p><p><img src="/24f83bc7/1525318769266.png" alt="1525318769266"></p><h1 id="3-生成创世块和channel配置"><a href="#3-生成创世块和channel配置" class="headerlink" title="3 生成创世块和channel配置"></a>3 生成创世块和channel配置</h1><h2 id="3-1-配置confitx-yaml"><a href="#3-1-配置confitx-yaml" class="headerlink" title="3.1 配置confitx.yaml"></a>3.1 配置confitx.yaml</h2><p>参考orderer集群配置，修改configtx.yaml中的orderer配置，将其修改为kafka共识模式，修改后的configtx.yaml内容如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Profiles:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">ThreeOrgsOrdererGenesis:</span></span><br><span class="line">        <span class="attr">Orderer:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*OrdererOrg</span></span><br><span class="line">        <span class="comment">#每个consortium都是一组成员的集合</span></span><br><span class="line">        <span class="attr">Consortiums:</span></span><br><span class="line">            <span class="attr">Consortium1:</span></span><br><span class="line">                <span class="attr">Organizations:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">            <span class="attr">Consortium2:</span></span><br><span class="line">                <span class="attr">Organizations:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line">            <span class="attr">Consortium3:</span></span><br><span class="line">                <span class="attr">Organizations:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org3</span></span><br><span class="line">        </span><br><span class="line">    <span class="attr">Orgs1Channel:</span></span><br><span class="line">        <span class="attr">Consortium:</span> <span class="string">Consortium1</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Orgs2Channel:</span></span><br><span class="line">        <span class="attr">Consortium:</span> <span class="string">Consortium2</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Orgs3Channel:</span></span><br><span class="line">        <span class="attr">Consortium:</span> <span class="string">Consortium3</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#order组织和peer组织的配置</span></span><br><span class="line"><span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># order组织的配置</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;OrdererOrg</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">OrdererOrg</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">OrdererMSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/ordererOrganizations/example.com/msp</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;Org1</span></span><br><span class="line">    </span><br><span class="line">        <span class="attr">Name:</span> <span class="string">Org1MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">Org1MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/peerOrganizations/org1.example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">AnchorPeers:</span></span><br><span class="line"></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;Org2</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">Org2MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">Org2MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/peerOrganizations/org2.example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">AnchorPeers:</span></span><br><span class="line"></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7051</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;Org3</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">Org3MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">Org3MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/peerOrganizations/org3.example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">AnchorPeers:</span></span><br><span class="line"></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0.org3.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#orderer的配置</span></span><br><span class="line"><span class="attr">Orderer:</span> <span class="meta">&amp;OrdererDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># orderer共识模式，支持solo和kafka两种</span></span><br><span class="line">    <span class="attr">OrdererType:</span> <span class="string">kafka</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># orderer集群服务地址</span></span><br><span class="line">    <span class="attr">Addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">orderer0.example.com:7050</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">orderer1.example.com:7050</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">orderer2.example.com:7050</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 批次提交的间隔描述</span></span><br><span class="line">    <span class="attr">BatchTimeout:</span> <span class="string">2s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 控制多少个消息产生一个区块</span></span><br><span class="line">    <span class="attr">BatchSize:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Max Message Count: The maximum number of messages to permit in a batch</span></span><br><span class="line">        <span class="attr">MaxMessageCount:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置最大的区块大小。每个区块最大有Orderer.AbsoluteMaxBytes个字节（不包括头部）</span></span><br><span class="line">        <span class="comment"># 这个值的大小需要与kafka代理的配置保持一致</span></span><br><span class="line">        <span class="attr">AbsoluteMaxBytes:</span> <span class="number">99</span> <span class="string">MB</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 设置每个区块建议的大小。Kafka对于相对小的消息提供更高的吞吐量；区块大小最好不要超过1MB</span></span><br><span class="line">        <span class="attr">PreferredMaxBytes:</span> <span class="number">512</span> <span class="string">KB</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Kafka:</span></span><br><span class="line">        <span class="comment"># kafka的代理地址，不需要是所有的代理地址，但最少要有两个</span></span><br><span class="line">        <span class="comment"># 所有orderer节点使用此代理地址连接</span></span><br><span class="line">        <span class="attr">Brokers:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">kafka1:9092</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">kafka2:9092</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">kafka3:9092</span></span><br><span class="line">            <span class="bullet">-</span> <span class="string">kafka4:9092</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Application:</span> <span class="meta">&amp;ApplicationDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Organizations:</span></span><br></pre></td></tr></table></figure><blockquote><p>kafka需要最少4个节点才能组成一个容错的集群，如果一个代理崩溃了，channel还可以继续读写，也可以继续创建新的channel，否则会工作异常。</p></blockquote><h2 id="3-2-生成系统配置"><a href="#3-2-生成系统配置" class="headerlink" title="3.2 生成系统配置"></a>3.2 生成系统配置</h2><p>1）使用如下命令，生成创世块</p><p><code>configtxgen -profile ThreeOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block</code></p><p>产生如下输出，表示创世块生成成功</p><p><img src="/24f83bc7/1525252897594.png" alt="1525252897594"></p><p>2）使用下面的命令，生成各个通道的交易配置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile Orgs1Channel -outputCreateChannelTx ./channel-artifacts/channel1.tx -channelID channel1</span><br><span class="line">configtxgen -profile Orgs2Channel -outputCreateChannelTx ./channel-artifacts/channel2.tx -channelID channel2</span><br><span class="line">configtxgen -profile Orgs3Channel -outputCreateChannelTx ./channel-artifacts/channel3.tx -channelID channel3</span><br></pre></td></tr></table></figure><p>产生如下输出，表示创建成功。</p><p><img src="/24f83bc7/1525252990170.png" alt="1525252990170"></p><p>3）使用下面的命令，生成各组织的锚节点交易配置。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile Orgs1Channel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID channel1 -asOrg Org1MSP</span><br><span class="line">configtxgen -profile Orgs2Channel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID channel2 -asOrg Org2MSP</span><br><span class="line">configtxgen -profile Orgs3Channel -outputAnchorPeersUpdate ./channel-artifacts/Org3MSPanchors.tx -channelID channel3 -asOrg Org3MSP</span><br></pre></td></tr></table></figure><p><img src="/24f83bc7/1525253046134.png" alt="1525253046134"></p><p>最终产生下面7个系统配置文件文件</p><p><img src="/24f83bc7/1525253081809.png" alt="1525253081809"></p><h1 id="4-编写fabric网络docker-compose文件"><a href="#4-编写fabric网络docker-compose文件" class="headerlink" title="4 编写fabric网络docker-compose文件"></a>4 编写fabric网络docker-compose文件</h1><h2 id="4-1-zookeeper集群配置yaml"><a href="#4-1-zookeeper集群配置yaml" class="headerlink" title="4.1 zookeeper集群配置yaml"></a>4.1 zookeeper集群配置yaml</h2><p>zookeeper的节点个数需要为奇数，根据节点能力使用3或5或7，超过7个可能会造成不必要的资源浪费。</p><p>以其中一个的yaml配置为例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">zookeeper0.example.com:</span><br><span class="line">    container_name: zookeeper0.example.com</span><br><span class="line">    image: hyperledger&#x2F;fabric-zookeeper</span><br><span class="line">    environment:</span><br><span class="line">      #zookeeper服务器列表，server.1表示ID为1的节点信息</span><br><span class="line">      #2888端口是follower连接leader使用，3888端口用户节点间选举leader</span><br><span class="line">      - ZOO_SERVERS&#x3D;server.1&#x3D;zookeeper0.example.com:2888:3888 server.2&#x3D;zookeeper1.example.com:2888:3888 server.3&#x3D;zookeeper2.example.com:2888:3888</span><br><span class="line">      #当前节点的ID，不允许重复，范围在1-255之间。</span><br><span class="line">      #保持与ZOO_SERVERS中顺序一致</span><br><span class="line">      - ZOO_MY_ID&#x3D;1</span><br><span class="line">    expose:</span><br><span class="line">      - 2181</span><br><span class="line">      - 2888</span><br><span class="line">      - 3888</span><br></pre></td></tr></table></figure><p>其他几个zookeeper节点的配置类似，只是<code>ZOO_MY_ID依次</code>为2、3，且不重复即可。</p><p>##4.2 kafka集群配置yaml</p><p>若要保证容错性，kafka集群最少需要4台服务器来保证，此时允许1个代理出现问题。</p><p>kafka0的yaml配置如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">kafka0.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">kafka0.example.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-kafka</span></span><br><span class="line">    <span class="attr">restart:</span> <span class="string">always</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="comment">#kafka代理ID，保持不重复的整数即可</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_BROKER_ID=0</span></span><br><span class="line">      <span class="comment"># 在configtx.yaml中会设置最大的区块大小（参考configtx.yaml中AbsoluteMaxBytes参数）。</span></span><br><span class="line">      <span class="comment"># 每个区块最大有Orderer.AbsoluteMaxBytes个字节（不包括头部），假定这里设置的值为A（目前99）。</span></span><br><span class="line">      <span class="comment"># message.max.bytes和replica.fetch.max.bytes应该设置一个大于A。</span></span><br><span class="line">      <span class="comment"># 为header增加一些缓冲区空间---1MB已经足够大。上述不同设置值之间满足如下关系：</span></span><br><span class="line">      <span class="comment"># Orderer.AbsoluteMaxBytes &lt; replica.fetch.max.bytes &lt;= message.max.bytes</span></span><br><span class="line">      <span class="comment"># （更完整的是，message.max.bytes应该严格小于socket.request.max.bytes的值，socket.request.max.bytes的值默认被设置为100MB。</span></span><br><span class="line">      <span class="comment"># 如果想要区块的大小大于100MB，需要编辑fabric/orderer/kafka/config.go文件里硬编码的值brokerConfig.Producer.MaxMessageBytes，</span></span><br><span class="line">      <span class="comment"># 修改后重新编译源码得到二进制文件，这种设置是不建议的。）</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_MESSAGE_MAX_BYTES=103809024</span></span><br><span class="line">      <span class="comment"># 试图为每个通道获取的消息的字节数。</span></span><br><span class="line">      <span class="comment"># 这不是绝对最大值，如果获取的信息大于这个值，则仍然会返回信息，以确保可以取得进展。</span></span><br><span class="line">      <span class="comment"># 代理所接受的最大消息大小是通过上一条message.max.bytes定义的。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_REPLICA_FETCH_MAX_BYTES=103809024</span></span><br><span class="line">      <span class="comment"># 数据一致性在区块链环境中是至关重要的。</span></span><br><span class="line">      <span class="comment"># 我们不能从in-sync 副本（ISR）集合之外选取channel leader，</span></span><br><span class="line">      <span class="comment"># 否则我们将会面临对于之前的leader产生的offsets覆盖的风险，</span></span><br><span class="line">      <span class="comment"># 这样的结果是，orderers产生的区块可能会重新写入区块链。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_UNCLEAN_LEADER_ELECTION_ENABLE=false</span></span><br><span class="line">      <span class="comment"># min.insync.replicas = M---设置一个M值（例如1&lt;M&lt;N，查看下面的default.replication.factor）</span></span><br><span class="line">      <span class="comment"># 数据提交时会写入至少M个副本（这些数据然后会被同步并且归属到in-sync 副本集合或ISR）。</span></span><br><span class="line">      <span class="comment"># 其它情况，写入操作会返回一个错误。接下来：</span></span><br><span class="line">      <span class="comment"># 1）如果channel写入的数据多达N-M个副本变的不可用，操作可以正常执行。</span></span><br><span class="line">      <span class="comment"># 2）如果有更多的副本不可用，Kafka不可以维护一个有M数量的ISR集合，因此Kafka停止接收写操作。Channel只有当同步M个副本后才可以重新可以写。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_MIN_INSYNC_REPLICAS=2</span></span><br><span class="line">      <span class="comment"># 设置一个值N，N&lt;K。</span></span><br><span class="line">      <span class="comment"># 设置replication factor参数为N代表着每个channel都保存N个副本的数据到Kafka的代理上。</span></span><br><span class="line">      <span class="comment"># 这些都是一个channel的ISR集合的候选。</span></span><br><span class="line">      <span class="comment"># 如同在上边min.insync.replicas section设置部分所描述的，不是所有的代理（orderer）在任何时候都是可用的。</span></span><br><span class="line">      <span class="comment"># N的值必须小于K，如果少于N个代理的话，channel的创建是不能成功的。</span></span><br><span class="line">      <span class="comment"># 因此，如果设置N的值为K，一个代理失效后，那么区块链网络将不能再创建新的channel---orderering service的crash容错也就不存在了。</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_DEFAULT_REPLICATION_FACTOR=3</span></span><br><span class="line">      <span class="comment">#zookeeper节点集合</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">KAFKA_ZOOKEEPER_CONNECT=zookeeper0.example.com:2181,zookeeper1.example.com:2181,zookeeper2.example.com:2181</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9092</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">9093</span></span><br></pre></td></tr></table></figure><h2 id="4-3-orderer配置修改"><a href="#4-3-orderer配置修改" class="headerlink" title="4.3 orderer配置修改"></a>4.3 orderer配置修改</h2><p>相对与solo模式，orderer节点的环境变量配置稍有变动，其中一个order的配置如下所示：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">orderer0.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer0.example.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-orderer</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOGLEVEL=debug</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENADDRESS=0.0.0.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISMETHOD=file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPID=OrdererMSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp</span></span><br><span class="line">      <span class="comment"># enabled TLS</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]</span></span><br><span class="line">      <span class="comment"># 增加kafka相关配置</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_KAFKA_RETRY_SHORTINTERVAL=1s</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_KAFKA_RETRY_SHORTTOTAL=30s</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_KAFKA_RETRY_LONGINTERVAL=10s</span> </span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_KAFKA_RETRY_LONGTOTAL=100s</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_KAFKA_VERBOSE=true</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">orderer</span></span><br><span class="line">    <span class="comment">#注意载卷的路径</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/msp:/var/hyperledger/orderer/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">../crypto-config/ordererOrganizations/example.com/orderers/orderer0.example.com/tls/:/var/hyperledger/orderer/tls</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7050</span><span class="string">:7050</span></span><br></pre></td></tr></table></figure><blockquote><p>在前面的configtx.yaml配置中，已经增加了orderer集群连接的kafka集群地址，orderer在启动时，可以直接从创世块中读取使用。</p></blockquote><h1 id="5-启动orderer集群的fabric环境"><a href="#5-启动orderer集群的fabric环境" class="headerlink" title="5 启动orderer集群的fabric环境"></a>5 启动orderer集群的fabric环境</h1><blockquote><p>注意：启动前，手动拉取下列相关镜像的1.0.0版本，并更名为latest版本。</p><ul><li>hyperledger/fabric-tools:x86_64-1.0.0</li><li>hyperledger/fabric-orderer:x86_64-1.0.0</li><li>hyperledger/fabric-peer:x86_64-1.0.0</li><li>hyperledger/fabric-zookeeper:x86_64-1.0.0</li><li>hyperledger/fabric-kafka:x86_64-1.0.0</li></ul></blockquote><p>使用命令<code>docker-comose -f docker-compose-kafka.yaml up -d</code>启动测试环境。</p><p>在容器<code>cli</code>中依次执行下列命令，测试channel创建、peer加入channel、chaincode的安装和交易测试。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o orderer0.example.com:7050 -c channel1 -f ./channel-artifacts/channel1.tx --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span></span><br><span class="line"></span><br><span class="line">peer channel join -b channel1.block</span><br><span class="line"></span><br><span class="line">peer channel update -o orderer0.example.com:7050 -c channel1 -f ./channel-artifacts/Org1MSPanchors.tx --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span></span><br><span class="line"></span><br><span class="line">peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go/</span><br><span class="line"></span><br><span class="line">peer chaincode instantiate -o orderer0.example.com:7050 --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span> -C channel1 -n mycc -v 1.0 -c <span class="string">'&#123;"Args":["init","a","100","b","200"]&#125;'</span></span><br><span class="line"></span><br><span class="line">peer chaincode query -C channel1 -n mycc -c <span class="string">'&#123;"Args":["query","a"]&#125;'</span></span><br><span class="line"></span><br><span class="line">peer chaincode invoke -o orderer0.example.com:7050  --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span> -C channel1 -n mycc -c <span class="string">'&#123;"Args":["invoke","b","a","1"]&#125;'</span></span><br><span class="line"></span><br><span class="line">peer chaincode query -C channel1 -n mycc -c <span class="string">'&#123;"Args":["query","a"]&#125;'</span></span><br></pre></td></tr></table></figure><p>更多的测试细节可参考<a href="./build_fabric_network_step_by_step.md">一步一步搭建hyperledger环境</a>中的测试章节来进行验证。</p><h1 id="6-总结"><a href="#6-总结" class="headerlink" title="6 总结"></a>6 总结</h1><p>至此，我们完成了kafka共识的orderer集群的搭建，并测试了基本的区块链业务功能。在实际生产环境中，更多的是对orderer、kafka、zookeeper参数的调校，达到符合环境的最佳性能要求。如果需要增加orderer、kafka、zookeeper等更多节点来提高可靠性，可参考文档示例增加相应配置即可。</p><p>所有的yaml和配置参考<a href="https://github.com/swordboy/fabric_examples/tree/master/kafka" target="_blank" rel="noopener">链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric </tag>
            
            <tag> kafka共识 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>fabric-ca生成所有证书搭建fabric环境</title>
      <link href="/15ebafa6.html"/>
      <url>/15ebafa6.html</url>
      
        <content type="html"><![CDATA[<h1 id="基于fabric-ca手动搭建fabric网络"><a href="#基于fabric-ca手动搭建fabric网络" class="headerlink" title="基于fabric-ca手动搭建fabric网络"></a>基于fabric-ca手动搭建fabric网络</h1><h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>在<a href="./build_fabric_network_step_by_step.md">一步一步搭建hyperledger环境</a>和<a href="./build_fabric_network_with_kafka_orders.md">kafka共识的orderer集群fabric网络环境搭建</a>两个例子中，我们都只使用<code>cryptogen</code>这个命令行工具来生成各个组织的证书和公私钥文件，在实际生产环境中，我们应当为每个组织建立单独的CA服务器，为这个组织提供PKI体系管理，如图所示：。</p><p><img src="/15ebafa6/1525833031472.png" alt="1525833031472"></p><ul><li>enrollment certificate：用户身份证书，作为在网络中确认用户身份使用，长期证书。</li><li>transaction certificate：交易证书(目前暂未实现)，每个交易生成的短期证书。</li><li>tls certificate：tls通信使用的证书，节点之间建立https安全连接时使用。长期证书。</li></ul><p>在网络拓扑中，<code>fabric ca</code>的工作方式如下图所示：</p><p><img src="/15ebafa6/1525424458286.png" alt="1525424458286"></p><p>fabric ca client、fabric sdk通过REST API与<code>fabric ca</code>交互。大规模情况下，可以用ca形成集群，在集群中存在一个ca根服务器，和若干中间ca服务器，所有ca服务通过haproxy实现负载均衡，共享相同的存储数据库或者LDAP配置。而fabric ca client和fabric sdk都是通过haproxy来与ca集群交互的。</p><h1 id="2-fabric-ca的集成场景"><a href="#2-fabric-ca的集成场景" class="headerlink" title="2 fabric ca的集成场景"></a>2 fabric ca的集成场景</h1><blockquote><p>集成验证环境使用1.1版本进行验证</p></blockquote><h2 id="2-1-使用fabric-ca管理所有证书"><a href="#2-1-使用fabric-ca管理所有证书" class="headerlink" title="2.1 使用fabric-ca管理所有证书"></a>2.1 使用fabric-ca管理所有证书</h2><p>参考官方<a href="https://github.com/hyperledger/fabric-samples/tree/release-1.1/fabric-ca" target="_blank" rel="noopener">fabric-ca集成例子</a>，将所有用户证书、tls证书生成的部分采用手动方式，加深具体操作的理解。</p><blockquote><ul><li>环境有三个组织：ordererOrg、peerOrg1、peerOrg2，分别为orderer和peer的示例组织。</li></ul><p>​       每个peer组织中有两个peer。</p><ul><li>相关yaml和参考脚本参见链接。</li></ul></blockquote><p>使用命令<code>docker-compose -f docker-compose-root-ca.yaml up -d</code>文件，启动各个组织的root ca服务。对应yaml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">rca-ordererOrg:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rca-ordererOrg</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span> <span class="string">-c</span> <span class="string">'/scripts/start-root-ca.sh 2&gt;&amp;1'</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_HOME=/etc/hyperledger/fabric-ca</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CSR_CN=rca-ordererOrg</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CSR_HOSTS=rca-ordererOrg</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TARGET_CERTFILE=/data/ordererOrg-ca-cert.pem</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./scripts:/scripts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">rca-peerOrg1:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rca-peerOrg1</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span> <span class="string">-c</span> <span class="string">'/scripts/start-root-ca.sh 2&gt;&amp;1'</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_HOME=/etc/hyperledger/fabric-ca</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CSR_CN=rca-peerOrg1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CSR_HOSTS=rca-peerOrg1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TARGET_CERTFILE=/data/peerOrg1-ca-cert.pem</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./scripts:/scripts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">rca-peerOrg2:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">rca-peerOrg2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span> <span class="string">-c</span> <span class="string">'/scripts/start-root-ca.sh 2&gt;&amp;1'</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_HOME=/etc/hyperledger/fabric-ca</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CSR_CN=rca-peerOrg2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CSR_HOSTS=rca-peerOrg2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TARGET_CERTFILE=/data/peerOrg2-ca-cert.pem</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./scripts:/scripts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br></pre></td></tr></table></figure><p>待root ca服务运行正常后，使用命令<code>docker-compose -f docker-compose-inter-ca.yaml up -d</code>来启动各组织的中间ca和生成证书用的容器。对应yaml：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ica-ordererOrg:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ica-ordererOrg</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span> <span class="string">-c</span> <span class="string">'/scripts/start-intermediate-ca.sh ordererOrg 2&gt;&amp;1'</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_HOME=/etc/hyperledger/fabric-ca</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CA_NAME=ica-ordererOrg</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_INTERMEDIATE_TLS_CERTFILES=/data/ordererOrg-ca-cert.pem</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CSR_HOSTS=ica-ordererOrg</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TARGET_CHAINFILE=/data/ordererOrg-ca-chain.pem</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PARENT_URL=https://admin:adminpw@rca-ordererOrg:7054</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./scripts:/scripts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ica-peerOrg1:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ica-peerOrg1</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span> <span class="string">-c</span> <span class="string">'/scripts/start-intermediate-ca.sh peerOrg1 2&gt;&amp;1'</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_HOME=/etc/hyperledger/fabric-ca</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CA_NAME=ica-peerOrg1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_INTERMEDIATE_TLS_CERTFILES=/data/peerOrg1-ca-cert.pem</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CSR_HOSTS=ica-peerOrg1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TARGET_CHAINFILE=/data/peerOrg1-ca-chain.pem</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PARENT_URL=https://admin:adminpw@rca-peerOrg1:7054</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./scripts:/scripts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">ica-peerOrg2:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">ica-peerOrg2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span> <span class="string">-c</span> <span class="string">'/scripts/start-intermediate-ca.sh peerOrg2 2&gt;&amp;1'</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_HOME=/etc/hyperledger/fabric-ca</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CA_NAME=ica-peerOrg2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_INTERMEDIATE_TLS_CERTFILES=/data/peerOrg2-ca-cert.pem</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_CSR_HOSTS=ica-peerOrg2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CA_SERVER_DEBUG=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">TARGET_CHAINFILE=/data/peerOrg2-ca-chain.pem</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">PARENT_URL=https://admin:adminpw@rca-peerOrg2:7054</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./scripts:/scripts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">setup:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">setup</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca-tools</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span> <span class="string">-c</span> <span class="string">'/scripts/setup.sh;sleep 99999'</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">FABRIC_CFG_PATH=/etc/hyperledger/fabric</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./scripts:/scripts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ica-ordererOrg</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ica-peerOrg1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ica-peerOrg2</span></span><br></pre></td></tr></table></figure><blockquote><p>由于使用两个文件，docker-compose会产生警告，可忽略。</p><p><code>WARNING: Found orphan containers (rca-peerOrg2, rca-ordererOrg, rca-peerOrg1) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up</code></p></blockquote><p>在<code>setup</code>容器中，通过<code>fabric-ca-client</code>与中间ca交互，生成各组织的msp证书和tls证书。</p><h3 id="2-1-1-生成orderer组织公私钥"><a href="#2-1-1-生成orderer组织公私钥" class="headerlink" title="2.1.1 生成orderer组织公私钥"></a>2.1.1 生成orderer组织公私钥</h3><p>在<code>setup</code>容器中，执行下列命令，以管理员身份登录到ordererOrg的中间ca服务器。</p><blockquote><p>使用fabric-ca中间根服务器的根证书链作为tls通信证书。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FABRIC_CA_CLIENT_HOME=<span class="variable">$HOME</span>/cas/ica-ordererOrg</span><br><span class="line"><span class="built_in">export</span> FABRIC_CA_CLIENT_TLS_CERTFILES=/data/ordererOrg-ca-chain.pem</span><br><span class="line">fabric-ca-client enroll -d -u https://admin:adminpw@ica-ordererOrg:7054</span><br></pre></td></tr></table></figure><p>产生如下输出，表示生成成功。</p><p><img src="/15ebafa6/1526268834325.png" alt="1526268834325"></p><p>会在目录<code>$HOME/cas/ica-ordererOrg</code>生成下列文件，代表管理员的身份信息。</p><p><img src="/15ebafa6/1526268934509.png" alt="1526268934509"></p><ul><li>cacerts：根ca服务器的根证书</li><li>intermediatecerts：中间根服务器<code>ica-ordererOrg</code>的根证书</li><li>keystone：签发给登录用户的证书私钥</li><li>signcerts：签发给登录用户的证书公钥</li></ul><p>1）注册ordererOrg的节点用户和管理员用户。</p><p>使用如下命令，注册orderer节点用户，<strong>用户名与将要启动的容器名、tls公私钥请求的主机名保持一致</strong></p><p><code>fabric-ca-client register -d --id.name orderer --id.secret password --id.type orderer</code></p><p>产生如下输出表示用户注册成功，如果不指定<code>--id.secret</code>参数，则fabric ca会生成随机密码。</p><p><img src="/15ebafa6/1526269478773.png" alt="1526269478773"></p><p>使用如下命令，注册ordererOrg的管理员用户。</p><p><code>fabric-ca-client register -d --id.name admin-ordererOrg --id.secret password --id.attrs &quot;admin=true:ecert&quot;</code></p><p>2）生成ordererOrg的普通用户和管理员用户的证书</p><p>使用如下命令，将根证书和中间根证书下载到ordererOrg组织的msp目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export ORG_MSP_DIR=/data/orgs/ordererOrg/msp</span><br><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/ordererOrg-ca-chain.pem</span><br><span class="line">fabric-ca-client getcacert -d -u https://ica-ordererOrg:7054 -M $ORG_MSP_DIR</span><br></pre></td></tr></table></figure><p>使用如下命令，为组织准备tls证书和tls中间根证书，用作tls通信使用。</p><blockquote><p>tls所需证书无法自动生成，需要手动复制创建。后面的所有用户操作与此类似。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp -r /data/orgs/ordererOrg/msp/cacerts/ /data/orgs/ordererOrg/msp/tlscacerts</span><br><span class="line">cp -r /data/orgs/ordererOrg/msp/intermediatecerts /data/orgs/ordererOrg/msp/tlsintermediatecerts</span><br></pre></td></tr></table></figure><p>使用如下命令，切换到ordererOrg的管理员用户，并生成对应证书到msp目录。</p><blockquote><p>admincerts目录需要手动生成，复制到组织和admin用户的admincerts目录。后面的所有用户操作与此类似</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_HOME=/data/orgs/ordererOrg/admin</span><br><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/ordererOrg-ca-chain.pem</span><br><span class="line">fabric-ca-client enroll -d -u https://admin-ordererOrg:password@ica-ordererOrg:7054</span><br><span class="line">cp -r /data/orgs/ordererOrg/admin/msp/signcerts /data/orgs/ordererOrg/msp/admincerts</span><br><span class="line">cp -r /data/orgs/ordererOrg/admin/msp/signcerts /data/orgs/ordererOrg/admin/msp/admincerts</span><br></pre></td></tr></table></figure><p>3）生成orderer节点启动需要的tls公私钥</p><p>使用如下命令，生成orderer节点的tls公私钥</p><blockquote><p>注意登录命令，切换为了orderer节点用户。csr.hosts注意填写为orderer容器的容器名称。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /tmp/tls</span><br><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/ordererOrg-ca-chain.pem</span><br><span class="line"></span><br><span class="line">fabric-ca-client enroll -d --enrollment.profile tls -u https://orderer:password@ica-ordererOrg:7054 -M /tmp/tls --csr.hosts orderer</span><br><span class="line">mkdir -p /data/orgs/ordererOrg/orderer/tls</span><br><span class="line"></span><br><span class="line">cp /tmp/tls/keystore/* /data/orgs/ordererOrg/orderer/tls/server.key</span><br><span class="line">cp /tmp/tls/signcerts/* /data/orgs/ordererOrg/orderer/tls/server.crt</span><br></pre></td></tr></table></figure><p>生成orderer节点用户的msp公私钥，用于启动orderer进程，命令如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FABRIC_CA_CLIENT_HOME=/data/orgs/ordererOrg/orderer</span><br><span class="line">fabric-ca-client enroll -d -u https://orderer:password@ica-ordererOrg:7054</span><br><span class="line"></span><br><span class="line">cp -r /data/orgs/ordererOrg/orderer/msp/cacerts/ /data/orgs/ordererOrg/orderer/msp/tlscacerts </span><br><span class="line">cp -r /data/orgs/ordererOrg/orderer/msp/intermediatecerts /data/orgs/ordererOrg/orderer/msp/tlsintermediatecerts</span><br><span class="line"></span><br><span class="line">cp -r /data/orgs/ordererOrg/msp/admincerts /data/orgs/ordererOrg/orderer/msp</span><br></pre></td></tr></table></figure><p>最终，生成的ordererOrg的公私钥目录结构如下图所示：</p><p><img src="/15ebafa6/1526352826684.png" alt="1526352826684"></p><h3 id="2-1-2-生成peer组织公私钥"><a href="#2-1-2-生成peer组织公私钥" class="headerlink" title="2.1.2 生成peer组织公私钥"></a>2.1.2 生成peer组织公私钥</h3><h4 id="生成peerOrg1组织公私钥"><a href="#生成peerOrg1组织公私钥" class="headerlink" title="生成peerOrg1组织公私钥"></a>生成peerOrg1组织公私钥</h4><p>在<code>setup</code>容器中，执行下列命令，以管理员身份登录到peerOrg1的中间ca服务器。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FABRIC_CA_CLIENT_HOME=<span class="variable">$HOME</span>/cas/ica-peerOrg1</span><br><span class="line"><span class="built_in">export</span> FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg1-ca-chain.pem</span><br><span class="line">fabric-ca-client enroll -d -u https://admin:adminpw@ica-peerOrg1:7054</span><br></pre></td></tr></table></figure><p>1）注册peerOrg1组织的节点用户、普通用户和管理员用户</p><p>使用下列命令注册两个节点用户，普通用户和组织的管理员用户。</p><blockquote><p>peer节点用户的名称最好与将要启动的容器名称保持一致，便于识别处理。</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fabric-ca-client register -d --id.name peer0-peerOrg1 --id.secret password --id.type peer</span><br><span class="line">fabric-ca-client register -d --id.name peer1-peerOrg1 --id.secret password --id.type peer</span><br><span class="line">fabric-ca-client register -d --id.name admin-peerOrg1 --id.secret password --id.attrs "hf.Registrar.Roles=client,hf.Registrar.Attributes=*,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert,abac.init=true:ecert"</span><br><span class="line">fabric-ca-client register -d --id.name user-peerOrg1 --id.secret password</span><br></pre></td></tr></table></figure><p>2）生成peerOrg1组织的相应公私钥证书和msp目录</p><p>使用如下命令，将根证书和中间根证书下载到peerOrg1的msp目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export ORG_MSP_DIR=/data/orgs/peerOrg1/msp</span><br><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg1-ca-chain.pem</span><br><span class="line">fabric-ca-client getcacert -d -u https://ica-peerOrg1:7054 -M $ORG_MSP_DIR</span><br></pre></td></tr></table></figure><p>使用如下命令，为peerOrg1组织准备tls证书和tls中间根证书，用作tls通信使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /data/orgs/peerOrg1/msp/cacerts/ /data/orgs/peerOrg1/msp/tlscacerts -r </span><br><span class="line">cp /data/orgs/peerOrg1/msp/intermediatecerts /data/orgs/peerOrg1/msp/tlsintermediatecerts -r</span><br></pre></td></tr></table></figure><p>使用如下命令，切换到peerOrg1的管理员用户，并生成对应证书到msp目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_HOME=/data/orgs/peerOrg1/admin</span><br><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg1-ca-chain.pem</span><br><span class="line">fabric-ca-client enroll -d -u https://admin-peerOrg1:password@ica-peerOrg1:7054</span><br><span class="line">cp -r /data/orgs/peerOrg1/admin/msp/signcerts /data/orgs/peerOrg1/msp/admincerts</span><br><span class="line">cp -r /data/orgs/peerOrg1/admin/msp/signcerts /data/orgs/peerOrg1/admin/msp/admincerts</span><br></pre></td></tr></table></figure><p>3）生成peerOrg1的节点的公私钥和tls公私钥</p><p>启动peer节点时，需要生成对应的MSP公私钥和tls证书，生成公私钥过程中的节点命令需要与启动的容器名称保持一致。约定peerOrg1的两个节点为peer0-peerOrg1、peer1-peerOrg1。</p><p>使用下列命令，生成peer0-peerOrg1、peer1-peerOrg1节点的tls公私钥和msp目录</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg1-ca-chain.pem</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用节点用户peer0-peerOrg1，准备节点的tls服务公私钥</span></span><br><span class="line">rm -rf /tmp/tls</span><br><span class="line">mkdir -p /data/orgs/peerOrg1/peer0/tls</span><br><span class="line">fabric-ca-client enroll -d --enrollment.profile tls -u https://peer0-peerOrg1:password@ica-peerOrg1:7054 -M /tmp/tls --csr.hosts peer0-peerOrg1</span><br><span class="line">cp /tmp/tls/keystore/* /data/orgs/peerOrg1/peer0/tls/server.key</span><br><span class="line">cp /tmp/tls/signcerts/* /data/orgs/peerOrg1/peer0/tls/server.crt</span><br><span class="line"><span class="meta">#</span><span class="bash">节点用户peer0-peerOrg1的msp目录准备</span></span><br><span class="line">export FABRIC_CA_CLIENT_HOME=/data/orgs/peerOrg1/peer0</span><br><span class="line">fabric-ca-client enroll -d -u https://peer0-peerOrg1:password@ica-peerOrg1:7054</span><br><span class="line">cp /data/orgs/peerOrg1/peer0/msp/cacerts/ /data/orgs/peerOrg1/peer0/msp/tlscacerts -r </span><br><span class="line">cp /data/orgs/peerOrg1/peer0/msp/intermediatecerts /data/orgs/peerOrg1/peer0/msp/tlsintermediatecerts -r</span><br><span class="line"><span class="meta">#</span><span class="bash">peer节点使用管理员用户的证书</span></span><br><span class="line">cp -r /data/orgs/peerOrg1/msp/admincerts /data/orgs/peerOrg1/peer0/msp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用节点用户peer1-peerOrg1，准备节点的tls服务公私钥</span></span><br><span class="line">rm -rf /tmp/tls</span><br><span class="line">mkdir -p /data/orgs/peerOrg1/peer1/tls</span><br><span class="line">fabric-ca-client enroll -d --enrollment.profile tls -u https://peer1-peerOrg1:password@ica-peerOrg1:7054 -M /tmp/tls --csr.hosts peer1-peerOrg1</span><br><span class="line">cp /tmp/tls/keystore/* /data/orgs/peerOrg1/peer1/tls/server.key</span><br><span class="line">cp /tmp/tls/signcerts/* /data/orgs/peerOrg1/peer1/tls/server.crt</span><br><span class="line"><span class="meta">#</span><span class="bash">节点用户peer0-peerOrg1的msp目录准备</span></span><br><span class="line">export FABRIC_CA_CLIENT_HOME=/data/orgs/peerOrg1/peer1</span><br><span class="line">fabric-ca-client enroll -d -u https://peer1-peerOrg1:password@ica-peerOrg1:7054</span><br><span class="line">cp /data/orgs/peerOrg1/peer1/msp/cacerts/ /data/orgs/peerOrg1/peer1/msp/tlscacerts -r </span><br><span class="line">cp /data/orgs/peerOrg1/peer1/msp/intermediatecerts /data/orgs/peerOrg1/peer1/msp/tlsintermediatecerts -r</span><br><span class="line"><span class="meta">#</span><span class="bash">peer节点使用管理员用户的证书</span></span><br><span class="line">cp -r /data/orgs/peerOrg1/msp/admincerts /data/orgs/peerOrg1/peer1/msp</span><br></pre></td></tr></table></figure><p><strong><em>可选）</em></strong>如果peer节点开启了客户端请求的tls验证，使用如下命令生成客户端验证证书和命令行调用的证书。否则可忽略。</p><blockquote><p>两份证书可以使用相同的文件，也可以使用不同的，只要是同一个ca服务签发的就可以</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg1-ca-chain.pem</span><br><span class="line">mkdir /data/tls -p</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成客户端校验证书</span></span><br><span class="line">rm -rf /tmp/tls</span><br><span class="line">fabric-ca-client enroll -d --enrollment.profile tls -u https://peer0-peerOrg1:password@ica-peerOrg1:7054 -M /tmp/tls --csr.hosts peer0-peerOrg1</span><br><span class="line">cp /tmp/tls/keystore/* /data/tls/peer0-peerOrg1-clientauth.key</span><br><span class="line">cp /tmp/tls/signcerts/* /data//tls/peer0-peerOrg1-clientauth.crt</span><br><span class="line"></span><br><span class="line"><span class="comment">#生成命令行使用的证书</span></span><br><span class="line">rm -rf /tmp/tls</span><br><span class="line">fabric-ca-client enroll -d --enrollment.profile tls -u https://peer0-peerOrg1:password@ica-peerOrg1:7054 -M /tmp/tls --csr.hosts peer0-peerOrg1</span><br><span class="line">cp /tmp/tls/keystore/* /data/tls/peer0-peerOrg1-cli.key</span><br><span class="line">cp /tmp/tls/signcerts/* /data//tls/peer0-peerOrg1-cli.crt</span><br><span class="line"></span><br><span class="line">rm -rf /tmp/tls</span><br><span class="line">fabric-ca-client enroll -d --enrollment.profile tls -u https://peer1-peerOrg1:password@ica-peerOrg1:7054 -M /tmp/tls --csr.hosts peer1-peerOrg1</span><br><span class="line">cp /tmp/tls/keystore/* /data/tls/peer1-peerOrg1-clientauth.key</span><br><span class="line">cp /tmp/tls/signcerts/* /data//tls/peer1-peerOrg1-clientauth.crt</span><br><span class="line"></span><br><span class="line">rm -rf /tmp/tls</span><br><span class="line">fabric-ca-client enroll -d --enrollment.profile tls -u https://peer1-peerOrg1:password@ica-peerOrg1:7054 -M /tmp/tls --csr.hosts peer1-peerOrg1</span><br><span class="line">cp /tmp/tls/keystore/* /data/tls/peer1-peerOrg1-cli.key</span><br><span class="line">cp /tmp/tls/signcerts/* /data//tls/peer1-peerOrg1-cli.crt</span><br></pre></td></tr></table></figure><p>4）生成普通用户的公私钥和tls公私钥</p><p>使用如下命令，生成peerOrg1组织中用户user-peerOrg1的公私钥</p><blockquote><p>普通用户使用自己的证书作为管理使用</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg1-ca-chain.pem</span><br><span class="line">export FABRIC_CA_CLIENT_HOME=/data/orgs/peerOrg1/user-peerOrg1</span><br><span class="line">fabric-ca-client enroll -d -u https://user-peerOrg1:password@ica-peerOrg1:7054</span><br><span class="line">cp /data/orgs/peerOrg1/user-peerOrg1/msp/cacerts/ /data/orgs/peerOrg1/user-peerOrg1/msp/tlscacerts -r </span><br><span class="line">cp /data/orgs/peerOrg1/user-peerOrg1/msp/intermediatecerts /data/orgs/peerOrg1/user-peerOrg1/msp/tlsintermediatecerts -r</span><br><span class="line">cp -r /data/orgs/peerOrg1/user-peerOrg1/msp/signcerts /data/orgs/peerOrg1/user-peerOrg1/msp/admincerts</span><br></pre></td></tr></table></figure><p>最终peerOrg1生成的公私钥目录结构如下图所示：</p><p><img src="/15ebafa6/1526287832731.png" alt="1526287832731"></p><h4 id="生成peerOrg2组织公私钥"><a href="#生成peerOrg2组织公私钥" class="headerlink" title="生成peerOrg2组织公私钥"></a>生成peerOrg2组织公私钥</h4><p>peerOrg2的相关操作与之类似，相应命令更改为对应组织名称即可。</p><p>登录中间ca管理员的命令如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> FABRIC_CA_CLIENT_HOME=<span class="variable">$HOME</span>/cas/ica-peerOrg2</span><br><span class="line"><span class="built_in">export</span> FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg2-ca-chain.pem</span><br><span class="line">fabric-ca-client enroll -d -u https://admin:adminpw@ica-peerOrg2:7054</span><br></pre></td></tr></table></figure><p>1）注册peerOrg2组织的节点用户、普通用户和管理员用户的命令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">fabric-ca-client register -d --id.name peer0-peerOrg2 --id.secret password --id.type peer</span><br><span class="line">fabric-ca-client register -d --id.name peer1-peerOrg2 --id.secret password --id.type peer</span><br><span class="line">fabric-ca-client register -d --id.name admin-peerOrg2 --id.secret password --id.attrs <span class="string">"hf.Registrar.Roles=client,hf.Registrar.Attributes=*,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert,abac.init=true:ecert"</span></span><br><span class="line">fabric-ca-client register -d --id.name user-peerOrg2 --id.secret password</span><br></pre></td></tr></table></figure><p>2）准备peerOrg2组织公私钥</p><p>使用如下命令，将根证书和中间根证书下载到peerOrg1的msp目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">export ORG_MSP_DIR=/data/orgs/peerOrg2/msp</span><br><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg2-ca-chain.pem</span><br><span class="line">fabric-ca-client getcacert -d -u https://ica-peerOrg2:7054 -M $ORG_MSP_DIR</span><br></pre></td></tr></table></figure><p>使用如下命令，为peerOrg2组织准备tls证书和tls中间根证书，用作tls通信使用。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cp /data/orgs/peerOrg2/msp/cacerts/ /data/orgs/peerOrg2/msp/tlscacerts -r </span><br><span class="line">cp /data/orgs/peerOrg2/msp/intermediatecerts /data/orgs/peerOrg2/msp/tlsintermediatecerts -r</span><br></pre></td></tr></table></figure><p>使用如下命令，切换到peerOrg2的管理员用户，并生成对应证书到msp目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_HOME=/data/orgs/peerOrg2/admin</span><br><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg2-ca-chain.pem</span><br><span class="line">fabric-ca-client enroll -d -u https://admin-peerOrg2:password@ica-peerOrg2:7054</span><br><span class="line">cp -r /data/orgs/peerOrg2/admin/msp/signcerts /data/orgs/peerOrg2/msp/admincerts</span><br><span class="line">cp -r /data/orgs/peerOrg2/admin/msp/signcerts /data/orgs/peerOrg2/admin/msp/admincerts</span><br></pre></td></tr></table></figure><p>3）生成peerOrg2各节点的公私钥命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg2-ca-chain.pem</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用节点用户peer0-peerOrg2</span></span><br><span class="line">rm -rf /tmp/tls</span><br><span class="line">mkdir -p /data/orgs/peerOrg2/peer0/tls</span><br><span class="line">fabric-ca-client enroll -d --enrollment.profile tls -u https://peer0-peerOrg2:password@ica-peerOrg2:7054 -M /tmp/tls --csr.hosts peer0-peerOrg2</span><br><span class="line">cp /tmp/tls/keystore/* /data/orgs/peerOrg2/peer0/tls/server.key</span><br><span class="line">cp /tmp/tls/signcerts/* /data/orgs/peerOrg2/peer0/tls/server.crt</span><br><span class="line"><span class="meta">#</span><span class="bash">节点用户peer0-peerOrg2的msp目录准备</span></span><br><span class="line">export FABRIC_CA_CLIENT_HOME=/data/orgs/peerOrg2/peer0</span><br><span class="line">fabric-ca-client enroll -d -u https://peer0-peerOrg2:password@ica-peerOrg2:7054</span><br><span class="line">cp /data/orgs/peerOrg2/peer0/msp/cacerts/ /data/orgs/peerOrg2/peer0/msp/tlscacerts -r </span><br><span class="line">cp /data/orgs/peerOrg2/peer0/msp/intermediatecerts /data/orgs/peerOrg2/peer0/msp/tlsintermediatecerts -r</span><br><span class="line"><span class="meta">#</span><span class="bash">peer节点使用管理员用户的证书</span></span><br><span class="line">cp -r /data/orgs/peerOrg2/msp/admincerts /data/orgs/peerOrg2/peer0/msp</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">使用节点用户peer1-peerOrg2</span></span><br><span class="line">rm -rf /tmp/tls</span><br><span class="line">mkdir -p /data/orgs/peerOrg2/peer1/tls</span><br><span class="line">fabric-ca-client enroll -d --enrollment.profile tls -u https://peer1-peerOrg2:password@ica-peerOrg2:7054 -M /tmp/tls --csr.hosts peer1-peerOrg2</span><br><span class="line">cp /tmp/tls/keystore/* /data/orgs/peerOrg2/peer1/tls/server.key</span><br><span class="line">cp /tmp/tls/signcerts/* /data/orgs/peerOrg2/peer1/tls/server.crt</span><br><span class="line"><span class="meta">#</span><span class="bash">节点用户peer0-peerOrg2的msp目录准备</span></span><br><span class="line">export FABRIC_CA_CLIENT_HOME=/data/orgs/peerOrg2/peer1</span><br><span class="line">fabric-ca-client enroll -d -u https://peer1-peerOrg2:password@ica-peerOrg2:7054</span><br><span class="line">cp /data/orgs/peerOrg2/peer1/msp/cacerts/ /data/orgs/peerOrg2/peer1/msp/tlscacerts -r </span><br><span class="line">cp /data/orgs/peerOrg2/peer1/msp/intermediatecerts /data/orgs/peerOrg2/peer1/msp/tlsintermediatecerts -r</span><br><span class="line"><span class="meta">#</span><span class="bash">peer节点使用管理员用户的证书</span></span><br><span class="line">cp -r /data/orgs/peerOrg2/msp/admincerts /data/orgs/peerOrg2/peer1/msp</span><br></pre></td></tr></table></figure><p>生成peer节点的客户端校验证书和命令行证书命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg2-ca-chain.pem</span><br><span class="line">mkdir /data/tls -p</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">peer链接orderer使用的tls公私钥</span></span><br><span class="line">rm -rf /tmp/tls</span><br><span class="line">fabric-ca-client enroll -d --enrollment.profile tls -u https://peer0-peerOrg2:password@ica-peerOrg2:7054 -M /tmp/tls --csr.hosts peer0-peerOrg2</span><br><span class="line">cp /tmp/tls/keystore/* /data/tls/peer0-peerOrg2-clientauth.key</span><br><span class="line">cp /tmp/tls/signcerts/* /data//tls/peer0-peerOrg2-clientauth.crt</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">命令行连接orderer使用tls公私钥</span></span><br><span class="line">rm -rf /tmp/tls</span><br><span class="line">fabric-ca-client enroll -d --enrollment.profile tls -u https://peer0-peerOrg2:password@ica-peerOrg2:7054 -M /tmp/tls --csr.hosts peer0-peerOrg2</span><br><span class="line">cp /tmp/tls/keystore/* /data/tls/peer0-peerOrg2-cli.key</span><br><span class="line">cp /tmp/tls/signcerts/* /data//tls/peer0-peerOrg2-cli.crt</span><br><span class="line"></span><br><span class="line">rm -rf /tmp/tls</span><br><span class="line">fabric-ca-client enroll -d --enrollment.profile tls -u https://peer1-peerOrg2:password@ica-peerOrg2:7054 -M /tmp/tls --csr.hosts peer1-peerOrg2</span><br><span class="line">cp /tmp/tls/keystore/* /data/tls/peer1-peerOrg2-clientauth.key</span><br><span class="line">cp /tmp/tls/signcerts/* /data//tls/peer1-peerOrg2-clientauth.crt</span><br><span class="line"></span><br><span class="line">rm -rf /tmp/tls</span><br><span class="line">fabric-ca-client enroll -d --enrollment.profile tls -u https://peer1-peerOrg2:password@ica-peerOrg2:7054 -M /tmp/tls --csr.hosts peer1-peerOrg2</span><br><span class="line">cp /tmp/tls/keystore/* /data/tls/peer1-peerOrg2-cli.key</span><br><span class="line">cp /tmp/tls/signcerts/* /data//tls/peer1-peerOrg2-cli.crt</span><br></pre></td></tr></table></figure><p>4）生成peerOrg2普通用户的公私钥命令</p><blockquote><p>普通用户使用自己的证书作为管理使用</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg2-ca-chain.pem</span><br><span class="line">export FABRIC_CA_CLIENT_HOME=/data/orgs/peerOrg2/user-peerOrg2</span><br><span class="line">fabric-ca-client enroll -d -u https://user-peerOrg2:password@ica-peerOrg2:7054</span><br><span class="line">cp /data/orgs/peerOrg2/user-peerOrg2/msp/cacerts/ /data/orgs/peerOrg2/user-peerOrg2/msp/tlscacerts -r </span><br><span class="line">cp /data/orgs/peerOrg2/user-peerOrg2/msp/intermediatecerts /data/orgs/peerOrg2/user-peerOrg2/msp/tlsintermediatecerts -r</span><br><span class="line">cp -r /data/orgs/peerOrg2/user-peerOrg2/msp/signcerts /data/orgs/peerOrg2/user-peerOrg2/msp/admincerts</span><br></pre></td></tr></table></figure><h3 id="2-1-3-生成创世块和channel配置"><a href="#2-1-3-生成创世块和channel配置" class="headerlink" title="2.1.3 生成创世块和channel配置"></a>2.1.3 生成创世块和channel配置</h3><p>完整所有组织和用户的公私钥准备后，就可以按照正常搭建fabric网络环境那样继续进行了。</p><p>使用如下<code>configtx.yaml</code>，创建创世块</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">Profiles:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">OrgsOrdererGenesis:</span></span><br><span class="line">  </span><br><span class="line">    <span class="attr">Orderer:</span></span><br><span class="line">      <span class="attr">OrdererType:</span> <span class="string">solo</span></span><br><span class="line">      </span><br><span class="line">      <span class="attr">Addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">orderer:7050</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">BatchTimeout:</span> <span class="string">2s</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">BatchSize:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MaxMessageCount:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">AbsoluteMaxBytes:</span> <span class="number">99</span> <span class="string">MB</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">PreferredMaxBytes:</span> <span class="number">512</span> <span class="string">KB</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">Kafka:</span></span><br><span class="line">        <span class="attr">Brokers:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9092</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">Organizations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="meta">*ordererOrg</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Consortiums:</span></span><br><span class="line"></span><br><span class="line">      <span class="attr">SampleConsortium:</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">Organizations:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="meta">*peerOrg1</span></span><br><span class="line">          <span class="bullet">-</span> <span class="meta">*peerOrg2</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">OrgsChannel:</span></span><br><span class="line">    <span class="attr">Consortium:</span> <span class="string">SampleConsortium</span></span><br><span class="line">    <span class="attr">Application:</span></span><br><span class="line">      <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">      <span class="attr">Organizations:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="meta">*peerOrg1</span></span><br><span class="line">        <span class="bullet">-</span> <span class="meta">*peerOrg2</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="meta">&amp;ordererOrg</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Name:</span> <span class="string">ordererOrg</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">ID:</span> <span class="string">ordererOrgMSP</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">MSPDir:</span> <span class="string">/data/orgs/ordererOrg/msp</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="meta">&amp;peerOrg1</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Name:</span> <span class="string">peerOrg1</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">ID:</span> <span class="string">peerOrg1MSP</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">MSPDir:</span> <span class="string">/data/orgs/peerOrg1/msp</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">AnchorPeers:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0-peerOrg1</span></span><br><span class="line">         <span class="attr">Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line">  <span class="bullet">-</span> <span class="meta">&amp;peerOrg2</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Name:</span> <span class="string">peerOrg2</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">ID:</span> <span class="string">peerOrg2MSP</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">MSPDir:</span> <span class="string">/data/orgs/peerOrg2/msp</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">AnchorPeers:</span></span><br><span class="line">       <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0-peerOrg2</span></span><br><span class="line">         <span class="attr">Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line"><span class="attr">Application:</span> <span class="meta">&amp;ApplicationDefaults</span></span><br><span class="line">    <span class="attr">Organizations:</span></span><br></pre></td></tr></table></figure><p>在<code>setup</code>容器中执行命令，来生成创世块。</p><blockquote><p>默认执行命令时，先从环境变量FABRIC_CFG_PATH指定目录查询，没有时在找当前目录的configtx.yaml文件</p></blockquote><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile OrgsOrdererGenesis -outputBlock /data/genesis.block</span><br></pre></td></tr></table></figure><p>生成channel的配置</p><p><code>configtxgen -profile OrgsChannel -outputCreateChannelTx /data/channel.tx -channelID mychannel</code></p><p>生成组织锚节点配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">configtxgen -profile OrgsChannel -outputAnchorPeersUpdate /data/peerOrg1Anchor.tx -channelID mychannel -asOrg peerOrg1</span><br><span class="line">configtxgen -profile OrgsChannel -outputAnchorPeersUpdate /data/peerOrg2Anchor.tx -channelID mychannel -asOrg peerOrg2</span><br></pre></td></tr></table></figure><h3 id="2-1-4-启动fabric网络并进行基本测试"><a href="#2-1-4-启动fabric网络并进行基本测试" class="headerlink" title="2.1.4 启动fabric网络并进行基本测试"></a>2.1.4 启动fabric网络并进行基本测试</h3><p>使用<code>docker-compose-cli.yaml</code>启动fabric网络，内容如下：</p><blockquote><p>由于使用了多个yaml文件，docker-compose会产生如下告警，可忽略：</p><p><code>WARNING: Found orphan containers (setup, ica-peerOrg1, ica-ordererOrg, ica-peerOrg2, rca-ordererOrg, rca-peerOrg1, rca-peerOrg2) for this project. If you removed or renamed this service in your compose file, you can run this command with the --remove-orphans flag to clean it up.</code></p></blockquote><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">orderer:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca-orderer</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENADDRESS=0.0.0.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISMETHOD=file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISFILE=/data/genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPID=ordererOrgMSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPDIR=/data/orgs/ordererOrg/orderer/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_PRIVATEKEY=/data/orgs/ordererOrg/orderer/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_CERTIFICATE=/data/orgs/ordererOrg/orderer/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ROOTCAS=[/data/ordererOrg-ca-chain.pem]</span></span><br><span class="line">      <span class="comment"># 客户端发送请求需要tls证书验证</span></span><br><span class="line">      <span class="comment">#- ORDERER_GENERAL_TLS_CLIENTAUTHREQUIRED=true</span></span><br><span class="line">      <span class="comment">#- ORDERER_GENERAL_TLS_CLIENTROOTCAS=[/data/ordererOrg-ca-chain.pem]</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOGLEVEL=debug</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_DEBUG_BROADCASTTRACEDIR=data/logs</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">orderer</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0-peerOrg1:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0-peerOrg1</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca-peer</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0-peerOrg1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0-peerOrg1:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=peerOrg1MSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg1/peer0/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="comment"># 启动chaincode容器的网络</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=ca_default</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LOGGING_LEVEL=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="comment"># peer服务自身启动使用的tls证书</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/data/orgs/peerOrg1/peer0/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/data/orgs/peerOrg1/peer0/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/data/peerOrg1-ca-chain.pem</span></span><br><span class="line">      <span class="comment"># 客户端请求的tls验证证书</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTAUTHREQUIRED=true</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTROOTCAS_FILES=/data/peerOrg1-ca-chain.pem</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTCERT_FILE=/data/tls/peer0-peerOrg1-clientauth.crt</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTKEY_FILE=/data/tls/peer0-peerOrg1-clientauth.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_USELEADERELECTION=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_ORGLEADER=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0-peerOrg1:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_SKIPHANDSHAKE=true</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run:/host/var/run</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer1-peerOrg1:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer1-peerOrg1</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca-peer</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer1-peerOrg1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer1-peerOrg1:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=peerOrg1MSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg1/peer1/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=ca_default</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LOGGING_LEVEL=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/data/orgs/peerOrg1/peer1/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/data/orgs/peerOrg1/peer1/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/data/peerOrg1-ca-chain.pem</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTAUTHREQUIRED=true</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTROOTCAS_FILES=/data/peerOrg1-ca-chain.pem</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTCERT_FILE=/data/tls/peer1-peerOrg1-clientauth.crt</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTKEY_FILE=/data/tls/peer1-peerOrg1-clientauth.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_USELEADERELECTION=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_ORGLEADER=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1-peerOrg1:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_SKIPHANDSHAKE=true</span></span><br><span class="line">      <span class="comment"># 其他节点先与锚节点建立gossip通道</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0-peerOrg1:7051</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="comment">#command: sleep 99999</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run:/host/var/run</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0-peerOrg2:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0-peerOrg2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca-peer</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0-peerOrg2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0-peerOrg2:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=peerOrg2MSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg2/peer0/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=ca_default</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LOGGING_LEVEL=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/data/orgs/peerOrg2/peer0/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/data/orgs/peerOrg2/peer0/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/data/peerOrg2-ca-chain.pem</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTAUTHREQUIRED=true</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTROOTCAS_FILES=/data/peerOrg2-ca-chain.pem</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTCERT_FILE=/data/tls/peer0-peerOrg2-clientauth.crt</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTKEY_FILE=/data/tls/peer0-peerOrg2-clientauth.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_USELEADERELECTION=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_ORGLEADER=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0-peerOrg2:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_SKIPHANDSHAKE=true</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run:/host/var/run</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer1-peerOrg2:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer1-peerOrg2</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca-peer</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer1-peerOrg2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer1-peerOrg2:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=peerOrg2MSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg2/peer1/msp</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_DOCKER_HOSTCONFIG_NETWORKMODE=ca_default</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LOGGING_LEVEL=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/data/orgs/peerOrg2/peer1/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/data/orgs/peerOrg2/peer1/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/data/peerOrg2-ca-chain.pem</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTAUTHREQUIRED=true</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTROOTCAS_FILES=/data/peerOrg2-ca-chain.pem</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTCERT_FILE=/data/tls/peer1-peerOrg2-clientauth.crt</span></span><br><span class="line">      <span class="comment">#- CORE_PEER_TLS_CLIENTKEY_FILE=/data/tls/peer1-peerOrg2-clientauth.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_USELEADERELECTION=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_ORGLEADER=false</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer1-peerOrg2:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_SKIPHANDSHAKE=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_BOOTSTRAP=peer0-peerOrg2:7051</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">peer</span> <span class="string">node</span> <span class="string">start</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./scripts:/scripts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">/var/run:/host/var/run</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cli:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cli</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-ca-tools</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GOPATH=/opt/gopath</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">/bin/bash</span> <span class="string">-c</span> <span class="string">'/scripts/prepare.sh;sleep 99999'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./scripts:/scripts</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./data:/data</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">./examples:/opt/gopath/src/github.com/</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0-peerOrg1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer1-peerOrg1</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0-peerOrg2</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer1-peerOrg2</span></span><br></pre></td></tr></table></figure><h4 id="创建channel并加入peer"><a href="#创建channel并加入peer" class="headerlink" title="创建channel并加入peer"></a>创建channel并加入peer</h4><p>使用下面的命令，创建channel，并将所有peer加入到channel中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">使用peerOrg1或者peerOrg2任意两个组织的管理员身份操作</span></span><br><span class="line">export CORE_PEER_LOCALMSPID=peerOrg1MSP</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg1/admin/msp</span><br><span class="line">peer channel create --logging-level=DEBUG -c mychannel -f /data/channel.tx -o orderer:7050 --cafile /data/ordererOrg-ca-chain.pem --tls </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置tls通信根证书和要操作的peer节点</span></span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg1:7051</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/data/peerOrg1-ca-chain.pem</span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">peer channel join -b mychannel.block</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置节点</span></span><br><span class="line">export CORE_PEER_ADDRESS=peer1-peerOrg1:7051</span><br><span class="line">peer channel join -b mychannel.block</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">更新组织锚节点</span></span><br><span class="line">peer channel update -c mychannel -f /data/peerOrg1Anchor.tx -o orderer:7050 --tls --cafile /data/ordererOrg-ca-chain.pem</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">切换到peerOrg2管理员来操作</span></span><br><span class="line">export CORE_PEER_LOCALMSPID=peerOrg2MSP</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg2/admin/msp</span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg2:7051</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/data/peerOrg2-ca-chain.pem</span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">peer channel join -b mychannel.block</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">设置节点</span></span><br><span class="line">export CORE_PEER_ADDRESS=peer1-peerOrg2:7051</span><br><span class="line">peer channel join -b mychannel.block</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">更新组织锚节点</span></span><br><span class="line">peer channel update -c mychannel -f /data/peerOrg2Anchor.tx -o orderer:7050 --tls --cafile /data/ordererOrg-ca-chain.pem</span><br></pre></td></tr></table></figure><blockquote><p>如果要启用客户端tls验证，在所有命令上增加参数：</p><p>–clientauth –keyfile /data/tls/peer0-peerOrg1-cli.key –certfile /data/tls/peer0-peerOrg1-cli.crt</p><p>cafile：请求orderer使用的中间根证书</p><p>keyfile：peer命令行使用的私钥</p><p>certifle：peer命令行使用的公钥</p></blockquote><h4 id="测试chaincode基本功能"><a href="#测试chaincode基本功能" class="headerlink" title="测试chaincode基本功能"></a>测试chaincode基本功能</h4><p>使用如下命令，在peerOrg1和peerOrg2的第一个peer上上安装和实例化chaincode。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在peer0-peerOrg1上安装和实例化chaincode</span></span><br><span class="line">export CORE_PEER_LOCALMSPID=peerOrg1MSP</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg1/admin/msp</span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg1:7051</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/data/peerOrg1-ca-chain.pem</span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg1:7051</span><br><span class="line"><span class="meta">#</span><span class="bash">安装chaincode</span></span><br><span class="line">peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go/</span><br><span class="line"><span class="meta">#</span><span class="bash">实例化</span></span><br><span class="line">peer chaincode instantiate -o orderer:7050 --tls true --cafile /data/ordererOrg-ca-chain.pem -C mychannel -n mycc -v 1.0 -c '&#123;"Args":["init","a","100","b","200"]&#125;'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">转账</span></span><br><span class="line">peer chaincode invoke -o orderer:7050 --tls true --cafile /data/ordererOrg-ca-chain.pem -C mychannel -n mycc -c '&#123;"Args":["invoke","b","a","10"]&#125;'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">分别再查询</span></span><br><span class="line">peer chaincode query -C mychannel -n mycc -c '&#123;"Args":["query","a"]&#125;'</span><br><span class="line">peer chaincode query -C mychannel -n mycc -c '&#123;"Args":["query","b"]&#125;'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在peer0-peerOrg2上安装</span></span><br><span class="line">export CORE_PEER_LOCALMSPID=peerOrg2MSP</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg2/admin/msp</span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg2:7051</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/data/peerOrg2-ca-chain.pem</span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg2:7051</span><br><span class="line"><span class="meta">#</span><span class="bash">每个channel中，同名channel只能安装和实例化一次，无须再执行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">通过peer0-peerOrg2执行chaincode</span></span><br><span class="line">peer chaincode invoke -o orderer:7050 --tls true --cafile /data/ordererOrg-ca-chain.pem -C mychannel -n mycc -c '&#123;"Args":["invoke","b","a","10"]&#125;'</span><br><span class="line"><span class="meta">#</span><span class="bash">分别再查询</span></span><br><span class="line">peer chaincode query -C mychannel -n mycc -c '&#123;"Args":["query","a"]&#125;'</span><br><span class="line">peer chaincode query -C mychannel -n mycc -c '&#123;"Args":["query","b"]&#125;'</span><br></pre></td></tr></table></figure><p>以上yaml可根据参考资料中的相关链接，使用yaml和相应脚本启动环境。手动生成组织公私钥的过程都已经通过脚本自动化了。</p><h2 id="2-2-使用fabric-ca结合用户提供根证书"><a href="#2-2-使用fabric-ca结合用户提供根证书" class="headerlink" title="2.2 使用fabric-ca结合用户提供根证书"></a>2.2 使用fabric-ca结合用户提供根证书</h2><p><strong>目前，根据fabric-ca的官方文档，仅支持ECDSA算法的用户证书。</strong>在这种场景下，fabric-ca作为中间ca服务为各组织提供PKI相关能力。用户需要提供下列文件：</p><ul><li>颁发给fabric-ca的中间根证书、私钥</li><li>办法给fabric-ca服务的根证书链</li><li>（可选），tls证书</li></ul><p>指定的证书目前测试可以有两种方式生成：</p><ol><li><p>搭建一个fabric-ca服务器，使用fabric-ca-client的命令行，为三个组织生成中间ca服务器的证书，将证书分发给对应的中间ca服务器，进行启动。使用的示例命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_HOME=/root/ica-org0</span><br><span class="line">fabric-ca-client enroll -u https://rca-org0-admin:rca-org0-adminpw@rca-org0:7054  --tls.certfiles /etc/hyperledger/fabric-ca/tls-cert.pem --enrollment.profile ca</span><br></pre></td></tr></table></figure></li><li><p>借助fabric-ca中的<a href="https://github.com/hyperledger/fabric-ca/blob/release-1.1/scripts/fvt/utils/pki" target="_blank" rel="noopener">pki</a>工具脚本，生成中间ca服务器的证书，然后在进行启动，响应的示例命令如下：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">生成ca根证书</span></span><br><span class="line">./pki -f newca -a ca -t ec -l 256 -d sha256 \</span><br><span class="line">                        -n "/C=US/ST=NC/L=RTP/O=IBM/O=Hyperledger/OU=FVT/CN=ca/" \</span><br><span class="line">                        -K "digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment,keyAgreement,keyCertSign,cRLSign" \</span><br><span class="line">                        -E "serverAuth,clientAuth,codeSigning,emailProtection,timeStamping" \</span><br><span class="line">                        -e 20370101000000Z -s 20160101000000Z -p ca-</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">生成org0组织的中间根证书</span></span><br><span class="line">./pki -f newsub -b ica-org0 -a ca -t ec -l 256 -d sha256 \</span><br><span class="line">                        -n "/C=US/ST=NC/L=RTP/O=IBM/O=Hyperledger/OU=FVT/CN=ica-org0/"  \</span><br><span class="line">                        -K "digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment,keyAgreement,keyCertSign,cRLSign" \</span><br><span class="line">                        -E "serverAuth,clientAuth,codeSigning,emailProtection,timeStamping" \</span><br><span class="line">                        -e 20370101000000Z -s 20160101000000Z -p ica-org0-</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./pki -f newsub -b ica-org1 -a ca -t ec -l 256 -d sha256 \</span><br><span class="line">                        -n "/C=US/ST=NC/L=RTP/O=IBM/O=Hyperledger/OU=FVT/CN=ica-org1/" \</span><br><span class="line">                        -K "digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment,keyAgreement,keyCertSign,cRLSign" \</span><br><span class="line">                        -E "serverAuth,clientAuth,codeSigning,emailProtection,timeStamping" \</span><br><span class="line">                        -e 20370101000000Z -s 20160101000000Z -p ica-org1-</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">./pki -f newsub -b ica-org2 -a ca -t ec -l 256 -d sha256 \</span><br><span class="line">                        -n "/C=US/ST=NC/L=RTP/O=IBM/O=Hyperledger/OU=FVT/CN=ica-org2/" \</span><br><span class="line">                        -K "digitalSignature,nonRepudiation,keyEncipherment,dataEncipherment,keyAgreement,keyCertSign,cRLSign" \</span><br><span class="line">                        -E "serverAuth,clientAuth,codeSigning,emailProtection,timeStamping" \</span><br><span class="line">                        -e 20370101000000Z -s 20160101000000Z -p ica-org2-</span><br></pre></td></tr></table></figure><p>然后根据中间根证书的目录结构，创建对应的文件，以生成org0中间ca服务器目录为例：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">mkdir -p ica-org0/msp/&#123;cacerts,intermediatecerts,keystore,signcerts&#125;</span><br><span class="line">cp $HOME/ica-org0-cert.pem ica-org0/ca-cert.pem</span><br><span class="line">cp $HOME/ica-org0-key.pem ica-org0/msp/keystore</span><br><span class="line">cp $HOME/ca-cert.pem ica-org0/msp/cacerts</span><br><span class="line">cp $HOME/ca-cert.pem ica-org0/msp/intermediate/certs</span><br><span class="line">cp $HOME/ica-org0-cert.pem ica-org0/msp/signcerts</span><br><span class="line">cat ica-org0/ca-certs.pem ica-org0/msp/cacerts/ca-certs.pem &gt; ica-org0/ca-chaim.pem</span><br></pre></td></tr></table></figure><p>按照相同的方式，构造org1、org2的中间ca服务器目录。</p></li></ol><p>测试使用fabric-ca，为三个组织的中间ca服务器生成公私钥和tls证书，然后修改<a href="https://github.com/swordboy/fabric-samples/tree/release-1.1/fabric-ca" target="_blank" rel="noopener">社区例子</a>，可以正常运行。</p><h2 id="2-3-使用cryptogen生成的根证书"><a href="#2-3-使用cryptogen生成的根证书" class="headerlink" title="2.3 使用cryptogen生成的根证书"></a>2.3 使用cryptogen生成的根证书</h2><p>可以使用crypotgen预先生成的各组织的根证书和对应私钥作为启动条件，代表这个组织来管理用户，可参考网络资料<a href="http://www.cnblogs.com/studyzy/p/7482451.html" target="_blank" rel="noopener">Fabric CA环境的集成</a>进行操作验证。</p><h1 id="3-fabric-ca功能测试"><a href="#3-fabric-ca功能测试" class="headerlink" title="3 fabric-ca功能测试"></a>3 fabric-ca功能测试</h1><p>参考2.1或者2.2完成环境集成后，开始测试。</p><h2 id="3-1-增加用户"><a href="#3-1-增加用户" class="headerlink" title="3.1 增加用户"></a>3.1 增加用户</h2><p>在简单功能测试的基础上，以peerOrg1组织的管理员身份注册用户</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_HOME=$HOME/cas/ica-peerOrg1</span><br><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg1-ca-chain.pem</span><br><span class="line">fabric-ca-client enroll -d -u https://admin:adminpw@ica-peerOrg1:7054</span><br><span class="line">fabric-ca-client register -d --id.name user2-peerOrg1 --id.secret password</span><br></pre></td></tr></table></figure><p>切换至新创建的用户，生成msp目录。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">rm -rf /tmp/user2</span><br><span class="line">export FABRIC_CA_CLIENT_HOME=/tmp/user2</span><br><span class="line">fabric-ca-client enroll -d -u https://user2-peerOrg1:password@ica-peerOrg1:7054</span><br><span class="line">cp -r /tmp/user2/msp/cacerts /tmp/user2/msp/cacerts </span><br><span class="line">cp -r /tmp/user2/msp/cacerts/ /tmp/user2/msp/tlscacerts</span><br><span class="line">cp -r /tmp/user2/msp/intermediatecerts /tmp/user2/msp/tlsintermediatecerts</span><br><span class="line">cp -r /tmp/user2/msp/signcerts /tmp/user2/msp/admincerts</span><br></pre></td></tr></table></figure><p>切换至新增用户，测试调用chaincode。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_LOCALMSPID=peerOrg1MSP</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/tmp/user2/msp</span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg1:7051</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/data/peerOrg1-ca-chain.pem</span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg1:7051</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">转账</span></span><br><span class="line">peer chaincode invoke -o orderer:7050 --tls true --cafile /data/ordererOrg-ca-chain.pem -C mychannel -n mycc -c '&#123;"Args":["invoke","b","a","10"]&#125;'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">分别再查询</span></span><br><span class="line">peer chaincode query -C mychannel -n mycc -c '&#123;"Args":["query","a"]&#125;'</span><br><span class="line">peer chaincode query -C mychannel -n mycc -c '&#123;"Args":["query","b"]&#125;'</span><br></pre></td></tr></table></figure><p>可以正常执行，说明新创建的用户身份有效。</p><h2 id="3-2-ABAC验证"><a href="#3-2-ABAC验证" class="headerlink" title="3.2 ABAC验证"></a>3.2 ABAC验证</h2><p>使用修改过的社区<a href="https://github.com/swordboy/fabric-samples/tree/release-1.1/chaincode/abac/go" target="_blank" rel="noopener">ABAC</a>例子。涉及ABAC权限的相关代码如下图，检查用户证书必须带有<code>abac.init=true:ecert</code>属性。</p><p>即前面给各个peer组织创建的管理员用户所带的自定义属性。</p><p><img src="/15ebafa6/1526451004951.png" alt="1526451004951"></p><p>以peerOrg1组织的管理员<code>admin-peerOrg1</code>为例，其证书通过<code>openssl</code>查询，可见增加的扩展属性</p><p><img src="/15ebafa6/1526433100254.png" alt="1526433100254"></p><p>使用如下的命令测试chaincode的abac校验，只允许管理员身份来实例化chaincode。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">在peer0-peerOrg1上安装和实例化chaincode</span></span><br><span class="line">export CORE_PEER_LOCALMSPID=peerOrg1MSP</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg1/admin/msp</span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg1:7051</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/data/peerOrg1-ca-chain.pem</span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg1:7051</span><br><span class="line"><span class="meta">#</span><span class="bash">安装chaincode，无须设置，系统限制只能管理员来安装chaincode</span></span><br><span class="line">peer chaincode install -n abac -v 1.0 -p github.com/chaincode/abac/go/</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">实例化，增加背书策略</span></span><br><span class="line">peer chaincode instantiate -o orderer:7050 --tls true --cafile /data/ordererOrg-ca-chain.pem -C mychannel -n abac -v 1.0 -c '&#123;"Args":["init","a","100","b","200"]&#125;' -P 'OR('\''peerOrg1MSP.member'\'','\''peerOrg2MSP.member'\'')' </span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">转账</span></span><br><span class="line">peer chaincode invoke -o orderer:7050 --tls true --cafile /data/ordererOrg-ca-chain.pem -C mychannel -n abac -c '&#123;"Args":["invoke","b","a","100"]&#125;'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">分别再查询</span></span><br><span class="line">peer chaincode query -C mychannel -n abac -c '&#123;"Args":["query","a"]&#125;'</span><br><span class="line"><span class="meta">#</span><span class="bash">切换至用户身份，再转账</span></span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg1/user-peerOrg1/msp</span><br><span class="line"><span class="meta">#</span><span class="bash">会因为用户证书不存在属性而失败Attribute <span class="string">'abac.init'</span> was not found</span></span><br><span class="line">peer chaincode invoke -o orderer:7050 --tls true --cafile /data/ordererOrg-ca-chain.pem -C mychannel -n abac -c '&#123;"Args":["invoke","b","a","1"]&#125;'</span><br><span class="line"><span class="meta">#</span><span class="bash">用户可以正常查询信息</span></span><br><span class="line">peer chaincode query -C mychannel -n abac -c '&#123;"Args":["query","b"]&#125;'</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">在peer0-peerOrg2上安装</span></span><br><span class="line">export CORE_PEER_LOCALMSPID=peerOrg2MSP</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg2/admin/msp</span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg2:7051</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/data/peerOrg2-ca-chain.pem</span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg2:7051</span><br><span class="line"><span class="meta">#</span><span class="bash">安装chaincode</span></span><br><span class="line">peer chaincode install -n abac -v 1.0 -p github.com/chaincode/abac/go/</span><br><span class="line"><span class="meta">#</span><span class="bash">每个channel中，同名chaincode实例化一次，无须再执行</span></span><br><span class="line"><span class="meta">#</span><span class="bash">通过peer0-peerOrg2执行chaincode</span></span><br><span class="line">peer chaincode invoke -o orderer:7050 --tls true --cafile /data/ordererOrg-ca-chain.pem -C mychannel -n abac -c '&#123;"Args":["invoke","b","a","10"]&#125;'</span><br><span class="line"><span class="meta">#</span><span class="bash">分别再查询</span></span><br><span class="line">peer chaincode query -C mychannel -n abac -c '&#123;"Args":["query","a"]&#125;'</span><br><span class="line"><span class="meta">#</span><span class="bash">切换至用户身份再查询</span></span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg2/user-peerOrg2/msp</span><br><span class="line">peer chaincode query -C mychannel -n abac -c '&#123;"Args":["query","b"]&#125;'</span><br></pre></td></tr></table></figure><p>##3.3 吊销用户</p><p>在abac测试流程的基础上，增加吊销用户证书的流程。</p><p>吊销用户证书和动态增加组织一样，都需要通过configtxlator工具来辅助，同事需要使用中间ca服务器来生成CRL(CertificateRevocationList)，分发到各个组织。</p><p>吊销一个用户，需要经过以下流程。</p><p>1）生成CRL</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">切换至管理员身份，生成CRL</span></span><br><span class="line">export CORE_PEER_LOCALMSPID=peerOrg2MSP</span><br><span class="line">export CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg2/admin/msp</span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg2:7051</span><br><span class="line">export CORE_PEER_TLS_ROOTCERT_FILE=/data/peerOrg2-ca-chain.pem</span><br><span class="line">export CORE_PEER_TLS_ENABLED=true</span><br><span class="line">export CORE_PEER_ADDRESS=peer0-peerOrg2:7051</span><br><span class="line"><span class="meta">#</span><span class="bash">只想到管理员的msp目录</span></span><br><span class="line">export FABRIC_CA_CLIENT_HOME=/data/orgs/peerOrg2/admin</span><br><span class="line">export FABRIC_CA_CLIENT_TLS_CERTFILES=/data/peerOrg2-ca-chain.pem</span><br><span class="line"><span class="meta">#</span><span class="bash">吊销用户，生成CRL，会在msp下生成crls/crl*.pem文件</span></span><br><span class="line">fabric-ca-client revoke -d --revoke.name user-peerOrg2 --gencrl</span><br></pre></td></tr></table></figure><p>命令执行完成后，在<code>$/msp/crls</code>目录下生成一个crl.pem文件。</p><p><img src="/15ebafa6/1526452053966.png" alt="1526452053966"></p><p>2）修改channel配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">cd /data</span><br><span class="line"><span class="meta">#</span><span class="bash">1.获取channel配置，生成一个protobuff格式的文件</span></span><br><span class="line">peer channel fetch config mychannel_block.pb -c mychannel -o orderer:7050 --tls --cafile /data/ordererOrg-ca-chain.pem</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">2.启动configtxlator，解析pb文件。会产生一个7059的监听服务</span></span><br><span class="line">configtxlator start &amp;</span><br><span class="line">configtxlator_pid=$!</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">3.转换channel配置的protobuff格式为json</span></span><br><span class="line">curl -X POST --data-binary @mychannel_block.pb http://127.0.0.1:7059/protolator/decode/common.Block &gt; mychannel_block.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">4.修改配置json，增加吊销证书信息</span></span><br><span class="line">jq .data.data[0].payload.data.config mychannel_block.json &gt; config.json</span><br><span class="line">crl=$(cat $CORE_PEER_MSPCONFIGPATH/crls/crl*.pem | base64 | tr -d '\n')</span><br><span class="line">cat config.json | jq '.channel_group.groups.Application.groups.peerOrg2.values.MSP.value.config.revocation_list = ["'"$&#123;crl&#125;"'"]' &gt; updated_config.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">5.生成配置块的更新diff protobuff文件</span></span><br><span class="line">curl -X POST --data-binary @config.json http://127.0.0.1:7059/protolator/encode/common.Config &gt; config.pb</span><br><span class="line">curl -X POST --data-binary @updated_config.json http://127.0.0.1:7059/protolator/encode/common.Config &gt; updated_config.pb</span><br><span class="line">curl -X POST -F original=@config.pb -F updated=@updated_config.pb http://127.0.0.1:7059/configtxlator/compute/update-from-configs -F channel=mychannel &gt; channel_update.pb</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">6.转换配置块更新protobuff为json</span></span><br><span class="line">curl -X POST --data-binary @channel_update.pb http://127.0.0.1:7059/protolator/decode/common.ConfigUpdate &gt;channel_update.json</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">7.生成peer channel update命令所需要的envelope protobuff文件</span></span><br><span class="line">echo '&#123;"payload":&#123;"header":&#123;"channel_header":&#123;"channel_id":"mychannel", "type":2&#125;&#125;,"data":&#123;"config_update":'$(cat channel_update.json)'&#125;&#125;&#125;' &gt; channel_update_envelope.json</span><br><span class="line">curl -X POST --data-binary @channel_update_envelope.json http://127.0.0.1:7059/protolator/encode/common.Envelope &gt; channel_update_envelope.pb</span><br><span class="line"></span><br><span class="line">kill -9 $configtxlator_pid</span><br><span class="line"></span><br><span class="line"><span class="meta">#</span><span class="bash">8.更新channel配置</span></span><br><span class="line">peer channel update -f channel_update_envelope.pb -c mychannel -o orderer:7050 --tls --cafile /data/ordererOrg-ca-chain.pem</span><br></pre></td></tr></table></figure><p>3）验证用户已吊销</p><p>切换到用户身份，执行chaincode的查询命令。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export CORE_PEER_MSPCONFIGPATH=/data/orgs/peerOrg2/user-peerOrg2/msp</span><br><span class="line">peer chaincode query -C mychannel -n abac -c '&#123;"Args":["query","b"]&#125;'</span><br></pre></td></tr></table></figure><p>执行失败产生类似如图的异常</p><p><img src="/15ebafa6/1526452493919.png" alt="1526452493919"></p><p>同时在peer0-peerOrg2上可见日志，说明证书已经吊销成功。</p><p><img src="/15ebafa6/1526452543934.png" alt="1526452543934"></p><p>以用户身份，向ca中间服务器请求重新生成证书。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">export FABRIC_CA_CLIENT_HOME=/tmp/user</span><br><span class="line">fabric-ca-client enroll -d -u https://user-peerOrg2:password@ica-peerOrg2:7054</span><br></pre></td></tr></table></figure><p>从ca中间服务器上可见日志，用户已吊销，无法重新生成证书。</p><p><img src="/15ebafa6/1526454067561.png" alt="1526454067561"></p><p>#附录</p><h2 id="证书目录结构"><a href="#证书目录结构" class="headerlink" title="证书目录结构"></a>证书目录结构</h2><p>tls目录用于节点启动时，自身所使用的公私钥。</p><p>msp目录用于表示节点的身份。主要包括以下几个子目录</p><ul><li>admincerts：这个身份的管理员证书。对peer节点来说，admincerts应当是组织的管理员证书。其它case一般与signcerts是一样的。</li><li>cacerts：组织的根证书</li><li>keystore：这个身份的私钥，用来签名数据。</li><li>（可选）intermediatecerts：组织的中间根证书</li><li>signcerts：这个身份的公钥</li><li>tlscacerts：组织tls通信的根证书</li><li>（可选）tlsintermediatecerts：组织tls通信的中间根证书</li></ul><p><code>cryptogen</code>程序生成各个证书目录及其作用如下图所示：</p><p><img src="/15ebafa6/msp_structure.png" alt="证书目录结构"></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p>1）在cryptogen生成的根证书和私钥，启动组织的fabric-ca服务，管理此组织的用户。</p><p><a href="http://hyperledger-fabric-ca.readthedocs.io/en/latest/users-guide.html" target="_blank" rel="noopener">http://hyperledger-fabric-ca.readthedocs.io/en/latest/users-guide.html</a></p><p>2）社区的fabric-ca例子</p><p><a href="https://github.com/hyperledger/fabric-samples/tree/release-1.1/fabric-ca" target="_blank" rel="noopener">https://github.com/hyperledger/fabric-samples/tree/release-1.1/fabric-ca</a></p><p>特点：</p><ul><li><p>每个组织都有一个根ca和中间ca。</p><p>原则上来说，从脚本执行来看，可以让所有组织都使用同一个ca来进行管理。</p></li><li><p>示例脚本自带验证用户的注册、登录、吊销证书等测试case。</p></li></ul><p>3）修改过的社区fabric-ca例子</p><p><a href="https://github.com/swordboy/fabric-samples/tree/release-1.1/fabric-ca" target="_blank" rel="noopener">https://github.com/swordboy/fabric-samples/tree/release-1.1/fabric-ca</a></p><ul><li><p>使用自定义fabric-ca服务器生成中间根证书、tls证书等文件。手动生成中间根证书的命令。</p><p><code>fabric-ca-server init -b admin:adminpw -u $PARENT_URL</code></p><p>即可在<code>FABRIC_CA_CLIENT_HOME</code>环境变量的目录得到准备好的中间根证书。</p></li><li><p>没有根ca服务器，直接使用中间ca服务器管理组织</p></li></ul><p>4）手动搭建环境的yaml和配置</p><p><a href="https://github.com/swordboy/fabric_examples/tree/master/ca" target="_blank" rel="noopener">https://github.com/swordboy/fabric_examples/tree/master/ca</a></p><ul><li><p>fabric-ca的功能测试case</p></li><li><p>添加用户</p></li><li><p>吊销用户</p></li><li><p>abac检查</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric </tag>
            
            <tag> fabric-ca </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一步一步搭建fabric网络环境</title>
      <link href="/c4b38323.html"/>
      <url>/c4b38323.html</url>
      
        <content type="html"><![CDATA[<p>fabric社区自带的测试脚本已经非常完善，能够快速搭建一个测试环境出来。但为了了解具体细节，本文章将一步一步地完成环境的搭建过程进行说明，加深对各步骤操作的理解。</p><h1 id="1-环境准备"><a href="#1-环境准备" class="headerlink" title="1. 环境准备"></a>1. 环境准备</h1><p>参考官方文档,安装准备如下软件: </p><ul><li><p>go 1.7.5版本及以上，尽量不要使用直接安装方式的版本</p></li><li><p>docker 1.12版本及以上</p></li><li><p>docker-compose 1.14及以上</p></li><li><p>make</p></li><li><p>下载fabric源代码，并切换到<code>release-1.0</code>分支。设置正确的环境变量。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> GOPATH=$(<span class="built_in">pwd</span>)</span><br><span class="line">mkdir -p <span class="variable">$GOPATH</span>/src/github.com/hyperledger</span><br><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/hyperledger&amp;&amp;git <span class="built_in">clone</span> https://github.com/hyperledger/fabric.git</span><br></pre></td></tr></table></figure></li></ul><ul><li><p>预先下载好如下镜像</p><blockquote><p>可通过增加docker配置<code>--registry-mirror https://obou6wyb.mirror.aliyuncs.com</code>，使用阿里云镜像仓库加速下载。</p></blockquote><p><img src="/c4b38323/1524642656297.png" alt="1524642656297"></p></li></ul><h1 id="2-生成公私钥和证书"><a href="#2-生成公私钥和证书" class="headerlink" title="2.生成公私钥和证书"></a>2.生成公私钥和证书</h1><blockquote><p>fabric中有两种类型的公私钥和证书，一种是给节点之前通讯安全而准备的TLS证书，另一种是用户登录和权限控制的用户证书。这些证书本来应该是由<strong>fabric CA</strong>服务来颁发，但在测试环境中，我们可以使用fabric提供的cryptogen工具来生成，简化操作。</p></blockquote><h2 id="2-1编译cryptogen"><a href="#2-1编译cryptogen" class="headerlink" title="2.1编译cryptogen"></a>2.1编译cryptogen</h2><p>使用如下make命令来编译cryptogen程序，注意此程序运行仍然需要以来go环境。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> <span class="variable">$GOPATH</span>/src/github.com/hyperledger/fabric</span><br><span class="line">make cryptogen</span><br></pre></td></tr></table></figure><p>输出如下内容，表示编译成功</p><p><img src="/c4b38323/1524646187553.png" alt="1524646187553"></p><h2 id="2-2配置crypto-config-yaml"><a href="#2-2配置crypto-config-yaml" class="headerlink" title="2.2配置crypto-config.yaml"></a>2.2配置crypto-config.yaml</h2><p>配置crypto-config.yaml，此配置文件包含组织信息和order信息，生成所需要的证书。</p><p>examples/e2e_cli/crypto-config.yaml默认提供了一个Orderer Org和两个Peer Org的配置，该模板中也对各个字段进行了说明，组织的声明支持两种：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">OrdererOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Orderer</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">example.com</span></span><br><span class="line">    <span class="comment">#组织内只有一个节点时，通过Specs指定</span></span><br><span class="line">    <span class="attr">Specs:</span></span><br><span class="line">      <span class="comment">#组织内只有一个节点时，指定的主机名</span></span><br><span class="line">      <span class="bullet">-</span> <span class="attr">Hostname:</span> <span class="string">orderer</span></span><br><span class="line"><span class="attr">PeerOrgs:</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Org1</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">org1.example.com</span></span><br><span class="line">    <span class="comment">#组织内由一个或者多个节点时，通过template指定</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="comment">#节点个数，生成的主机名按顺序peer0到peer&#123;Count-1&#125;</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="comment">#生成的除Admin之外的普通用户证书个数</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Org2</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">org2.example.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br><span class="line">  <span class="bullet">-</span> <span class="attr">Name:</span> <span class="string">Org3</span></span><br><span class="line">    <span class="attr">Domain:</span> <span class="string">org3.example.com</span></span><br><span class="line">    <span class="attr">Template:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">2</span></span><br><span class="line">    <span class="attr">Users:</span></span><br><span class="line">      <span class="attr">Count:</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><p>Name和Domain即为组织的名称和域名，用于生成证书使用。配置完成crypto-config.yaml后，就可以生成公私钥和证书了。</p><blockquote><p>在社区自带例子基础上，增加了一个新的组织。</p></blockquote><h2 id="2-2-生成公私钥和证书"><a href="#2-2-生成公私钥和证书" class="headerlink" title="2.2 生成公私钥和证书"></a>2.2 生成公私钥和证书</h2><p>使用编译好的cryptogen读取配置的crypto-config.yaml来生成公私钥和证书，命令行如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> examples/e2e_cli/</span><br><span class="line">../../build/bin/cryptogen generate --config=./crypto-config.yaml</span><br></pre></td></tr></table></figure><p>命令行输入如下图：</p><p><img src="/c4b38323/1524646104678.png" alt="1524646104678"></p><p>产生的公私钥和证书都存在于crypto-config目录，可以用如下命令来检查生成了哪些证书。</p><p><code>tree crypto-config</code></p><p>可以看到类似下面的输出</p><p><img src="/c4b38323/1524646318686.png" alt="1524646318686"></p><h1 id="3-生成创世块和channel配置"><a href="#3-生成创世块和channel配置" class="headerlink" title="3 生成创世块和channel配置"></a>3 生成创世块和channel配置</h1><p>fabric使用configtxgen工具生成以下系统配置：</p><ul><li>创世块，被ordering service使用</li><li>channel配置信息，创建和配置channel使用。</li><li>锚点peer信息，创建组织时，指定其中的锚点节点，产生的配置块。</li></ul><p>可使用fabric源码直接编译出来。</p><h2 id="3-1编译configtxgen"><a href="#3-1编译configtxgen" class="headerlink" title="3.1编译configtxgen"></a>3.1编译configtxgen</h2><p>使用如下命令编译configtxgen工具</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd $GOPATH/src/github.com/hyperledger/fabric/</span><br><span class="line">make configtxgen</span><br></pre></td></tr></table></figure><p>产生如下输出，编译成功。</p><p><img src="/c4b38323/1524648058360.png" alt="1524648058360"></p><h2 id="3-2配置configtx-yaml"><a href="#3-2配置configtx-yaml" class="headerlink" title="3.2配置configtx.yaml"></a>3.2配置configtx.yaml</h2><p>官方例子examples/e2e_cli/configtx.yaml中包含了order的配置和有两组peer组成的channel的配置。order可以配置为solo或者给予kafka的集群模式，测试时可以直接使用默认值即可。对channel的配置，稍作变动，改为三个channel，每个channel有一个组织、两个节点。</p><p>实例配置修改为如下：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="meta">---</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Profile</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - Different configuration profiles may be encoded here to be specified</span></span><br><span class="line"><span class="comment">#   as parameters to the configtxgen tool</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Profiles:</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">ThreeOrgsOrdererGenesis:</span></span><br><span class="line">        <span class="attr">Orderer:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*OrdererDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*OrdererOrg</span></span><br><span class="line">        <span class="attr">Consortiums:</span></span><br><span class="line">            <span class="attr">Consortium1:</span></span><br><span class="line">                <span class="attr">Organizations:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line">            <span class="attr">Consortium2:</span></span><br><span class="line">                <span class="attr">Organizations:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line">            <span class="attr">Consortium3:</span></span><br><span class="line">                <span class="attr">Organizations:</span></span><br><span class="line">                    <span class="bullet">-</span> <span class="meta">*Org3</span></span><br><span class="line">        </span><br><span class="line">    <span class="attr">Orgs1Channel:</span></span><br><span class="line">        <span class="attr">Consortium:</span> <span class="string">Consortium1</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org1</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Orgs2Channel:</span></span><br><span class="line">        <span class="attr">Consortium:</span> <span class="string">Consortium2</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org2</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Orgs3Channel:</span></span><br><span class="line">        <span class="attr">Consortium:</span> <span class="string">Consortium3</span></span><br><span class="line">        <span class="attr">Application:</span></span><br><span class="line">            <span class="string">&lt;&lt;:</span> <span class="meta">*ApplicationDefaults</span></span><br><span class="line">            <span class="attr">Organizations:</span></span><br><span class="line">                <span class="bullet">-</span> <span class="meta">*Org3</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   Section: Organizations</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the different organizational identities which will</span></span><br><span class="line"><span class="comment">#   be referenced later in the configuration.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># SampleOrg defines an MSP using the sampleconfig.  It should never be used</span></span><br><span class="line">    <span class="comment"># in production but may be used as a template for other definitions</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;OrdererOrg</span></span><br><span class="line">        <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">        <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">OrdererOrg</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">OrdererMSP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># MSPDir is the filesystem path which contains the MSP configuration</span></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/ordererOrganizations/example.com/msp</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;Org1</span></span><br><span class="line">        <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">        <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">Org1MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">Org1MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/peerOrganizations/org1.example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">AnchorPeers:</span></span><br><span class="line">            <span class="comment"># AnchorPeers defines the location of peers which can be used</span></span><br><span class="line">            <span class="comment"># for cross org gossip communication.  Note, this value is only</span></span><br><span class="line">            <span class="comment"># encoded in the genesis block in the Application section context</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;Org2</span></span><br><span class="line">        <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">        <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">Org2MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">Org2MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/peerOrganizations/org2.example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">AnchorPeers:</span></span><br><span class="line">            <span class="comment"># AnchorPeers defines the location of peers which can be used</span></span><br><span class="line">            <span class="comment"># for cross org gossip communication.  Note, this value is only</span></span><br><span class="line">            <span class="comment"># encoded in the genesis block in the Application section context</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7051</span></span><br><span class="line">    <span class="bullet">-</span> <span class="meta">&amp;Org3</span></span><br><span class="line">        <span class="comment"># DefaultOrg defines the organization which is used in the sampleconfig</span></span><br><span class="line">        <span class="comment"># of the fabric.git development environment</span></span><br><span class="line">        <span class="attr">Name:</span> <span class="string">Org3MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># ID to load the MSP definition as</span></span><br><span class="line">        <span class="attr">ID:</span> <span class="string">Org3MSP</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">MSPDir:</span> <span class="string">crypto-config/peerOrganizations/org3.example.com/msp</span></span><br><span class="line"></span><br><span class="line">        <span class="attr">AnchorPeers:</span></span><br><span class="line">            <span class="comment"># AnchorPeers defines the location of peers which can be used</span></span><br><span class="line">            <span class="comment"># for cross org gossip communication.  Note, this value is only</span></span><br><span class="line">            <span class="comment"># encoded in the genesis block in the Application section context</span></span><br><span class="line">            <span class="bullet">-</span> <span class="attr">Host:</span> <span class="string">peer0.org3.example.com</span></span><br><span class="line">              <span class="attr">Port:</span> <span class="number">7051</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Orderer</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the values to encode into a config transaction or</span></span><br><span class="line"><span class="comment">#   genesis block for orderer related parameters</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Orderer:</span> <span class="meta">&amp;OrdererDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Orderer Type: The orderer implementation to start</span></span><br><span class="line">    <span class="comment"># Available types are "solo" and "kafka"</span></span><br><span class="line">    <span class="attr">OrdererType:</span> <span class="string">solo</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Addresses:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">orderer.example.com:7050</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Batch Timeout: The amount of time to wait before creating a batch</span></span><br><span class="line">    <span class="attr">BatchTimeout:</span> <span class="string">2s</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Batch Size: Controls the number of messages batched into a block</span></span><br><span class="line">    <span class="attr">BatchSize:</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Max Message Count: The maximum number of messages to permit in a batch</span></span><br><span class="line">        <span class="attr">MaxMessageCount:</span> <span class="number">10</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Absolute Max Bytes: The absolute maximum number of bytes allowed for</span></span><br><span class="line">        <span class="comment"># the serialized messages in a batch.</span></span><br><span class="line">        <span class="attr">AbsoluteMaxBytes:</span> <span class="number">98</span> <span class="string">MB</span></span><br><span class="line"></span><br><span class="line">        <span class="comment"># Preferred Max Bytes: The preferred maximum number of bytes allowed for</span></span><br><span class="line">        <span class="comment"># the serialized messages in a batch. A message larger than the preferred</span></span><br><span class="line">        <span class="comment"># max bytes will result in a batch larger than preferred max bytes.</span></span><br><span class="line">        <span class="attr">PreferredMaxBytes:</span> <span class="number">512</span> <span class="string">KB</span></span><br><span class="line"></span><br><span class="line">    <span class="attr">Kafka:</span></span><br><span class="line">        <span class="comment"># Brokers: A list of Kafka brokers to which the orderer connects</span></span><br><span class="line">        <span class="comment"># <span class="doctag">NOTE:</span> Use IP:port notation</span></span><br><span class="line">        <span class="attr">Brokers:</span></span><br><span class="line">            <span class="bullet">-</span> <span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span><span class="string">:9092</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Organizations is the list of orgs which are defined as participants on</span></span><br><span class="line">    <span class="comment"># the orderer side of the network</span></span><br><span class="line">    <span class="attr">Organizations:</span></span><br><span class="line"></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   SECTION: Application</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#   - This section defines the values to encode into a config transaction or</span></span><br><span class="line"><span class="comment">#   genesis block for application related parameters</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">################################################################################</span></span><br><span class="line"><span class="attr">Application:</span> <span class="meta">&amp;ApplicationDefaults</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Organizations is the list of orgs which are defined as participants on</span></span><br><span class="line">    <span class="comment"># the application side of the network</span></span><br><span class="line">    <span class="attr">Organizations:</span></span><br></pre></td></tr></table></figure><h2 id="3-3-生成系统配置"><a href="#3-3-生成系统配置" class="headerlink" title="3.3 生成系统配置"></a>3.3 生成系统配置</h2><p>1) 生成创世块，保存在channel-artifacts目录中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd examples/e2e_cli/</span><br><span class="line"></span><br><span class="line">../../build/bin/configtxgen -profile ThreeOrgsOrdererGenesis -outputBlock ./channel-artifacts/genesis.block</span><br></pre></td></tr></table></figure><p>产生如下输出，表示创建成功。</p><p><img src="/c4b38323/1524648972111.png" alt="1524648972111"></p><p>2) 生成channel交易配置文件</p><p>使用如下命令，分别对三个channel生成对应配置，并保存在channel-artifacts目录中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">../../build/bin/configtxgen -profile Orgs1Channel -outputCreateChannelTx ./channel-artifacts/channel1.tx -channelID channel1</span><br><span class="line">../../build/bin/configtxgen -profile Orgs2Channel -outputCreateChannelTx ./channel-artifacts/channel2.tx -channelID channel2</span><br><span class="line">../../build/bin/configtxgen -profile Orgs3Channel -outputCreateChannelTx ./channel-artifacts/channel3.tx -channelID channel3</span><br></pre></td></tr></table></figure><p>产生如下输出：</p><p><img src="/c4b38323/1524649188760.png" alt="1524649188760">)3) 生成锚节点交易配置文件</p><p>使用如下命令，分别生成三个组织的锚节点配置，保存在channel-artifacts目录中。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">../../build/bin/configtxgen -profile Orgs1Channel -outputAnchorPeersUpdate ./channel-artifacts/Org1MSPanchors.tx -channelID channel1 -asOrg Org1MSP</span><br><span class="line">../../build/bin/configtxgen -profile Orgs2Channel -outputAnchorPeersUpdate ./channel-artifacts/Org2MSPanchors.tx -channelID channel2 -asOrg Org2MSP</span><br><span class="line">../../build/bin/configtxgen -profile Orgs3Channel -outputAnchorPeersUpdate ./channel-artifacts/Org3MSPanchors.tx -channelID channel3 -asOrg Org3MSP</span><br></pre></td></tr></table></figure><p>4) 检查系统配置</p><p>最终产生如下7个配置文件。</p><p><img src="/c4b38323/1524650140317.png" alt="1524650140317"></p><h1 id="4-配置启动节点容器的docker-compose文件"><a href="#4-配置启动节点容器的docker-compose文件" class="headerlink" title="4 配置启动节点容器的docker-compose文件"></a>4 配置启动节点容器的docker-compose文件</h1><h2 id="4-1-orderer配置"><a href="#4-1-orderer配置" class="headerlink" title="4.1 orderer配置"></a>4.1 orderer配置</h2><p>orderer可以直接使用官方案例的默认配置，不需要做太多改动。其配置包括在<code>base/docker-compose-base.yaml</code>中。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">orderer.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer.example.com</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-orderer</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOGLEVEL=debug</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LISTENADDRESS=0.0.0.0</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISMETHOD=file</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPID=OrdererMSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_LOCALMSPDIR=/var/hyperledger/orderer/msp</span></span><br><span class="line">      <span class="comment"># enabled TLS</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_PRIVATEKEY=/var/hyperledger/orderer/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_CERTIFICATE=/var/hyperledger/orderer/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">ORDERER_GENERAL_TLS_ROOTCAS=[/var/hyperledger/orderer/tls/ca.crt]</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric</span></span><br><span class="line">    <span class="attr">command:</span> <span class="string">orderer</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">../channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">../crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/msp:/var/hyperledger/orderer/msp</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">../crypto-config/ordererOrganizations/example.com/orderers/orderer.example.com/tls/:/var/hyperledger/orderer/tls</span></span><br><span class="line">    <span class="comment">#如果order不需要被主机方案，可以改为使用expose语法，只在内部暴露端口</span></span><br><span class="line">    <span class="attr">ports:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7050</span><span class="string">:7050</span></span><br></pre></td></tr></table></figure><p>创世块配置<code>ORDERER_GENERAL_GENESISFILE=/var/hyperledger/orderer/orderer.genesis.block</code>，而这个创世块就是之前创建的创世块，使用容器volume，将主机文件映射到容器中，实际生产环境，可以把创世块文件上传到order节点上：</p><p><code>../channel-artifacts/genesis.block:/var/hyperledger/orderer/orderer.genesis.block</code></p><h2 id="4-2-peer配置"><a href="#4-2-peer配置" class="headerlink" title="4.2 peer配置"></a>4.2 peer配置</h2><p>peer的配置从<code>base/peer-base.yaml</code>中继承到<code>base/docker-compose-base.yaml</code>的配置。</p><p>以peer0.org1的配置为例，它在<code>docker-compose-base.yaml</code>中：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">peer0.org1.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">peer-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer-base</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=peer0.org1.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_CHAINCODELISTENADDRESS=peer0.org1.example.com:7052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_GOSSIP_EXTERNALENDPOINT=peer0.org1.example.com:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=Org1MSP</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/msp:/etc/hyperledger/fabric/msp</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../crypto-config/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls:/etc/hyperledger/fabric/tls</span></span><br><span class="line">    <span class="comment">#社区配置ports来对主机暴露端口，实际测试如果通过cli操作，也可以不对外暴露端口。</span></span><br><span class="line">    <span class="attr">expose:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7052</span></span><br><span class="line">      <span class="bullet">-</span> <span class="number">7053</span></span><br></pre></td></tr></table></figure><p>主要使用之前生成的，对peer0.org1的MSP配置和通信用的证书。</p><h2 id="4-3-cli配置"><a href="#4-3-cli配置" class="headerlink" title="4.3 cli配置"></a>4.3 cli配置</h2><p>cli用来访问区块链网络，需要能够访问任意peer和order节点。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Copyright IBM Corp. All Rights Reserved.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># SPDX-License-Identifier: Apache-2.0</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"></span><br><span class="line"><span class="attr">version:</span> <span class="string">'2'</span></span><br><span class="line"></span><br><span class="line"><span class="attr">services:</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">orderer.example.com:</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span>   <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">orderer.example.com</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">orderer.example.com</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.org1.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span>  <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer1.org1.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer1.org1.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span>  <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer1.org1.example.com</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer0.org2.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span>  <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer1.org2.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer1.org2.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span>  <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer1.org2.example.com</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">#相对社区版本，增加了一个包含两个peer的组织</span></span><br><span class="line">  <span class="attr">peer0.org3.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer0.org3.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer0.org3.example.com</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">peer1.org3.example.com:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">peer1.org3.example.com</span></span><br><span class="line">    <span class="attr">extends:</span></span><br><span class="line">      <span class="attr">file:</span> <span class="string">base/docker-compose-base.yaml</span></span><br><span class="line">      <span class="attr">service:</span> <span class="string">peer1.org3.example.com</span></span><br><span class="line"></span><br><span class="line">  <span class="attr">cli:</span></span><br><span class="line">    <span class="attr">container_name:</span> <span class="string">cli</span></span><br><span class="line">    <span class="attr">image:</span> <span class="string">hyperledger/fabric-tools</span></span><br><span class="line">    <span class="attr">tty:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">environment:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">GOPATH=/opt/gopath</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_LOGGING_LEVEL=DEBUG</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ID=cli</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_LOCALMSPID=Org1MSP</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ENABLED=true</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span></span><br><span class="line">    <span class="attr">working_dir:</span> <span class="string">/opt/gopath/src/github.com/hyperledger/fabric/peer</span></span><br><span class="line">    <span class="comment">#先注释掉command</span></span><br><span class="line">    <span class="comment">#command: /bin/bash -c './scripts/script.sh $&#123;CHANNEL_NAME&#125;; sleep $TIMEOUT'</span></span><br><span class="line">    <span class="attr">volumes:</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">/var/run/:/host/var/run/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">../chaincode/go/:/opt/gopath/src/github.com/hyperledger/fabric/examples/chaincode/go</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./crypto-config:/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./scripts:/opt/gopath/src/github.com/hyperledger/fabric/peer/scripts/</span></span><br><span class="line">        <span class="bullet">-</span> <span class="string">./channel-artifacts:/opt/gopath/src/github.com/hyperledger/fabric/peer/channel-artifacts</span></span><br><span class="line">    <span class="attr">depends_on:</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">orderer.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.org1.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer1.org1.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.org2.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer1.org2.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer0.org3.example.com</span></span><br><span class="line">      <span class="bullet">-</span> <span class="string">peer1.org3.example.com</span></span><br></pre></td></tr></table></figure><p>相对社区配置，除了增加了一个两peer的组织，也注释掉了command，我们手动来执行channel创建、peer加入等操作。</p><p>#5 初始化fabric环境 </p><blockquote><p>注意：启动前，手动拉取下列相关镜像的1.0.0版本，并更名为latest版本。</p><ul><li>hyperledger/fabric-tools:x86_64-1.0.0</li><li>hyperledger/fabric-orderer:x86_64-1.0.0</li><li>hyperledger/fabric-peer:x86_64-1.0.0</li></ul></blockquote><p>##5.1 启动环境</p><p>使用docker-compose来启动环境。命令行如下：</p><p><code>docker-compose -f docker-compose-cli.yaml up -d</code></p><blockquote><p>使用<code>-d</code>参数避免阻塞当前console。</p></blockquote><p>最终产生如下几个容器。</p><p><img src="/c4b38323/1524708400644.png" alt="1524708400644"></p><p>共启动了1个orderer、6个peer、1个cli容器，只有order容器绑定了主机端口，对外提供服务。</p><h2 id="5-2-创建channel"><a href="#5-2-创建channel" class="headerlink" title="5.2 创建channel"></a>5.2 创建channel</h2><p>进入cli容器，以其为客户端，创建channel，并将相应的peer加入到channel中。</p><p><code>docker exec -it cli bash</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer channel create -o orderer.example.com:7050 -c channel1 -f ./channel-artifacts/channel1.tx --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span></span><br></pre></td></tr></table></figure><p>最终在当前目录下产生区块文件<code>channel1.block</code>，peer加入channel1需要使用此文件。。</p><p>由于cli容器默认环境变量都是只想<code>org1</code>的配置，因此如果直接使用类似命令行创建channel2、channel3会导致出现如下错误：</p><p><img src="/c4b38323/1524706831559.png" alt="1524706831559"></p><p>因此需要重新设置相关环境变量，才能创建channel2，如下所示：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.key</span><br><span class="line">CORE_PEER_LOCALMSPID=Org2MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">CORE_PEER_ID=cli</span><br><span class="line">CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">CORE_PEER_ADDRESS=peer0.org2.example.com:7051</span><br><span class="line"></span><br><span class="line">peer channel create -o orderer.example.com:7050 -c channel2 -f ./channel-artifacts/channel2.tx --tls true --cafile $ORDERER_CA</span><br></pre></td></tr></table></figure><p>采用相同的方式，创建channel3，执行如下命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/server.key</span><br><span class="line">CORE_PEER_LOCALMSPID=Org3MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp</span><br><span class="line">CORE_PEER_ID=cli</span><br><span class="line">CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">CORE_PEER_ADDRESS=peer0.org3.example.com:7051</span><br><span class="line"></span><br><span class="line">peer channel create -o orderer.example.com:7050 -c channel3 -f ./channel-artifacts/channel3.tx --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span></span><br></pre></td></tr></table></figure><p>最终产生三个channel对应的区块文件。</p><p><img src="/c4b38323/1524707423385.png" alt="1524707423385"></p><h2 id="5-3-将peer加入对应channel"><a href="#5-3-将peer加入对应channel" class="headerlink" title="5.3 将peer加入对应channel"></a>5.3 将peer加入对应channel</h2><p>执行上面的步骤后，环境变量切换到了peer0.org3，因此如果还需要将peer0.org1、peer1.org1的两个节点加入到channel1中需要重新设置环境变量回peer0.org1。</p><p>将peer0.org1加入channel1的命令行如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key</span><br><span class="line">CORE_PEER_LOCALMSPID=Org1MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">CORE_PEER_ID=cli</span><br><span class="line">CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span><br><span class="line"></span><br><span class="line">peer channel join -b channel1.block</span><br></pre></td></tr></table></figure><p>输出类似如下内容，表示加入成功。</p><p><img src="/c4b38323/1524707664662.png" alt="1524707664662"></p><p>类似地，设置环境变量，将其他5个peer加入到对应channel中。</p><p>将peer1.org1加入到channel1的命令行如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.key</span><br><span class="line">CORE_PEER_LOCALMSPID=Org1MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">CORE_PEER_ID=cli</span><br><span class="line">CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">CORE_PEER_ADDRESS=peer1.org1.example.com:7051</span><br><span class="line"></span><br><span class="line">peer channel join -b channel1.block</span><br></pre></td></tr></table></figure><p>将peer0.org2加入到channel2的命令行如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.key</span><br><span class="line">CORE_PEER_LOCALMSPID=Org2MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">CORE_PEER_ID=cli</span><br><span class="line">CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">CORE_PEER_ADDRESS=peer0.org2.example.com:7051</span><br><span class="line"></span><br><span class="line">peer channel join -b channel2.block</span><br></pre></td></tr></table></figure><p>将peer1.org2加入到channel2的命令行如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/server.key</span><br><span class="line">CORE_PEER_LOCALMSPID=Org2MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer1.org2.example.com/tls/server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">CORE_PEER_ID=cli</span><br><span class="line">CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">CORE_PEER_ADDRESS=peer1.org2.example.com:7051</span><br><span class="line"></span><br><span class="line">peer channel join -b channel2.block</span><br></pre></td></tr></table></figure><p>将peer0.org3加入到channel3的命令如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/server.key</span><br><span class="line">CORE_PEER_LOCALMSPID=Org3MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp</span><br><span class="line">CORE_PEER_ID=cli</span><br><span class="line">CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">CORE_PEER_ADDRESS=peer0.org3.example.com:7051</span><br><span class="line"></span><br><span class="line">peer channel join -b channel3.block</span><br></pre></td></tr></table></figure><p>将peer1.org3加入到channel3的命令如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer1.org3.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/server.key</span><br><span class="line">CORE_PEER_LOCALMSPID=Org3MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer1.org3.example.com/tls/server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp</span><br><span class="line">CORE_PEER_ID=cli</span><br><span class="line">CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">CORE_PEER_ADDRESS=peer1.org3.example.com:7051</span><br><span class="line"></span><br><span class="line">peer channel join -b channel3.block</span><br></pre></td></tr></table></figure><h2 id="5-4-更新各组织锚节点"><a href="#5-4-更新各组织锚节点" class="headerlink" title="5.4 更新各组织锚节点"></a>5.4 更新各组织锚节点</h2><blockquote><p>如果不更新锚节点配置，则默认所有节点可互通?。反正测试时，不创建也可以正常测试chaincode。</p></blockquote><p>更新org1的锚节点配置，使用如下命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key</span><br><span class="line">CORE_PEER_LOCALMSPID=Org1MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">CORE_PEER_ID=cli</span><br><span class="line">CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span><br><span class="line"></span><br><span class="line">peer channel update -o orderer.example.com:7050 -c channel1 -f ./channel-artifacts/Org1MSPanchors.tx --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span></span><br></pre></td></tr></table></figure><p>更新org2的锚节点配置，使用如下命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.key</span><br><span class="line">CORE_PEER_LOCALMSPID=Org2MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp</span><br><span class="line">CORE_PEER_ID=cli</span><br><span class="line">CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">CORE_PEER_ADDRESS=peer0.org2.example.com:7051</span><br><span class="line"></span><br><span class="line">peer channel update -o orderer.example.com:7050 -c channel2 -f ./channel-artifacts/Org2MSPanchors.tx --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span></span><br></pre></td></tr></table></figure><p>更新org3的锚节点配置，使用如下命令行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/server.key</span><br><span class="line">CORE_PEER_LOCALMSPID=Org3MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/peers/peer0.org3.example.com/tls/server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org3.example.com/users/Admin@org3.example.com/msp</span><br><span class="line">CORE_PEER_ID=cli</span><br><span class="line">CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">CORE_PEER_ADDRESS=peer0.org3.example.com:7051</span><br><span class="line"></span><br><span class="line">peer channel update -o orderer.example.com:7050 -c channel3 -f ./channel-artifacts/Org3MSPanchors.tx --tls <span class="literal">true</span> --cafile <span class="variable">$ORDERER_CA</span></span><br></pre></td></tr></table></figure><h1 id="6-安装chaincode并运行"><a href="#6-安装chaincode并运行" class="headerlink" title="6 安装chaincode并运行"></a>6 安装chaincode并运行</h1><p>执行完上述步骤后，我们就可以验证chaincode和多channel的私密性了。</p><p>##6.1 部署chaincode</p><p>在cli容器中，继续执行命令行，在peer0.org1上安装chaincode，命令行如下所示。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key</span><br><span class="line">CORE_PEER_LOCALMSPID=Org1MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">CORE_PEER_ID=cli</span><br><span class="line">CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">CORE_PEER_ADDRESS=peer0.org1.example.com:7051</span><br><span class="line"></span><br><span class="line">peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go/</span><br></pre></td></tr></table></figure><p>安装过程实际上就是根据<code>GOPATH</code>下指定代码进行打包，然后通过同一主机上共享的挂载卷，将chaincode发送到peer0.org1上，但不实际启动容器运行chaincode。</p><h2 id="6-2-实例化chaincode"><a href="#6-2-实例化chaincode" class="headerlink" title="6.2 实例化chaincode"></a>6.2 实例化chaincode</h2><p>继续执行，在peer0.org1上实例化chaincode，命令行如下所示：</p><p><code>peer chaincode instantiate -o orderer.example.com:7050 --tls true --cafile $ORDERER_CA -C channel1 -n mycc -v 1.0 -c &#39;{&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;,&quot;100&quot;,&quot;b&quot;,&quot;200&quot;]}&#39;</code></p><blockquote><p>初始化可以执行几次？</p></blockquote><p>另起一个终端，监听peer0.org1的容器，可见peer0.org1使用Dockerfile编译新的容器镜像，将chaincode打包在镜像中，然后启动chaincode容器，以供调用。关键日志如下：</p><p>构建chaincode镜像并启动容器</p><p><img src="/c4b38323/1524711208709.png" alt="1524711208709"></p><p>完成背书</p><p><img src="/c4b38323/1524711566546.png" alt="1524711566546"></p><p>完成验证</p><p><img src="/c4b38323/1524711609564.png" alt="1524711609564"></p><p>保存数据到文件系统上的区块链、statedb、historydb</p><p><img src="/c4b38323/1524711680973.png" alt="1524711680973"></p><p>发消息通知交易完成</p><p><img src="/c4b38323/1524711723013.png" alt="1524711723013"></p><p>##6.3 测试交易过程</p><p>实例化时，a账户100，b账户200。查询账户信息。</p><p>在cli容器中，保持peer0.org1的环境变量配置，查询a账户信息，可见输出<code>Query Result: 100</code>，可以正常查询。</p><p><code>peer chaincode query -C channel1 -n mycc -c &#39;{&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}&#39;</code></p><p>从b账户转给a账户100，再查询a账户数据。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode invoke -o orderer.example.com:7050  --tls true --cafile $ORDERER_CA -C channel1 -n mycc -c &#39;&#123;&quot;Args&quot;:[&quot;invoke&quot;,&quot;b&quot;,&quot;a&quot;,&quot;100&quot;]&#125;&#39;</span><br></pre></td></tr></table></figure><p>再分别查询a、b账户数据，可见交易成功。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">peer chaincode query -C channel1 -n mycc -c &#39;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&#39;</span><br><span class="line">peer chaincode query -C channel1 -n mycc -c &#39;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;b&quot;]&#125;&#39;</span><br></pre></td></tr></table></figure><p><img src="/c4b38323/1524712083174.png" alt="1524712083174"></p><h2 id="6-4-在peer1-org1上部署chaincode"><a href="#6-4-在peer1-org1上部署chaincode" class="headerlink" title="6.4 在peer1.org1上部署chaincode"></a>6.4 在peer1.org1上部署chaincode</h2><p>在cli容器中，设置环境变量为peer1.org1，并部署chaincode。如下所示：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">ORDERER_CA=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem</span><br><span class="line">CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.key</span><br><span class="line">CORE_PEER_LOCALMSPID=Org1MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer1.org1.example.com/tls/server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp</span><br><span class="line">CORE_PEER_ID=cli</span><br><span class="line">CORE_LOGGING_LEVEL=DEBUG</span><br><span class="line">CORE_PEER_ADDRESS=peer1.org1.example.com:7051</span><br><span class="line"></span><br><span class="line">peer chaincode install -n mycc -v 1.0 -p github.com/chaincode/chaincode_example02/go/</span><br></pre></td></tr></table></figure><p>此时，peer1.org1不会启动chaincode容器。当执行查询时</p><p><code>peer chaincode query -C channel1 -n mycc -c &#39;{&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]}&#39;</code></p><p>由于peer1.org1并未启动chaincode容器，需要重新进行一遍编译镜像、启动容器等等过程来执行查询，因此需要等待较长的一段时间（10秒以上）。</p><h2 id="6-5-在其他channel的peer上安装并测试chaincode"><a href="#6-5-在其他channel的peer上安装并测试chaincode" class="headerlink" title="6.5 在其他channel的peer上安装并测试chaincode"></a>6.5 在其他channel的peer上安装并测试chaincode</h2><p>参考6.3、6.4步骤，可以在channel2、channel3</p><p>在channel2的peer0.org2上安装并测试chaincode。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">ORDERER_CA&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;ordererOrganizations&#x2F;example.com&#x2F;orderers&#x2F;orderer.example.com&#x2F;msp&#x2F;tlscacerts&#x2F;tlsca.example.com-cert.pem</span><br><span class="line">CORE_PEER_TLS_ROOTCERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;ca.crt</span><br><span class="line">CORE_PEER_TLS_KEY_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;server.key</span><br><span class="line">CORE_PEER_LOCALMSPID&#x3D;Org2MSP</span><br><span class="line">CORE_PEER_TLS_CERT_FILE&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;peers&#x2F;peer0.org2.example.com&#x2F;tls&#x2F;server.crt</span><br><span class="line">CORE_PEER_MSPCONFIGPATH&#x3D;&#x2F;opt&#x2F;gopath&#x2F;src&#x2F;github.com&#x2F;hyperledger&#x2F;fabric&#x2F;peer&#x2F;crypto&#x2F;peerOrganizations&#x2F;org2.example.com&#x2F;users&#x2F;Admin@org2.example.com&#x2F;msp</span><br><span class="line">CORE_PEER_ID&#x3D;cli</span><br><span class="line">CORE_LOGGING_LEVEL&#x3D;DEBUG</span><br><span class="line">CORE_PEER_ADDRESS&#x3D;peer0.org2.example.com:7051</span><br><span class="line"></span><br><span class="line">peer chaincode install -n mycc -v 1.0 -p github.com&#x2F;chaincode&#x2F;chaincode_example02&#x2F;go&#x2F;</span><br><span class="line"></span><br><span class="line">peer chaincode instantiate -o orderer.example.com:7050 --tls true --cafile $ORDERER_CA -C channel2 -n mycc -v 1.0 -c &#39;&#123;&quot;Args&quot;:[&quot;init&quot;,&quot;a&quot;,&quot;100&quot;,&quot;b&quot;,&quot;200&quot;]&#125;&#39;</span><br><span class="line"></span><br><span class="line">peer chaincode query -C channel2 -n mycc -c &#39;&#123;&quot;Args&quot;:[&quot;query&quot;,&quot;a&quot;]&#125;&#39;</span><br></pre></td></tr></table></figure><p>可见输出<code>Query Result: 100</code>，与channel1的数据互不干扰。</p><p><img src="/c4b38323/1524712926573.png" alt="1524712926573"></p><h1 id="7-总结"><a href="#7-总结" class="headerlink" title="7 总结"></a>7 总结</h1><p>现在只是对社区示例的简单修改，将org、channel、peer、chaincode的操作步骤拆分开来，帮助理解。真实环境中，完全可以参考此案例进行操作，创建更多的org和channel。</p><p>所有的yaml和配置参考<a href="https://github.com/swordboy/fabric_examples/tree/master/e2e_cli" target="_blank" rel="noopener">链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> fabric </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker overlay网络工作原理</title>
      <link href="/fb6add0e.html"/>
      <url>/fb6add0e.html</url>
      
        <content type="html"><![CDATA[<h1 id="1-简介"><a href="#1-简介" class="headerlink" title="1 简介"></a>1 简介</h1><p>docker从1.9版本以后就自带了基于vxlan的overlay网络能力，使docker从原生基础设施上满足了大部分容器跨主机通信的需求。</p><h1 id="2-前提"><a href="#2-前提" class="headerlink" title="2 前提"></a>2 前提</h1><p>使用原生overlay网络功能需要满足以下条件（以目前最新版本18.04为例）：</p><ul><li>所有主机内核版本在3.10及以上</li></ul><ul><li><p>key/value存储服务</p><p>两种方式择其一即可。</p><ul><li>使用外部存储服务，目前支持consul、etcdv2、zookeeper，要求所有主机都可以访问此服务；</li><li>启用swarm模式，由docker自身提供key/value存储能力，所有主机互通即可。</li></ul></li><li><p>主机之间网络互通，需要打开以下端口：</p><ul><li>2375：TCP端口，主机之间的API交互端口，这个可以自定义。</li><li>7946：TCP、UDP端口，主机之间的数据交互，用于生成overlay的转发表。</li><li>4789：UDP端口，overlay网络的vxlan数据通信端口</li></ul></li></ul><h1 id="3-功能测试"><a href="#3-功能测试" class="headerlink" title="3 功能测试"></a>3 功能测试</h1><ol><li><p>按照前提准备好docker服务后，创建overlay测试网络。</p><p>在任意主机上执行下列命令</p><p><code>docker network create --driver overlay overlay_network</code></p><p>由于主机之间已经通过建立共享存储，在任意其他主机上执行<code>docker network ls</code>都可以查询到此网络。产生类似下面的输出。</p><p><img src="/fb6add0e/1525227850778.png" alt="1525227850778"></p><p><img src="/fb6add0e/1525227867468.png" alt="1525227867468"></p></li><li><p>在不同主机上分别创建<code>overlay_network</code>下的容器。</p><p>在主机<code>VM-0-10-ubuntu</code>上创建容器</p><p><code>docker run  -tid --network=overlay_network --name=hosta ubuntu:14.04 sleep 3600</code></p><p>在主机<code>VM-156-85-ubuntu</code>上创建容器</p><p><code>docker run  -tid --network=overlay_network --name=hostb ubuntu:14.04 sleep 3600</code></p></li><li><p>测试容器跨主机互通</p><p>在容器<code>hostb</code>中执行<code>ping hosta</code>，可以访问到另外一个主机上的对应容器，如下图。</p><p><img src="/fb6add0e/1525228350154.png" alt="1525228350154"></p><p>在<code>hosta</code>中查看IP配置，与<code>ping hosta</code>的结果匹配，如下图。</p><p><img src="/fb6add0e/1525228933412.png" alt="1525228933412"></p><blockquote><p>eth1是docker为容器默认添加的dockergw_bridge上的虚拟网卡，用于实现主机与容器之间的通信。</p></blockquote><p>说明容器成功进行了跨主机的通信。</p></li></ol><h1 id="4-原理说明"><a href="#4-原理说明" class="headerlink" title="4 原理说明"></a>4 原理说明</h1><p>参考<a href="./check_container_netns_on_host.md">进入容器和网络的netns</a>，可以在主机上查看容器和overlay网络的命名空间。</p><ol><li><p>进入<code>hosta</code>的netns，网卡配置如下所示：</p><p><img src="/fb6add0e/1525228884976.png" alt="1525228884976"></p><p>从中我们可以看到<code>hosta</code>的容器网卡<code>eth0</code>有一个编号为<code>290</code>的对端虚拟网卡，这个网卡在哪里呢？<code>hosta</code>的网卡从<code>overlay_network</code>中分配，那么在<code>overlay_network</code>的netns中，肯定可以找到痕迹。</p></li><li><p>进入overlay_network的netns，检查网卡配置，如下图所示：</p><p><img src="/fb6add0e/1525229238051.png" alt="1525229238051"></p><p>找到了编号为<code>290</code>虚拟网卡，它在一个网桥<code>br0</code>上，使用命令<code>brctl show</code>检查网桥配置，如下所示。</p><p><img src="/fb6add0e/1525229384977.png" alt="1525229384977"></p><p>从overlay网络实现原理，我们知道它是基于vxlan实现的，那么这个虚拟网卡<code>vxlan0</code>就是实现跨主机通信的关键所在。</p></li><li><p>检查<code>vxlan0</code>网卡的配置，可使用命令<code>ip -d link show vxlan0</code></p><p><img src="/fb6add0e/1525229654706.png" alt="1525229654706"></p><p>可见vxlan隧道ID分配为<code>256</code>，数据通信端口为<code>4789</code>。</p><p>在<code>overlay_network</code>的netns中，我们检查arp表，可见若干条静态的映射，这是由docker守护进程生成的，通信时，根据ARP表来找到对应mac地址，如下图所示。</p><p><img src="/fb6add0e/1525231682275.png" alt="1525231645193"></p><p>得到mac地址后，可以在fdb表中，找到下一跳对应的主机地址。</p><p>使用命令<code>bridge fdb show dev vxlan0</code>，可以检查vxlan0上的fdb转发表规则。</p><p><img src="/fb6add0e/1525231759235.png" alt="1525231759235"></p><p>从fdb转发表上，可以看到对端容器的mac地址和要转发的对应主机IP地址，这样整个通信链路就打通了，可以转发到对端主机上，对端主机收到数据后，再通过其上的<code>overlay_network</code>的netns，将数据转发到对应容器上。</p><blockquote><p>上图中，对端地址之所以时10.10.10.2，是因为两个主机是通过gre隧道打通的，此地址为gre隧道对端地址。</p></blockquote><p>​</p><p>至此，我们了解清楚了docker overlay网络的实现原理，有助于以后的容器网络故障分析排查。</p><p>​</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker内置dns server工作原理</title>
      <link href="/59435c3a.html"/>
      <url>/59435c3a.html</url>
      
        <content type="html"><![CDATA[<h1 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h1><p>测试环境为docker社区版本17.03。</p><blockquote><p>docker容器的网络命名空间默认无法通过<code>ip netns</code>命令查询到，因此有两种办法。都需要通过<code>docker inspect -f \&quot;\&quot; &lt;container_id&gt;</code>找到容器的初始进程开始。</p><ol><li>通过<code>ln -s /proc/&lt;pid&gt;/ns/net /var/run/ns/&lt;container_id&gt;</code>，将命名空间暴漏在ip netns下，继续后续操作。本文就采用这种办法，好处就是可以利用容器中没有而主机上有的命令行。</li><li>通过<code>nsenter –target &lt;pid&gt; –mount –uts –ipc –net –pid</code>进入容器命名空间，再执行操作。</li></ol></blockquote><h1 id="原理介绍"><a href="#原理介绍" class="headerlink" title="原理介绍"></a>原理介绍</h1><h2 id="容器的dns解析顺序"><a href="#容器的dns解析顺序" class="headerlink" title="容器的dns解析顺序"></a>容器的dns解析顺序</h2><p>容器中的DNS名称解析优先级顺序为：</p><ul><li>​    内置DNS服务器127.0.0.11。</li><li>​    通过–dns等参数为容器配置的DNS服务器。</li><li>​    docker守护进程的–dns服务配置（默认为8.8.8.8和8.8.4.4）</li><li>​    宿主机上的DNS设置。</li></ul><h2 id="docker-dns-server工作机制"><a href="#docker-dns-server工作机制" class="headerlink" title="docker dns server工作机制"></a>docker dns server工作机制</h2><ol><li><p>一般情况下，使用docker网络的容器的dns服务器是127.0.0.11。如下图所示：</p><p><img src="/59435c3a/container_dns_ip.png" alt="容器dns地址"></p></li><li><p>直接在容器中，或者在容器命令空间中，通过<code>iptables-save</code>获得iptables规则。如下图所示：</p><p><img src="/59435c3a/container_dns_iptables.png" alt="容器iptables规则"></p><p>根据iptables规则，可以发现到127.0.0.11的53端口的dns请求，被转发到了43747端口。那么这个端口是被什么程序监听的呢？</p></li><li><p>在容器的网络命令空间中，可以通过命令<code>netstat -ntlp</code>查到监听这个端口的程序，如下图所示：</p><p><img src="/59435c3a/container_dns_daemon.png" alt="dns的守护进程"></p><p>可以看到dns请求被转发到了主机上的docker containerd进程上了，它会向内部存储做查询，返回dns的查询结果。</p><blockquote><p>如果容器中有netstat命令行，由于进程空间隔离的原因，直接在容器中查询监听端口时，会出现对应进程为-的输出，只能在主机上执行才可以。</p></blockquote></li></ol>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何进入docker容器的网络命名空间</title>
      <link href="/b901096f.html"/>
      <url>/b901096f.html</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p>docker使用namespace实现网络，计算等资源的隔离，当需要排查网络问题时，使用<code>p netns</code>命令却无法在主机上看到任何network namespace，这是因为默认docker把创建的网络命名空间链接文件隐藏起来了，导致<code>ip netns</code>命令无法读取，给分析网络原理和排查问题带来了麻烦。</p><p>下面是恢复netns命名空间的办法。</p><p>#恢复容器的netns</p><p>执行下面的命令来获取容器进程号</p><p><code>docker inspect 容器|grep Pid</code></p><p>获取容器的进程号</p><p>执行如下命令，将进程网络命名空间恢复到主机目录，</p><p><code>ln -s /proc/容器进程号/ns/net /var/run/netns/容器</code></p><blockquote><p>如果/var/run/netns目录不存在，以root用户手动创建目录即可。</p></blockquote><p>然后执行<code>ip netns</code>命令即可看到容器的网络命名空间。可执行网络相关命令来排查网络情况。</p><p>参考示例，从中可以看出确实正常进入了容器的netns：</p><p><img src="/b901096f/1525226049086.png" alt="1525226049086"></p><p>#恢复docker网络的netns</p><p>网络的命名空间文件在<code>/var/run/docker/netns</code>目录中。</p><p>可通过命令<code>docker network ls</code>检查到容器网络ID与命名空间文件的映射关系。</p><p>找到网络的ID，既可以在此目录下找到对应的文件。</p><blockquote><p>对overlay网络，一般网络前面都有1-或2-这种数字前缀，直接使用即可</p></blockquote><p>使用如下命令恢复网络netns到主机上。</p><p><code>ln -s /var/run/docker/netns/网络ID前缀 /var/run/netns/网络netns名称</code></p><p>执行<code>ip netns</code>命令即可查到网络的netns。</p><p>如果在网络netns中，执行命令出现下面的异常，说明docker把网络netns又隐藏了一层。</p><p><code>RTNETLINK answers: Invalid argument</code></p><p>可以先进入docker守护进程的mount命名空间，在进入对应的网络命名空间，执行下面的nsenter命令。</p><blockquote><p>这是因为在systemd管理的docker服务中，默认开启了MountFlags=slave，这样容器docker在启动守护进程时，会将守护进程的mount命名空间独立出去，导致系统进程无法查看到，需要进行手动恢复。</p><p>权限足够时，可以删除MountFlags=slave配置。</p></blockquote><p>如下所示：</p><p><img src="/b901096f/1525227297819.png" alt="1525227297819"></p>]]></content>
      
      
      <categories>
          
          <category> 工作 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
